EW S4E6                Transcript
EPISODE 6


[EPISODE]


[00:00:07] ANNOUNCER: Hi everyone, we hope you're enjoying our new season on BEAM magic. Before we get started on today's episode, we want to let you know about a special event we have coming up. The first ever Elixir Wizards Conference is this June 16 and 17th. All online, two afternoons, a mix of talks, panels, and of course, the hallway track. As a podcast listener, you can get a discounted ticket by going to smr.tl/conf-podcast. We'll put that link in the show notes. Hope to see you then.


[00:00:35] JE: Welcome to Elixir Wizards, a podcast brought to you by SmartLogic, a custom web and mobile development shop based in Baltimore. My name is Justus Eapen and I’ll be your host. I’m joined by my stupendous co-host, Sundi Myint.


[00:00:49] SM: Hi.


[00:00:49] JE: Hey, Sundi, how are you?


[00:00:51] SM: Good. How are you?


[00:00:52] JE: Super good. So glad that you’re here with me. Eric's out today. I don't know why. No one else seems to know why either. So, we're going to keep on going. Okay, this season's theme is BEAM magic. And today we're joined by a special guest, Estelle DeBlois. 


Hey, Estelle. How are you?


[00:01:08] ED: Hi, I'm doing great. Thank you for having me.


[00:01:11] JE: You're from DockYard?


[00:01:12] ED: I am, yes.


[00:01:14] JE: You are a real boss lady over at DockYard?


[00:01:16] ED: I'm the Director of Engineering at DockYard.


[00:01:18] JE: Rock and roll. We were going to start with some personal questions. But I'm kind of curious just with how you got to that role at DockYard, because I've known about DockYard for a long time. I used to live in Boston for like three years. I've known Brian from living in Boston back in like 2013, around that time period. So, would love to know how you got to that role.


[00:01:38] ED: Yeah, so I joined DockYard, actually, seven years ago, almost. This August will be my seven-year work anniversary with DockYard. So, at some point, I think it was like close to two years of me being with DockYard as an engineer that there was a vacancy. The former head of engineering left and Brian reached out to me. He offered me the position. Honestly, I feel like it was more of the situation where DockYard needed my help. I feel like I could help them, and I sort of moved into that role without really planning on any sort of leadership position necessarily. I had been a tech lead before. I did have tech leadership experience, at least at the project level, but never managing individuals. So, Brian knew that I didn't have any sort of official management experience. But he trusted that I could go in there and figure it out and I did.


[00:02:40] JE: Well, I'm really curious about this, because I think a lot of people that listen to the show are intermediate to advanced developers, probably leads, interested in career development. I’m wondering what kind of characteristics you think Brian saw in you, to bring you up to that position? And then what have you worked on over the years to develop to become a – I guess, now, you've been doing it for half a decade, right?


[00:03:03] ED: Yeah. I mean, I don't know exactly what he saw in me to feel that I was prepared for it. I guess there was a time where our previous head of engineering was on paternity leave. I had an opportunity to step in during that time to kind of backfill him at the time. So, I was leading the entering things on a weekly basis. I was helping with business development activities. So, there was some of that. And then I was also – being on projects, I was already sort of leading other engineers through those projects, doing some mentoring and just kind of general coordination and everything. So, I guess, that kind of played into why Brian came to me for the role.


[00:03:49] SM: And just for our first-time listeners, that's Brian Cardarella, just in case that wasn't clear to anyone.


[00:03:54] ED: That’s right.


[00:03:56] SM: So, walk it back real quick. So, you started as a senior developer there without any intention to take on leadership roles? Or did you start as a developer and then move in that direction after Brian reached out to you about potentially stepping up?


[00:04:10] ED: Yeah. So, when he offered me the position, I took some time to think about whether that was a move that I wanted to do or not. Was that a career path that I wanted to take? Ultimately, I felt it was going to bring some new challenges, different problems to tackle. It was a terrific growth opportunity for me. And again, I felt like this was a time where that felt right for me. I felt very invested in the company at the time, and I wanted to help them out in any way that I could.


[00:04:43] JE: I’m really curious about this, because I'm trying to one day be in a role like this. So, I just want to know, what level should someone be at, at various, let's say, levels of the stack? How good should you be at databases? How good should you be at infrastructure? How good you should should be up front-end, and back-end? Communicating with developers, soft skills, that kind of thing. If you can rank some of these dimensions for me.


[00:05:07] ED: Yeah. So, you do have to have some good, solid track record of having been a good individual contributor. But it also helps if you have taken a tech lead role at some point for a project, because it sort of gives you the taste of what it might be like to do more leadership type of activities, maybe delegating, coordinating, and looking at the bigger picture. You have to exercise more of those soft skills, communicating with clients, communicating with stakeholders, communicating with the team, and thinking in terms of overall process that the team may adopt on a project and those things have to be on your mind. So, those are things that would be great for you to at least have built experience around before you take the next step.


So typically, you are sort of going from a junior developer to mid to senior and then you move into a tech lead role. From tech lead role, you may want to then try being an engineering manager. And then from an engineering manager, once you're used to managing a small team, then you can level up from there, maybe be an engineering lead, managing multiple teams, climb up to director. I sort of took a very untraditional path to director, I must say.


[00:06:35] SM: It's interesting, though, a lot of people consider lateral moves or moves that are going in towards management and sometimes we'll think about like their technical, what Justus just said, like, I need to be good at front-end and back-end. I need to understand this much about DevOps. But then there's like this other philosophy that you never stop learning. So, at some point, you just have to make that call, like, when do you go for it? Is there a way that you could advise on how to be self-aware about when you make that step?


[00:07:07] ED: That's a good question. I mean, you don't want to go there too soon. I think you want to have built the technical skills and experience that will also help you gain credibility with the team that you will end up managing. But at the same time, it's not about being the most senior person on the team. It's not about being the one who will have all of the answers. It's really about supporting the team that you have, so that they can scale and do their best work. It's about maybe bringing on people who may be smarter than you, put the right people in the right places, so that you can achieve a more positive outcome. But obviously, the experience having walked through the software development path prior to taking on a leadership role, will help you gain the context that is necessary to have empathy for your team and to better support and guide your team.


[00:08:11] SM: Yeah, absolutely. So, talking about that path, where did that start for you? How did you get into programming?


[00:08:17] ED: Oh, how did I get into programming? Well, so I studied computer science. I majored in computer science at Mount Holyoke College in Western Mass. I've actually always been interested in computers ever since I got introduced to them. I should also say, this is sort of a just additional context. I grew up in France in the ‘80s, and ‘90s, and computers were practically nonexistent. In school, all the papers were handwritten. We didn't have the option of going online and looking things up on Google. Doing research basically consisted of going to the library and looking things up in books and encyclopedias, and such. So, nobody really had a computer for a long while.


At some point, my cousin's in Paris somehow got a computer, a personal computer was just super cool at the time. So, I went and visit them, I actually spent a lot of time on the computer. But I should say it was mostly to play MS DOS types of video games and maybe even creating art out of Microsoft Paint. But I was still fascinated by just how this machine can just allow you to do so much. So, when I was 16, I moved to the United States. I did two years of high school in the Boston area. The high school that I attended allowed me to enroll in university courses. So, I enrolled at UMass Boston at the same time, while trying to finish high school.


So, I took two semesters of programming. I learned Java. I was all around Java, object-oriented programming and it was fantastic. They taught us beyond just programming itself. They taught us to get familiar with Unix, Emacs, the command line. We did everything in Emacs, so it was just so satisfying to be able to create something out of code and then just watching it run. So, I basically kind of was hooked from there.


[00:10:26] JE: I definitely don't think most people have the opportunity to be in a program like that. If you were going to teach yourself some of these things, or you were going to design your own curriculum, how would you think about structuring it so that people would develop the skills necessary to get to where you are in your career as quickly as possible?


[00:10:45] ED: Oh, boy. Well, I actually, because I can say I was formally trained. But at the same time, I was not and that there were a lot of things that were missing. When I graduated from college, it was actually really, really hard for me to find a job because I realized that, “Hey, I don't actually know a whole lot of things." Yes, I took courses about computer algorithms and AI and all of that sort of traditional curriculum. But then I didn't learn anything about version control. I didn't learn anything about networking, databases, web development. 


So, it’s like, "All right, well, if I had to do this all over, I would want to really find a curriculum to focus on the things that might be more practical for you." Definitely, I would not do away from all CS fundamentals that I was able to learn. But I feel like to some degree, I felt a little bit more detached from what I needed to know.


[00:11:44] SM: Yeah, I definitely have a similar feeling about traditional college courses. At some point, I just kind of left the path and realized I was going to have to learn everything in my internships and on the job. So, when you finally found that first job, was it a programming job? What kind of job was that first one out of college like?


[00:12:05] ED: Yeah, so it was a programming job. I actually – like in the beginning, I didn't know what to do with the CS degree. I knew I wanted to do some sort of programming, but I had no idea if it was going to be on the web, or maybe native development. I had no idea what my options were. 


So, I did eventually land a role as a Java developer and I actually had to convince them to let me in because I remember I applied to be an associate developer, and then got declined and then I went back to them and said, “You're making a mistake. I can add value to your company. Do you have an internship?” And then they allowed me in, as an intern, and I stayed there for six and a half years. So, I did a lot of Java. There was some Perl and CGI stuff in the beginning, but the company was transitioning to Java. So, I did a lot of Java, JSP, front-end development as well, lots of database stuff. So, kind of the full stack.


[00:13:08] SM: Yeah, that's fun. When did Elixir enter the picture in your like professional development life?


[00:13:14] ED: So that didn't happen until I was at DockYard, because I joined DockYard because of how I was a huge fan in Ember at the time. I had started to do more things with Ember development and I was attending a lot of the meetups and conferences related to Ember and eventually joined DockYard that way. But I think it was a year or so into meeting a DockYard, Brian introduced us to Elixir. We were doing a lot of Rails and Ember development at the time. But then Brian was continually just experimenting with new technologies. And then one day, he's like, “We're going to do Elixir.” That's sort of how we switched. There was no real sort of trying to get buy-in from the team to switch. It was more, “Hey, we're doing this.” And I don't recall there having been resistance at all.


[00:14:09] JE: I love this. I love this. It's such a denigrated thing in the industry nowadays, to just say, “Hey, I'm the leader and I'm going to make a decision based on what I think is best in my experience and we're going to do it.” And most of the time, you get all this drama around it. But Brian is able to command a team and it's the right decision, in my opinion.


[00:14:33] ED: Totally.


[00:14:33] JE: The other sort of potentially contentious claim that we could bring up here is you were talking about your internship and how your first – that’s another very controversial thing in the industry these days is internships. I got my first job in the industry by working for free in a guy's living room for like months and then he paid me like nothing. I took a pay cut to get into tech. And now here we are. So, I mean, do you have a take on internships and how we should think about them as an industry?


[00:15:01] ED: I mean, internships are so valuable. You have to give opportunities to those who are just entering the industry, to give them a chance to learn and grow and you can always rely on having senior staff, and also having a lot of senior stuff means that it's going to be expensive to run. 


But if you want to really have a diverse team, and bring on new perspectives, you have to have those opportunities to bring in interns or junior developers. I actually did the same thing. Before my first job out of college, one summer, I took an unpaid internship, to kind of get more experience. I guess, I could have done something more to try and pay off my tuition, but it was, you know, had to make a choice there.


[00:15:54] SM: It's interesting because like at my school, computer science internships were like highly coveted. They paid a lot in comparison to my friends who might be bartending or working in like the labs with lab assistants or whatever or TAs. Computer science internships made a lot more money than that, not as much money as like a salaried full-time employee or something. But definitely a good amount of fun money for a college student, right? And it was just sort of a common, like, the career fares were huge, and the booths were like big name companies. Everyone knew who the biggest names were, and they would go line up to go to that booth. I always went for the small booth. I wanted the water bottles, and they were always gone at the big booths. 


So yeah, it's just so interesting, like how there's such a different – this is probably like the times we went to college. The colleges we went to, it's just like such different experiences across the board, as well.


[00:16:50] ED: Yeah, for sure.


[00:16:52] JE: Well to be clear, mine was not a real internship. It was a startup with like one guy and we were just building stuff. And then one day he raised money, and then I started getting paid. So, totally worth it. So, returning back to the Elixir conversation. Brian kicks down the door like the Kool-Aid man says, "You’re going to use Elixir", and I just realized how awesome that is, the Kool-Aid man.


[00:17:17] SM: Like superimpose Brian Cardarella’s face on top of the Kool-Aid man. What was your reaction, your first time using Elixir? Your team has switched to Elixir, you're all working on it, maybe together, maybe on your own, what was that like?


[00:17:29] JE: Yeah. I mean, part of how Brian introduced us to Elixir was also because we had these hallway talks scheduled on a weekly basis. One of the hallway talks that Brian gave was to show us all the cool stuff about Elixir. So, he just kind of brought up IX for the presentation and just kind of showed us stuff, all the neat little syntax and everything. So, that was to me, the syntax itself was very, very appealing. But it's not really what makes Elixir so great and why I felt it was so compelling.


So, Brian distributed a bunch of books around from Dave Thomas, programming Elixir books. And so, we just kind of got a copy and read through it, just to kind of start getting acquainted to that. I remember reading through the book and just being mind blown by the – just understanding the process model behind Elixir, just the fact that you could have millions of processes running concurrently that are isolated, that are lightweight. To me, that was a different way of thinking about how you can run things concurrently. So, I mentioned, I think earlier that I did a little bit of Perl in the past and then Java.


So, in my Perl days, it was doing web applications with Perl and CGI. So essentially, you have a web server that would take web requests and kind of send that data to a Perl script. And then Perl script would execute and data would get sent back to the web server and then back to the browser. But the problem is that you had one heavyweight process per request. The performance was just a really poor and that was one reason why we decided at my first company to switch over to Java. So, with Java, now you're dealing with threads. And when a request comes in, you basically have a new thread. So, one thread per request. So that was much more performant. But now you're still dealing with threads that could potentially sort of collide, because there were certain operations that you can do that were not thread safe.


There was a case where we were dealing with a Java Util date, and we didn't know any better. We just kind of used it in our code without realizing that when a request comes in, that does something with a date, it would affect the date of another request that might happen at the same time. So, we ended up in a situation where, in production that were users who are like, “Why are these dates all wrong? What's happening?” It was like a nightmare to resolve. These are things that you don't have to think about with Elixir and just thinking about how in Elixir, the processes are kind of self-contained. But they're also lightweight. That was just very different way of thinking about it. I was sort of blown away by the whole idea of just how elegant of a solution and foundation that was.


[00:20:46] JE: Do you remember the first real world application where you got to use some the concurrency model in Elixir to do something interesting?


[00:20:56] ED: So, I did not get too involved in Elixir at that level. That was around the time where you started to transition to a director position, and sort of had to give a coding for the most part. But yeah. So, I did have a client project where we were doing Elixir before I transitioned to the director role, but it was mostly a crud. There was some gen server stuff going on, but nothing to the extent that where you could really seal all this wonderful OTPness stuff happening.


[00:21:32] SM: You mentioned, at that point, you picked up Elixir, Elixir has been introduced to the company. We are talking about, you're probably about a year into your current job, and now you're talking about shifting over to this new role. Were there other changes or challenges that you were sort of going through at that time? Or were there things that you were doing specifically to prepare yourself for this transition? I'm also curious, did DockYard do any kind of support internally for your transition to director of engineering, just like for a lot of the folks out there who are listening, who are trying to do that are get company support around moving laterally or upwards and their career trajectory. I'm just curious how that was going.


[00:22:13] ED: Yeah. So, in terms of support, I did have support from my manager, Jon Lax, he was – I think at the time, he may have held the title of COO. He's our current CEO now. I mean, there was Brian also. Brian continued to kind of run behind the scenes and did a lot of networking. He was the one to really sort of continue to step the direction from a technical standpoint for DockYard.


But as far as in my director role, getting the support, I sort of – it was kind of interesting how it happened, because it was loosely defined, like what my responsibilities were, were pretty much not really written down on paper at all. So, it’s not like I sat down with Brian, when he offered me the position, and I was like, “Show me the job description. What are my expectations?” I had one directive, which was to lead the engineering department and that was pretty much it. So, I kind of had to figure out what that meant, what the company needed, and make adjustments from there and there was a lot of learnings along the way.


But I think if I were to sort of give advice to anyone on this subject, I'd say, if you're not able to build a strong support system, because perhaps your company is smaller, or the people who you're surrounded with maybe also leaders, but maybe not in the same sort of tech space that you are, then find other people to build your network around. Follow people on Twitter, engineering leaders out there. So, I follow Camille Fournier. I follow Lara Hogan. For example, when I see their resources that they would share out there, do a lot of reading. Reading through management books and leadership books, like that's always helpful as well. Otherwise, DockYard also did give us a conference budget. So, I could use that for training purposes. I sort of had to start shifting what conferences I wanted to attend, like less touch focus perhaps, and then more leadership workshops or conferences.


[00:24:28] JE: Were there any resources that had an outsized influence on you at this time that you think has been particularly transformative for you?


[00:24:36] ED: I really liked Camille Fournier’s book on – I think it's called The Manager's Path, because it's not just a book about being a manager, it's about a book on how to be an effective engineering manager. But it goes beyond that. It paints a picture of how you might progress from being a tech lead, to manager of a small team, to manager of multiple teams, to higher ups and then into some execs roles. I thought that that resonated better with me than books that were entirely focused on management, but maybe in different industries.


[00:25:17] SM: Yeah, that's a good one. It's an O'Reilly book. I actually read like the first chapter a few days ago and I was kind of blown away. I'm not a textbook person, usually. So, I was like, hooked by like the first intro. I wasn't expecting that to happen. So, that's cool. This is a book that's come up a lot, I think, when we talk about this subject, so that's nice. Was there any particular day where you were like, “Okay, I'm officially in this position.” What was that day like? Or did it sort of seamlessly happen?


[00:25:51] ED: Honestly, if I were to think back, I did continue to code. I was still on client projects for some time for the first several months of me going into this business. So, it wasn't like a clean move to the director position. It was more of, “Hey, you're going to be in this role. You're going to be doing more business development support, supporting your team, running department, or leading department activities and whatnot. But then you also get to be continuing to basically code on projects.” 


It was challenging. It was definitely something that one point, I was like, “Yeah, this doesn't make sense anymore. I got to focus on being an effective leader for the team and not trying to contribute code. This isn't where the team would get the most value anyway.” So, I had to kind of shift the mindset of, this isn't about being an individual contributor anymore. It's about scaling your team. Yeah, essentially, you sort of have to be okay, giving up coding. I remember that was a little bit tough in the beginning, just to not code anymore on a day to day basis.


[00:27:03] SM: I think Eric has mentioned this before, about there's this concept of letting go, I think – I don't want to speak for him. But he also recently went through like going from individually contributing to engineering manager in the last year. He's definitely spoken to, I think on the show a few times about like this having to let go of the code a little, and that process, that emotional upheaval, that that maybe might bring about. But speaking of what's going on with code, any fun new things happening at DockYard that you can spill here?


[00:27:35] ED: No secrets that I can think about. I mean –


[00:27:41] SM: The next LiveView?


[00:27:44] ED: Well, so the thing is, Chris does a lot of work, obviously, on Phoenix. Well, he's just sort of embedded here with DockYard live and all, but he keeps the secrets away from even DockYarders. Sometimes we try and get him to give us hints as to what may be coming up next, then, yeah, he'll just keep his mouth shut.


[00:28:07] JE: Wow. One thing that we've talked about a little bit in this conversation is how DockYard is always trying to test out new technologies and see what's going to work well for them in the future. SmartLogic does the same thing. I think any good agency does. I'm curious, we've had a lot of new libraries come out this year, Nx, Axon, Live Book, we're still talking about Lumen. Do any of these things come up or are they coming up in your projects? I mean, especially with Lumen. Should we be looking for new releases soon, something that we can use in production, stop writing JavaScript?


[00:28:40] ED: Yeah, so they haven't come up in client work yet. But there are certainly new libraries, new projects, that the team is experimenting with, on their DockYard Fridays. So, DockYard Fridays are basically days where we don't work on client projects. And it's time where we can do more professional development or internal projects with each other, collaborate with others who are otherwise on different projects, and we don't really see on a weekly basis. Obviously, writing blog posts, preparing for conference talks and whatnot, open source contribution. So, that's where the team really gets to play around with new things that come up with like Nx, et cetera.


[00:29:28] JE: Have DockYard days always been a thing?


[00:29:30] ED: Yeah.


[00:29:31] JE: From the very beginning?


[00:29:33] ED: Yes. So, when I joined, we were already doing those DockYard days, the 20% sort of investment time. But yeah, it was a huge part of the culture at DockYard, just having the DockYard days to kind of step away mentally from client work, take time to sort of think about things that you might want to maybe extract or from what you've learned during the week. 


Maybe you want to do a deeper dive into something. So, it's really refreshing to have those on a regular cadence and clients understand. It's never come up as a problem for us for the most part. So, clients know that we're reserving those Fridays for those activities, and that it allows our engineers to be better at what they do over time, which then benefits them, as clients. 


[00:30:28] SM: Yeah, absolutely. That was something that we were really curious about, like your team balances the time that you spend on these projects, which obviously, you dedicate some amount of time because we get amazing stuff out of DockYard. But we also know that you work on client work. So, that's really cool to know that you've got dedicated time, I know every company does it a little differently. Yeah. So, Justus, you want to talk about the BEAM?


[00:30:50] JE: Yeah, let's talk about the BEAM. I want to know, what is your day to day experience with OTP, the BEAM? Especially what – again, it always comes down to application, right? What are the common applications? Especially with people who are newer to Elixir, what are some frameworks or heuristics maybe that they can use to think about when should I go from just vanilla Elixir to diving down into some of the Elixir or Erlang BEAM internals?


[00:31:20] ED: Yeah, so that's a good question. I'm not sure that I'm the best qualified person to speak in details around that subject. But I can say that I've had lots of conversations around OTP, and the benefits of the BEAM, et cetera, with the team. When you kind of start out building an Elixir app, when you start learning the language, and you start kind of getting into the Phoenix framework, especially if you're kind of just focusing on building crud apps, you don't really think so much about the BEAM, you don't really think about what's happening under the hood, where the processes and OTP. Even OTP is something that I find a lot of Elixir developers may learn at a later stage, when they start out, they may not focus so much on OTP, and supervision strategies, et cetera.


So, when you start to really understand how you have such simple primitives that can really help scale your application in a way that is both performance, but also reliable, that's when you can really embrace all the goodness of the BEAM. Elixir gives you the right plumbing to start distributing your Elixir application. But it's not like if you want to start building distributed systems, it's not like you can just write your application the way that you would, sort of out of the box without really thinking of how to configure OTP, how to configure all the other parts of the Erlang runtime system. It doesn't just automatically happen. You still have to understand that's where you want to start understanding better how the processes operate under the hood, so that you know how to have control of those things and how to better optimize them.


[00:33:29] JE: This is, I think, a recurring theme that a lot of the fancy features in Elixir and Erlang are sophisticated and require a good amount of knowledge and experience to really use correctly in really any architecture. I want to ask you about developing talent, because you manage people and you're hiring folks in the Elixir ecosystem. The number one complaint you will get about this ecosystem is that it's hard to hire for, which means that we have to do a lot of training to get people up from junior levels to more advanced level. So, I'm wondering how do you think about that? How do you train up folks? Do you train up folks? Do you tend to hire people who are already working in Elixir?


[00:34:15] ED: So, we have definitely trained up folks over time. There are a number of Rails engineers on our team who are even, right now, learning Elixir or getting better at Elixir. So, we have a mentorship program that we've developed at DockYard, as well as we find opportunities to get people to pair up so that they can learn from each other. 


So, having a core team of strong elixir engineers, helps when those engineers can then pair up with others who are trying to get there. We've also developed an internal Elixir training program for anyone who wants to start learning the language and get familiarized with that. So, there are book recommendations and there’s a coding exercise that the developer can work on their own. There’s like a group exercise that they can participate in as well and then get code reviews and getting feedback from more experienced engineers, so that you can get feedback on whether they're doing something idiomatic Elixir way.


[00:35:26] JE: So, we talked a little bit about distribution, that being one of the more challenging things to implement in Elixir land. I think, by nature, it's a challenging problem. And so even with the right primitives, it's still a thing that takes a lot of thinking about to get right. Other challenging aspects of the ecosystem are like hot reloading. But I'm curious with the people that you're training up through this program, what are the sticking points? Where do people get stuck at learning Elixir?


[00:35:55] ED: So normally, it was more prominent in the beginning when some of the tooling was missing. So, just like when I was learning Elixir in the beginning as well, what I struggled with was not around starting to think in terms of functional programming, or it wasn't around the different syntax of Elixir. It was more around the fact that I wasn't sure how to deploy an Elixir app, without actually running, let's say, with having mix installed on the machine and running database migrations. I wasn't sure, at the time, how to then log into the box to run these mix ecto create or mix ecto migrate commands. I think this was before distillerie was even in the picture.


So, those are things that I kind of struggled with a little bit to really grasp and documentation that the time was not super abundant around the topic. I mean, generally there are so many improvements that have been made to Elixir over time and to Phoenix over time that has really helped to kind of bridge those gaps and lower the barriers and lower some friction in general for people learning Elixir. So, just more books, more resources available, the tooling has definitely improved. You've got mixed release now and live dashboard and being able to observe your processes in a very elegant way. I think that has really helped.


[00:37:36] SM: I think that leads a little bit into our second kind of piece of our theme, which is magic. A lot of people talk about magic, as magic is just the thing that you don't know yet. And so, it kind of sounds like what you're saying is that once some of this tooling was there, it was just easier for people who were maybe not as experienced to get more familiar with the language and have better tools to use it. So, it was more like utilizing a language than just it magically doing things. But I'm curious what your thoughts are around how much magic is the right amount of magic? And what you've seen with that and Elixir?


[00:38:11] ED: Yeah, so it's funny because they're always thinking about that, just the term magic in general. And to me something that's magic, is you get functionality that just works and you don't really know why it worked but it's also unexpected. And when you have to start doing something a little bit different, you maybe need to customize some behavior, or you need to look under the hood to debug and you start struggling because it's obfuscated, you don't know where to even start looking. That's where the obstructions really get in the way.


When I think about the BEAM, I don't really think of the BEAM as being magical, per se. There's a lot of awesomeness, but not necessarily magic. I just feel like just because something is at a different level at a lower level, then how you might sort of operate on a day to day basis. As a developer, it doesn't mean that it's magic. It's more that you have not yet taken the time to interact with it, understand it, but you would know how to start doing that if you needed to.


So, in fact, I have seen a lot of sort of internals, examples of the BEAM like low level code examples from Luke, because Luke has been working on Lumen and has also continued to maintain the –


[00:39:41] JE: Luke Imhoff?


[00:39:42] ED: Yes. 


[00:39:44] JE: Great guy. We love Luke.


[00:39:46] ED: Yeah, so Luke has created the Elixir plugin for IntelliJ and is continuing to maintain it. So, over time, I've seen plenty of talks and code examples where it's like, “Whoa, this is very low level, very cryptic looking, but it's still not what I would consider magic.” It's just that I haven't spent the time to try and understand it yet. 


So, I would say that's where kind of learning more about the BEAM really piqued my interest. Because I would hear all these terms about, come on the different layers of the BEAM of the Erlang runtime system. At some point, I was like, I got to catch some high-level understanding of what all of this means. So, The BEAM Book, I found was a really terrific resource online to kind of even understand what the BEAM is about, what the ERTS is all about. I thought it provided a really solid example or explanation of all the different layers. And when you start understanding all of that, it's really not magical. Like I said, it's more just amazing stuff happening at that foundation.


[00:41:02] JE: Awesome. Estelle, this has been a really fun episode. I want to give you the remaining time to plug anything you want. Ask the audience anything you want. Shameless self-promotion, where people can find you. The floor is yours.


[00:41:18] ED: All right. So, DockYard has been trying to understand more how companies are using Elixir, and how they go about adopting new technologies. So, our business development team and marketing team have been leading a lot of projects and talking with organizations, product leaders, tech leaders out there to kind of better understand their perspectives and challenges, constraints, that those organizations may face. And we see that a lot through business development conversations as well, where may be speaking with prospective clients who share a little bit about their thinking around Elixir or maybe resistance to adopting Elixir.


So, what comes up a lot is also this whole hiring hurdle, like maybe they see the value of Elixir, but they don't know how to hire for Elixir, or they don't want to retrain their team. So, that theme does come up a lot and we're trying to gather more data around it and we are looking to eventually share those findings with the community. So, if you're interested in learning more, please do follow DockYard on Twitter and we'll definitely post more stuff out there when the time comes.


[00:42:37] JE: Awesome. Thank you so much.


Hey, thank you for joining us on Elixir Wizards. Before we close out the show, we'd like to share another quick mini feature interview with you. It's a brief segment where we showcase somebody from the community that's working at a company using Elixir in production and we'll learn about how they're using Elixir. Hope you enjoy it.


[00:43:00] AH: Hello, and welcome to the Mini Feature Segment of Elixir Wizards. My name is Alex Housand, and today we're speaking with Tyler Clemens, a Senior Software Engineer at Jackpocket. Welcome to the podcast.


[00:43:11] TC: Hi, thanks. Happy to be here.


[00:43:13] AH: We're happy to have you. So, Tyler, how did you find yourself a software engineer? What led you here?


[00:43:19] TC: Yeah, so I probably have more of a traditional kind of went through school. I originally went to school for networking, got in, got my associates in networking, got a job in that, started working with that, and it was just kind of really boring to me. A lot of sitting around and looking at logs, setting stuff up. Anyways, I got frustrated with software not working well or having bugs and that led me down the programming path and I went back to school and got my Bachelor's in Computer Information Systems.


[00:43:49] AH: That's awesome. What was the first language that you programmed in?


[00:43:54] TC: The first one I programmed in, my first job in programming was in C#, so dotnet. I did a lot of C and C++ as well, converting stuff over.


[00:44:03] AH: Nice. That was also my first job, was in C#. So, how much better do you like Elixir than C#? Not hating on C# too much, but opening the door.


[00:44:16] TC: Yeah. I've heard it's gotten better since. I've heard that C# or F# as well has a functional thing to it. But I love Elixir. I've been working with Elixir. I have my 2017 Elixir Conf shirt on. But I've been working with Elixir for several years now and I love it. I bounced around back to Ruby, which I think a lot of Elixir developers do or a lot of companies are doing. But yeah, I've decided years ago it's definitely my career trajectory to keep working with Elixir.


[00:44:40] AH: How did you find Elixir? I mean, it's relatively small still, I would say more obscure than you know a C#. How did you find it?


[00:44:48] TC: Yeah, that's actually kind of interesting. I had a friend that went to San Diego Ruby comp. I forget when that was years ago and there was actually a functional track during that conference that talked a lot about functional languages, and Elixir was kind of one of them that came up. So, he kind of got into it and played with it. And that kind of, by osmosis, kind of got pushed on to me and he was always talking about it. So, I started exploring it and the rest is kind of history. I just started digging into it and trying to find a way to work with it professionally. 


[00:45:19] AH: Which you're doing now at Jackpocket. Could you give us a brief elevator pitch for what Jackpocket does?


[00:45:25] TC: Yeah, so I just actually started working at Jackpocket. They're basically the first and I think only licensed app in the United States to offer people players, like an easy way to order official lottery tickets. So, they're basically kind of, their big mission is to make it convenient, fun, but also still responsible to play the lottery. So, instead of walking into a store and buying a lottery ticket, you can do it right through their mobile app.


[00:45:55] AH: Fascinating. I had no idea that anything like that ever existed. I've also however, only bought lottery tickets once in my life. So, I can't say I'm probably the target customer. So, how is Jackpocket using Elixir? Is it your primary working language, side projects, anything like that?


[00:46:10] TC: Yeah, so Jackpocket is, I think, taking a good approach and kind of using the right tools for the right job and they're using a mixture of languages. They're doing Java and Kotlin, Rust, Elixir, Ruby. They're kind of all over the place as far as what they're using. As far as Elixir, we're actually doing a lot of kind of back-end OTP processes, which got me excited about it. It's not necessarily just like, for lack of better words, like a standard website you're building. So, we're doing a lot of background processing, dealing with image processing, scanning the tickets and matching them up.


[00:46:46] AH: That's really cool. Truly like a jack of all trades going on. Right? I mean, you threw out Kotlin.


[00:46:52] TC: Yep.


[00:46:53] AH: Everything under the sun. Do you think that there are some kind of inherent perks and on the flip side of that, challenges to being an Elixir engineer, whether that comes to hiring other engineers or being hired yourself?


[00:47:09] TC: Yeah. So recently, going through kind of like the interview process, I was surprised how many companies are actually out there using Elixir and I think that's growing every day. It is a little bit of a challenge to find them. You kind of have to find the right people that are working with these companies or hiring for these companies that are doing Elixir. So, that's definitely I guess, both a challenge and a perk, right? It's growing. But also, it's still kind of hard to find. One of the things as a software engineer is the whole, picking the right tool for the job is a big thing. I think Elixir is starting to be realized as a good tool for several jobs out there. So, its growth has definitely taken off.


[00:47:47] AH: I would 100% agree with you. One of the things that I really came to love about Elixir when I first started working in it was kind of the vast wealth of resources, particularly within the community. I feel like the Elixir community does a really awesome job of documentation that's thorough and clear, and not obtuse, one might say. What are some resources that you turn to when you maybe need some help?


[00:48:14] TC: Yeah, so Elixir Slack, amazing. Amazing community in there. I mean, you're talking with the guys that are building the stuff. So, there's not I think, a better resource than that. That's awesome. Books, everything from Elixir in Action and there's a ton of kind of resources are out there. Another thing is Elixir school. It's kind of has a smaller subset of things on it, but it's growing and has some really good documentation on there. And to your point, like the standard documentation is actually amazing. Just go in there and read. So, I've definitely taken advantage of that.


[00:48:45] AH: Yeah, absolutely. I think that everybody here at SmartLogic definitely enjoys the wealth of resources that the Elixir community makes available to us. It might be kind of a challenge, I guess, going backwards a bit. Speaking about how, the community is growing, but it's still rather small, how do you onboard folks in Elixir? What is a good starting point, do you think?


[00:49:06] TC: Yeah, so what I've found over the years is a lot of Ruby engineers, I think we can all kind of agree that a lot of Ruby engineers are coming over to Elixir/ I'm seeing it at the conferences. A lot of people are either have worked with Ruby and Rails and are coming to Elixir, or maybe they're porting something over, or they're taking advantage of something that Elixir does better. I think the syntax or whatnot, and how it's more familiar to a Ruby developer. I've been part of kind of training Ruby developers and bringing them over to Elixir and that has worked really well. And then also, just trying to find people that you can teach as long as you're not on a rush to get somebody right now on the ground running, that's a good avenue, I feel like.


[00:49:45] AH: Absolutely. You've mentioned you've been training people. What has been one of the bigger challenges of training others?


[00:49:52] TC: With Elixir, it's got some quirks to it that I feel like – I’ve always said that Elixir kind of has a steep learning curve in the sense of there's a lot of stuff going on at first. There are these processes and pattern matching and whatnot. But once you kind of get over that hump, I feel like it's easy to understand things and you can open things up. Whereas object-oriented programming, something like Ruby, I feel like has a little bit easier to get into, but can be harder to master in my opinion. 


So, kind of the bumps, pattern matching for sure is weird to look at and dealing with processes that are kind of this weird thing that you don't deal with a lot. But those are two things for sure that you have to explain and little walk through.


[00:50:27] AH: One of my favorite things when I was learning Elixir was pattern matching. I thought, “Man, that's cool. I like that.”


[00:50:34] TC: It's awesome.


[00:50:34] AH: To end on a fun question, if you were not a software engineer, what would you be?


[00:50:41] TC: I love photography and that's kind of like my other passion. I always say programming is my first passion, photography is my second. So, it would probably be something with that. I think I'm fortunate to be in a career that I love waking up and going to work every day and being an engineer, and I feel like I could get something similar with photography.


[00:50:57] AH: Yeah, you absolutely could. Start that side hustle, as they say. Make an Elixir app that displays your photography. Who knows? The world is your oyster, Tyler.


Well, thank you so much, Tyler, for joining us today. It was great talking to you. And to all of our listeners, if you or your company are using Elixir in an interesting way and want to come on the show for a mini feature, we would love to have you. Reach out to us at podcast@smartlogic.io with your name, your company's name and how you're using Elixir.


[00:51:30] JE: That's it for this episode of Elixir Wizards. Thank you again to our guest, Estelle DeBlois for joining us today. Elixir Wizards is a SmartLogic production. Today's hosts include, myself, Justus Eapen, and my co-host, Sundi Myint. Our producer is Eric Ostrich and we miss him dearly and our executive producer is Rose Burt. We get production and promotion systems from Michelle McFadden and Ashley Stotts.


Here at SmartLogic, we build custom web and mobile software. We're always looking to take on new projects. We work in Elixir, Rails, React, Kubernetes and React Native. If you need a piece of custom software built, hit us up. Don't forget to like, subscribe, and leave a review. Follow @smartlogic on Twitter for news and episode announcements. You can also find us on the Elixir Wizards Discord. Just head on over to the Podcast page to find the link. And don't forget to join us again next week for more on BEAM magic. Mic drop.


[END]
        © 2021 Elixir Wizards