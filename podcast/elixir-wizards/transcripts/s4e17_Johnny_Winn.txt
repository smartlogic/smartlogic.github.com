EW S4E17                Transcript
EPISODE S4E17


[00:00:03] JE: Welcome to Elixir Wizards, a podcast brought to you by SmartLogic, a custom web and mobile development shop based in Baltimore, Maryland. My name is Justus Eapen and I’ll be your host today. I’m joined by my co-host, Eric Oestrich.


This season, we’re talking about system and application architecture, so we’re joined by a very special guest, none-other than the host of Elixir Fountain, Johnny Winn. How are you, Johnny?


[00:00:29] JW: Good. How’s everybody doing today?


[00:00:31] JE: I’m doing lovely. How are you, Eric?


[00:00:32] EO: Great.


[00:00:35] JW: Actually, I take that back. I should say, greetings everyone. Because that’s how I go into the show.


[00:00:40] JE: Oh, that’s nice. Yeah, bring it here. We’re glad to have you on the show. We love having fellow podcasters on the show. We love having fellow podcasters on the show. We wanted to start off with an interesting personal question, because we like to stalk all of our guests — and our research on you before the show. 


We found that Code Sync calls you a ‘Renaissance man.’ Now, I know what that is, but maybe not everyone in the audience does. Can you tell us what a Renaissance man is and what makes you one of these?


[00:01:12] JW: I like to say, it’s like Jack-of-all-trades, master of none. I’ve just done a lot of things. I came from Jacksonville, Florida and I started out — I didn’t take the traditional path into code. I was in the restaurant business, strictly into gourmet restaurants. I actually worked my way up to intermed chef at one point. My wife and kids like to joke that I’ve done pretty much every job out there. Did computer, drafting and design, signal-crossing for a while. Those are the two big ones before I got into software engineering.


I also ran for city councilor back in Florida, played semi-pro rugby. Pretty much ran the gamut of just things you can do. My wife always gives me a hard time too, because she’s like — I’m like, “Ooh, I want to do that when I grow up.” She’s like, “Uh, you’ve done all the things. You don’t have to do all the things.”


[00:02:01] JE: I love this, because I’m also, a fashionable word for these days is a flâneur. Do you know this word?


[00:02:08] JW: No.


[00:02:09] JE: Flaneur is a nice way of calling someone a dilettante. Flâneur is someone who wanders around aimlessly, but in an enjoyable way.


[00:02:18] EO: Google says, an idler or lounger.


[00:02:22] JW: Well, a friend of mine, actually back in high school — and I’m just going to preface this with yes, I have actually been diagnosed with ADHD. I have a very small attention span on a lot of things. But I also get very hyper-focused on things. There’s a whole sort of world of good and bad that goes with that. A friend of mine in high school once told me that he had read this article about what is called the ‘cat lifestyle.’ When you think about a cat, they tend to play with something until they’re bored and then they go on and find something else to do.


That translates to people. You do something until you’re bored, and then you go do something else. The idea for me, I came from a background where both of my parents went to college, got jobs, worked in those jobs for 30 years, retired, and that was the thing. My wife had the same type of background.


We got together, it was really weird that I worked somewhere for a couple years and then I would go do something else. Then I would work somewhere for a couple — by that time, I was already in software engineering. That’s pretty much what I’ve done is I was working in culinary, until I —


[00:03:31] JE: Yeah. I wanted to dive into the culinary thing a little bit, because we’ve had a few people on the show with culinary interests. I’m curious, I have a feeling that there is some expertise in our audience, but not a ton. I’m wondering if you had to tell people like, what are one or two dishes that you think everybody should know how to make and maybe perfect? If you have any tips for everybody how to make them really well.


[00:04:00] JW: Yeah, it’s funny as I can’t remember what — oh, I think it was Code BEAM San Francisco this year, or [inaudible 00:04:05] San Francisco. I had actually given a lightning talk on how to cook the perfect steak. And as long as you all don’t tell anybody, I will tell you all how to cook the perfect steak.


[00:04:17] JE: We won’t tell anyone.


[00:04:19] JW: Okay. Just keep it that way. What I do is I go to the butcher’s shop and I get filet mignon or whatever. Then when I bring it home, about an hour before I’m ready to grill it, I coat it in kosher salt. I mean, really coat it in kosher salt.


[00:04:35] JE: Meaning, coarse grain, like really coarse grain salt.


[00:04:38] JW: Yeah. Right, exactly. Yeah. Leave it on a tray to just basically sit out for about an hour. What they’ll see is you’ll see that the salt almost disappears a little bit, because what ends up happening is the salt — and people are like, “Well, isn’t that going to take all the moisture out?” Well, what happens is when you let it sit for an hour, it actually sucks the juices out, but then it brings them back in. But takes the salt with them. So you literally season the entire steak all the way through.


Then right before I’m going to grill it, I wash all the kosher salt off of that, pat them dry, so that they’re dry again. Then I start the grilling process. Obviously, that’s going to depend on how you like your steaks cooked, temperature-wise. I do the two minutes about roughly and then quarter turn, two minutes about roughly, flip, two minutes about roughly.


The other little secret is, and I use grass-fed, the Kerrygold butter. I melt butter and some granulated garlic in it and then I baste the steaks at the grill. It melts in your mouth like butter.


[00:05:44] JE: You’re speaking my language, man.


[00:05:46] JW: Oh, it’s so good.


[00:05:47] JE: If you’re going to get grass-fed steak from a butcher, it’s always dry-aged, like 21 days or something, I’m sure, right?


[00:05:55] JW: Oh, yeah. I mean, but the thing about this technique is you could actually use any cut of steak. The salt will tenderize the meat somewhat too. Then when you baste it in that butter, and really in gourmet restaurants, what they do is they’ll grill it and they’ll finish it with a pat of butter and stick it in any type of oven. And just to melt the butter onto the steak. But when you baste it and you get it all a little bit at a time. Definitely worth it. Just don’t tell anybody, because everybody would be cooking my steaks here soon.


[00:06:24] JE: Oh, Johnny. You’re speaking my language. We could spend this whole show talking about steaks, I think.


[00:06:29] JW: What’s funny about it though is this steak that I spend so much time cooking and preparing, my favorite side-dish for it is Kraft Macaroni and Cheese Deluxe.


[00:06:40] JE: Oh, you don’t even go to Annie’s?


[00:06:41] JW: No, no. I go past — do you know that cheese sauce that really shouldn’t be in existence? Yeah, put that on. Oh, man.


[00:06:49] EO: That’s the Velveeta-type cheese-whiz type thing, right?


[00:06:53] JE: Velveeta is so underrated.


[00:06:55] JW: It is. It’s so good.


[00:06:57] JE: I think American cheese is underrated too. People have to put fancy cheese on a cheeseburger, I’m like, “You don’t know how to make burgers, man.” Because the best burgers are just American cheese.


[00:07:07] JW: Well and too, when I make burgers, so the trick to making a good burger is —


[00:07:11] JE: Don’t give this one away. I know it already, but don’t give it away. No, I’m just kidding. Tell the audience.


[00:07:15] JW: You got to have fresh ground beef. You can’t have the vacuum-sealed. My wife will be like, “Oh, we got ground beef.” I’m like, “I can't have burgers with that. It’s vacuum-sealed.” Because the meat kind of mushes. So you want it as fresh you can and you don’t want to touch it very much. You just want to make the patty —


[00:07:35] JE: With lots of fat.


[00:07:37] JW: Then put a dimple, like with your thumb, just put a little dimple in it and stick in the freezer for a bit. Then bring it out when you —


[00:07:45] JE: You’re talking about ‘on-the-grill’ burgers.


[00:07:48] JW: Well, yeah, yeah.


[00:07:49] JE: Oh, okay. You don’t just mash burgers.


[00:07:52] JW: Like the restaurant? The restaurant burgers?


[00:07:55] JE: Smash burgers are when you make a ball out of the meat and when you stick it on a hot griddle and you smash it down. That’s how you get that Shake Shack, like crispy —


[00:08:08] JW: Definitely. I do love me some Shake Shack.


[00:08:10] JE: Dude. Yeah. We should do a cooking show. We need to get Sundi Myint on and we could do a livestream one day where we all just do our favorite recipes.


[00:08:21] JW: It’s funny as I thought about that, so I did the Elixir Fountain for three years. I think it was three or four years or something.


[00:08:27] JE: We can talk about Elixir Fountain. Yeah, let’s get into there.


[00:08:29] JW: Well, no. I’m only going to briefly mention it, because part of the thing was, is, I felt like I was having similar conversations over and over again. I’m like, and I liked having the conversations, but I hated dealing with the routine of it. Having to get up and have that conversation, because there’s a lot of times, “Hey, I like talking to y’all. Let’s talk about food.” There’s so much more to life than coding. I feel like sometimes, it was — it almost became a job, rather than just fun.


[00:08:58] JE: But there is not much more to life than food.


[00:09:02] JW: This is true. There’s not enough food to get by.


[00:09:05] JE: Sp, steak, I really like this. First of all, quality beef and steak or burgers is a game-changer. Go to a butcher, like find your local butcher, people. Grass-fed beef, dry-aged beef. If you’re not buying grass-fed beef exclusively, I don’t know what to tell you.


[00:09:23] JW: Maybe, that’s understandable if you’re not, because — I mean, there is — they can get pricey. When you want to cook to impress — okay, here’s a funny story. My wife knew she was going to marry me when I cooked a dish for her. I had her over for dinner. This was maybe our second or third date. I cooked a chicken roulade with — basically, you pound out the chicken and then you roll it up into a roulade. I put swiss cheese and ham and some spinach in there, rolled it up. Then what you do is you roll it in plastic wrap, so that it — and stick it in the freezer for a bit. Bring it out and then you roll it with some flour and you pan fry it in butter and then finish it in the oven. She was like, “Right then, I knew. I knew I was going to marry you.” See? Being able to cook and at least have a couple specialty dishes is very important.


[00:10:20] JE: These days, if you had just knock someone’s socks off. Like, if the president or something was coming over to your house for dinner. Maybe not the president. Someone that you really highly admire and respect is coming over for dinner, what would you make them?


[00:10:34] JW: I’m trying to think, because these days I’m really into smoking meats. I love smoking pork shoulder.


[00:10:41] JE: What do you use to smoke?


[00:10:43] JW: Athol, the —


[00:10:45] JE: Are you using a smoker, or a web burner or something like that?


[00:10:48] JW: No. I have an actual smoker, but I used to have an electric smoker. Honestly, I like the electric smoker better than the — this is I think, maybe, somewhat laziness. I know that everybody that smokes meat out there is going to tell me I’m an awful person. But controlling the temperature is really hard when you’re having to completely burn the material. 


With the electric smoker, you just put wood chips in there and you set it to the temperature that you want and then it will slowly smoke the meat and everything’s great. But the trick to a good smoked pork shoulder and really anything that you’re cooking long-term is the brine that you use.


[00:11:27] JE: Of course. Yeah.


[00:11:28] JW: I have a super-secret brine.


[00:11:30] JE: Super-secret brine. All right. Can you tell us your super-secret brine? We won’t tell anyone.


[00:11:34] EO: Salt and water.


[00:11:36] JW: Well, no. It’s not just the salt and the water and the sugar. I use coconut sugar. I don’t use granulated sugar in my brine.


[00:11:46] JE: Why? What’s that do for you?


[00:11:47] JW: It gives it a very subtle sweet flavor. What I do is I’ll put what, half a cup of coconut sugar, a third of a cup of kosher salt. I don’t know if you’re noticing a theme here. I use a lot of kosher salt.


[00:12:01] JE: Yes. It’s really the only kind of salt, isn’t it?


[00:12:04] JW: Yeah, exactly. What’s funny is, so I just had all the kids in the house —


[00:12:08] JE: Finish the brine recipe first. You’re about to give me —


[00:12:12] JW: Yeah. I feel like this episode needs to come with a recipes list.


[00:12:15] JE: It will. It will.


[00:12:17] EO: We can probably write one or two of this up, I guess. We’ll include it in the show notes.


[00:12:23] JW: Well, and then so what I do is I take those two. That’s my base. Then I put smoked paprika, a couple tablespoons of that, a couple tablespoons of chili powder, some granulated garlic, peppercorns — obviously. Some peppercorns, bay leaves, and cinnamon. Just a teaspoon of cinnamon. Not too much, because it’ll be overpowering. Then four cups of hot water in that and two cups of ice to cool it down. Then you let it sit overnight in that.


For any type of chicken or pork recipe, that is like, “Oh, it’s perfect.” Yeah, you let it sit overnight, then when you take it out, you rinse it all off to get all the excess off. I will put a dry rub that’s essentially the same seasonings on it. And then yeah, smoke that for about 8 to 12 hours, depending on how much time you have and it’ll fall apart. Oh, and I have those claw things. I get to do the whole Wolverine thing when I’m breaking off the meat. It’s kinda cool.


[00:13:23] JE: I don’t know about that.


[00:13:23] JW: You don’t have these?


[00:13:24] JE: No.


[00:13:25] EO: How do you not have these?


[00:13:26] JW: Yeah, they’re like claws. You hold them in your hand like — in your fist and then you shred and you feel like Wolverine. Yeah. I’ll send you a —


[00:13:34] JE: Wow. It sounds dangerous. I love it. I love it. I’m a person who likes to cook, myself. I recently, I did my first brining recently for some jerk chicken that I made for my brother and it was just — it was stellar. You smoke jerk chicken too?


[00:13:50] JW: I don’t smoke jerk chicken, but I do smoke chickens. I’ll do —


[00:13:54] JE: A whole chicken?


[00:13:56] JW: Yeah. Well, not necessarily the whole chicken. What I do is I go to the butcher and he’ll cut me up, because they sell the whole chickens and they’ll cut it up for you and that multi-pieces and fried chicken. I’m really good at fried chicken.


[00:14:07] JE: Yeah. Fried chicken is — I feel like the staples for anyone who wants to speak ‘good at meat’ are steak, obviously, burgers, fried chicken, and some pork dish. I’ve been working on my bacon, my just homemade bacon.


[00:14:21] JW: Nice.


[00:14:22] JE: I don’t know. I don’t like a lot of pork. Bacon is the only pork that I care for.


[00:14:26] JW: I’ve always said, if you told me I could only pick one animal to eat for the rest of my life, it would be pig.


[00:14:32] JE: Yeah. We talked about — Okay, so full disclosure to the audience, this is our second time recording this, because Justus accidentally deleted the master. We talked about this last time, and you said pork was the only animal that you would eat if you could only eat one animal for the rest of your life. Now you have to justify this insane idea. Because beef is just better.


[00:14:53] JW: Beef is not better. That is not —


[00:14:56] EO: I think I’m with the pig as well.


[00:14:58] JW: Think about how many different flavors. You have ham, you have pork chops, you have pork shoulder.


[00:15:04] JE: The two best forms of meat are steak and burgers. You don’t get either of those from a pig. Then you told me about bacon burgers, or you made some burgers out of pork. Is that right?


[00:15:17] JW: Well, you can do that. Yeah. I mean, you can make a burger out of anything. It’s really just grinding up meat. You can take and grind up the meat —


[00:15:25] JE: Yeah, but a turkey burger is objectively worse than a real burger.


[00:15:29] JW: Yeah. I see people are eating jerky bacon. More power to you. If you want to eat jerky bacon, that’s not bacon.


[00:15:35] JE: No. Actually, less power to you. I’m pretty sure it’s not as much protein.


[00:15:41] JW: There is that. I mean, actually this is funny as I came upstairs from working. I work in the basement, and so I came upstairs — “Do I smell bacon.” My wife actually, she’s like, “Do you want me to cook you some bacon?” Because they were making BLTs for lunch. I was like, “Oh, yeah.” I’m thinking, I’m getting two pieces of bacon. No. My son brought me down six pieces of bacon and I was like, “Oh, now we’re talking.” 


[00:16:06] JE: That’s the only way to make a BLT. Six pieces, at least.


[00:16:09] JW: Oh, I don’t have — All that lettuce and tomato stuff? No. I’m not getting involved in all that. I just want the bacon.


[00:16:15] JE: What is your favorite sandwich? Are we allowed to do this, Eric?


[00:16:20] EO: I think, given that Johnny has already expressed interest in not sticking to the script, let’s — we’re off the rails. We’ll just keep there.


[00:16:29] JE: Yeah, so favorite kind of sandwich. Let’s go.


[00:16:33] JW: That’s a tough call, because so one of my things, obviously I like meat. I do tend to fall towards the club, because you do get all the meat. The club sandwich. You’re going to go sandwich. The Cuban down in Florida, where it’s the ham, the smoked pork, pickles and mustard. I’ll tell you one of my biggest pet peeves when I got to a restaurant and they have something on the menu called a Cuban, but then they try to fancy it up and put stuff on it, I’m like, “No, no, no. That’s not it. That’s the best sandwich.”


[00:17:05] JE: I think one of the major culinary sins that I see taking place all over the country right now is this move toward trying to fancify sandwiches, like burgers. The straightforward smash burger with American cheese. The best cheeseburger I’ve ever had is at this bar. It's a secret bar in Boston called Drink. It's literally called Drink. You have to know where it is to find it. They have a secret menu, where they have 25 burgers that they sell every night. If you go in there, if you can find this place and you go in and get one of these burgers, they get the wagyu beef flown in from Colorado every day and it's just two smash patties, American cheese, and fresh lettuce. Just the basics, and a really good bun. That's the best burger I’ve ever had.


[00:17:52] EO: Sweet.


[00:17:53] JW: Actually, it's funny. It's like code.


[00:17:58] JE: It is like code. Yup.


[00:18:00] JW: Honestly, the biggest problem I see in development is the problem of being clever. It's the same and it seems like every industry. There used to be this place in Jacksonville called Jimmy's Fried Chicken. You went there, there was fried chicken on the menu and you had creamed peas, mashed potatoes and gravy, and biscuits. That's it. There was no flare.


[00:18:30] JE: Oh, and fried chicken, right?


[00:18:32] JW: Yeah. It was the best fried chicken that you’d —  It was Jimmy's Buttermilk Fried Chicken. That's it. You went there and you got that. I love being in Colorado. I do. I really do. But in a restaurant and they'll be like, “Oh, it's our twist, or our take.” No, I don't want your take. I want the real thing.


[00:18:50] JE: You know what's even worse, this other fad that's even worse? Fusion. Confusion. Stop. It's not Fusion, it's confusion, okay. Get it out of here. I don't need Thai burgers. I don't need Italian tacos.


[00:19:11] EO: One thing I saw recently that's maybe a take on fusion that you would be interested in. There's an udon shop in Tokyo that could no longer serve udon, because of lockdowns. They did udon burgers instead. It was everything, but the soup. The buns were udon noodles that were like — it was actually like —  no one can see this but, they’re grimacing. It actually looked pretty good.


[00:19:39] JE: I’m not an udon fan to begin with. Yeah, dude. Like, what?


[00:19:44] JW: I do think that there's something. Maybe it is just a showing off sort of thing, but kind of bringing it back to code, one of my big pet peeves is being clever. I’m just as guilty of it sometimes. A lot of times, it's like, I’ll write code and I’m like, “Oh. Wow, man. That's really clever.” All right, let me go rewrite that so it's not as clever, because in six months, I have no idea what I just wrote.


I mean, I think a lot of times, cleverness arises out of — and I’ve talked to Dave Thomas about this. I think, one of the biggest things that got wrong is the misinterpretation of dry. I’ve seen code where people dried-up the code, but they make it so that it's damn near unusable. Because you don't even know what it's supposed to do. And that’s missing the whole point of dry. Dry has nothing to do with the code itself. It has to do with business logic. You want to dry up your business logic, so that the idea is that if you have a piece of code that is supposed to be processing a certain line of business logic, that isn't replicated across the system. Because then you're going to run into issues when that logic needs to change.


Whereas, if you're drawing up code, you get it to a point where yes, it could generically work for everything, but nobody understands how it's supposed to work. I think that that's one of those traps that people fall into with dry code though. Yeah, they use that opportunity to be clever about things. What happens is that six months later, they have no idea what that was supposed to do, or why they did it that way. And they lose it. I’ve caught myself doing it just as bad, so it's not like, I’m like, “Oh, everybody's doing this, but me.” No, I do it too. I’ve been doing this for 20 years now and I try to catch it now earlier on in the process.


[00:21:38] JE: I feel there's a trend, especially in front-end programming toward, I don't know what the word would be. ‘Componentizing’ everything? Do you see this where, suddenly, where you would have views that might have similar looking things. Now it's like, you just have folders of components. And you have to search through folders of components. And find the component that's being used in a given place, as opposed to just writing the thing for the view? It's the same thing, where people — it's preemptive, not repeating yourself, but then what ends up happening is you get this crazy architecture that requires a lot of file switching to understand what's going on?


[00:22:16] JW: Yeah. I do. I think that it's like anything else. I think you can take anything to an extreme. Obviously for years, we've had reusable components. The nice thing about functional programming in general is that you can tie everything in together, because you have functions that as long as you pass the same thing in and expect the same value out, you can. — But I’ve seen that even taken to an extreme where you have to completely understand what's in the function to know what to even pass into the function. It's like, okay.


But at the same time, I look at things like, going back to the early days of Phoenix, Phoenix started out as just a router. I talked to Chris. I have I think the second commit or something in Phoenix, because I think I put the resources in or something, if I remember correctly. Before it became what it is, what I would have liked is, I would have liked to then ‘componentized,’ where you had a router, you had a view engine. Everything else should just be a pure Elixir application. That's really all you need, something to deal with the views, but more piecemeal. I was never a big fan of the generators from the get-go.


Actually, I remember it came up, this is probably a few years ago with the generators, you'd see code, like, I do code reviews for people, or help people and they're like, “This looks just like Rails.” I said, “Well, that's because you're sticking all the stuff in the controller. Really in a good Rails project, you shouldn't be sticking all the stuff in the controller anyway.” They're like, “Well, that's how the docs say to do it.” Because originally, yeah, you would generate it and it would have repo calls in your controller. I’m like, “Okay. Well, I don't know.” I go back, but it's — just because somebody says something, doesn't mean that's the way you should do it. If you know better, if you know that that shouldn't go there, you shouldn't put it there. It doesn't matter what something says.


Extracting that out to where you have — the controllers really should be very thin. They should be routing information between your domain models, which I want to be very specific about that. Because that term ‘model’ has been butchered to death. The main model, I think Phoenix calls them ‘context’ now, or something like that. The idea is that you're routing information between that and to a view.


A lot of times when I use Phoenix, definitely for my own projects and things like that, there is nothing in my Phoenix app other than the routes to controllers that call into another application and whatever views have to be displayed. I treat Phoenix very much as my presentation layer for my applications. There is no business logic tied up in there. Like I said, I’ve been doing this for 20 years and I go back to the old structures of your data access layer, your business logic layer, and your presentation layer. None shall talk to each other, or none shall trespass on each other's turf, I should say.


Because when you design things like that, it's funny is, when I look back the reason I started doing that was under the premise of, “Well, if I ever wanted to switch out my presentation layer, I could switch out my presentation layer and put in a new presentation layer in front of” — that never happens. That's just not. You don't do that. It's not like you're going to all of a sudden — you could go to an API, maybe, but I mean, realistically, once projects start getting ahead of steam, unless you do a full rewrite, you're probably going to keep that same structure.


The nice thing is when you break the application up into logical units like that. When you do that rewrite, you can look at individual pieces and see what needs modifying. Maybe you don't need to modify the presentation layer at all. You just need to change business logic. Maybe the data access layer, none of your data structures are going to change, and so you keep the data access layer intact. And you change the business logic. Maybe the presentations are similar.


But I think what ends up happening and this doesn't mean you have to do it in an umbrella project either. I know that comes up a lot well. Should you use an umbrella project, or shouldn't you use an umbrella project? Honestly, I’ve done both and it really is up to you.


[00:26:37] JE: Umbrellas came up recently on the show. They've come up a lot on the show. Most of the time when it comes up, it's not positive. Is that right, Eric?


[00:26:49] EO: Yeah. I’ve seen three examples of people liking it. We actually got listener feedback that someone was like, “Oh, I heard you talking about umbrellas and this is why I like them.” Then Johanna —


[00:27:00] JE: — Oh, we got to read that on the show.


[00:27:02] EO: Yeah. Her episode, she talked about enjoying them. As long as you treated it as not a separation of concerns, I think, it was because once those applications are loaded, they can talk to each other willy-nilly and nothing's going to stop them.


[00:27:20] JE: She said that it was originally designed to be a development tool and not really run in production? Is that right?


[00:27:26] EO: I think it was a way to break your app apart for running separately in production, or something. Yeah, we just recorded it not too long ago and it's already —


[00:27:36] JE: We're going to give away a secret sauce. Oh, but no, because this is still coming after. Well, if you don't know what we're talking about, just go back and listen to Johanna’s episode.


[00:27:45] JW: What's funny about umbrella — as soon as I saw umbrella projects, I was reminded of back in my .NET days. You had a solution.And in your solution, you had multiple projects. When you built the solution, it built all the projects. It's the same concept. To me, it's — I don't want to say, people that are fighting it so much. Maybe they're doing it wrong, but maybe they're doing it wrong, because I’ve had —


[00:28:08] EO: Yeah. I was definitely doing it wrong. The one project we did, it just wasn't worth doing for one week, because I feel there's a certain size of project that an umbrella app makes sense and that project was not it.


[00:28:22] JW: Yeah. A lot of it depends on, and I go back to this. This is one of my things that anytime people get dogmatic about anything, I question it, because really, it's about what works good for the team. If the team of developers is comfortable with an umbrella project, they know how to work an umbrella project, they know how to maintain good fences between the neighbors and things like that, it's not a problem. If the team doesn't feel comfortable with that, but they feel comfortable putting everything in there and they can maintain good fences between their neighbors, then that's fine too.


That's something I talk about with abstractions, like having good fences. Your API should all — and when I say API, I’m talking about any public interface to a module, or an application, or anything. If you're maintaining those contracts, then that's a good fence. You have a good communication path, you should be able to change what's behind that. You should be able to put pink flamingos in your yard if you want. Your neighbors don't have to see them. I’m looking at your shirt, that's why.


[00:29:25] JE: Oh, yeah. Shout out to Muck’s. I like your pocket tees. Keeping them up.


[00:29:31] JW: Potential sponsor. That's what it is.


[00:29:33] JE: I wanted to ask a question and it's just escaped me. I’m also thinking about this whole concept of how one should go about architecting as they develop. On one hand, I see this thing where people over-engineer in the beginning by doing this, like, too component — that's not the right word, but that's the verb that I’m making up. It's too componentized, right? It's too much nested file structures. Too much me having to go and dig through what you've done and it's not exactly intuitive, because it's based on this set of arbitrary abstractions that you made up. Then on the other hand, you can't just wing it, can you?


[00:30:13] JW: I don't know the wing it part. I think that I’ll go back to the reason —


[00:30:20] JE: Meaning, like, solve problems without patterns in a broader architectural base.


[00:30:29] JW: That goes back to the dogmatic conversation. I never learned design patterns. What's funny is, I thought I discovered a few of them myself, until I realized somebody else had done that. Because a lot of what patterns is, is as humans, we're trained to find patterns and things. Once we recognize a pattern, we can talk about it. To me, design patterns, you never sit down and go, “We should do factory pattern here.” If I said, “Oh, it's like factory pattern,” you would know what I’m talking about.


[00:31:05] EO: We’re using Java all of a sudden?


[00:31:08] JW: I’m throwing out the design patterns that I know. I’m throwing off here.


[00:31:11] JE: So, for those who don’t know, what is the factory pattern?


[00:31:16] JW: The factory pattern is basically being able to replicate objects based on — back in the old Java days, you'd have an interface, which technically, you have behaviors in Elixir. The idea is you should be able to replicate that using those behaviors. And so all those objects act the same. They would all have the same behaviors. They might do something different, but those behaviors would be the same across the board. You could generate multiple of them with a base interface, I think is what Java and .NET called them.


Oh, man. Now you're having me go back to my .NET days. I’m pretty sure there were interfaces in Java and I believe there were interfaces in. Yeah, anyway, so you can replicate things, so that same behavior across multiple types of objects or classes. A lot of those, there was actually a book a few years ago. I think it was a Prag Prog book, called Design Patterns for Functional Programming. What it did was it went through some of the object-oriented design patterns and showed how they actually apply in functional programming and things like that. It’s been a while. It's been several years now.


Yeah. Really, design patterns are a way of communicating. Honestly, when's the last time you sat down and talked about design patterns at work, like when you're actually working on something?


[00:32:42] JE: We don't talk about the design patterns, the one that people write about, but we talk about patterns within the applications that we're writing a lot. We'll say, like, someone will say, “How do I do this?” I’ll say, “Well, we have a pattern in this application of doing it in this way.” Then they'll just do that. We don't have too many problems with that happening, except for sometimes, code duplication.


[00:33:10] JW: I’ve seen extractions of code, where common functionality gets abstracted out, then through — I saw an Elixir project say, it gets abstracted out into a module, so that it can be reused across projects. Generally, what happens is, it's used in that one project and it isn't necessarily reused across multiple projects.


Then the problem with that is, I talk about tribal knowledge. When you sit down on an application, they've done things a certain way. You have to learn how they did that. If they do that outside the norm, I go back to Phoenix. Honestly, I use Phoenix all the time. The reason I use Phoenix is because I can talk about Phoenix with you, or with Eric and you know exactly what I’m talking about. If I rolled my own, then I would have to explain to you how mine worked. The idea is you have libraries like Ecto. You have libraries like Phoenix, which is great, because patterns that come out in those applications, you can talk across any team across anything.


Now when you start by veering from those patterns and start doing things your own way, now you have to explain how that works to somebody else. I know that I’ve seen things of, like, you go to implement something, and so you go write out all the code and then somebody will step in and go, “Oh. Well, we have this module over here. Named ‘something-that-doesn't-make-sense, that you should use to call these functions.” It's like, “Oh, wait. Hold on. How would I have known that's tribal knowledge? How would I have known to go look for that without just —” especially larger projects. I’ve seen stuff buried in larger projects.


Like, examples around special ways of logging information. They have instead of just calling it logger, there's a module that has logger functions that calls logger, but does some decorating to the message. It's like, “That's great, but that's tribal knowledge that you have to share as you're working on the project.” Whereas, if you just made a logger call, now where that does help is, say you always want to return very similar styled messages. Errors are a perfect example. I’ve used modules that have various functions that all return error messages, but they have a standardized format.


Yes, I could just call logger, or whatever, but I want the error message to be very specific, so that they're always the same. That's a case. Then that's one of those things when we sit down on a project together, I’m going to say, oh, when you have an error, call this module over here, because it's going to give you the right format for those errors. It does —


[00:35:58] JE: — Help me distill it down, because you said you don't really have any dogmas, but there's got to be some when you're making decisions on the day-to-day, there must be some North Star that you are looking at as like, “Well, all the things being equal, this is what I’m aiming for.” Maybe it's readability, or maybe it's modularity. What are you primarily thinking about when you're putting together an application?


[00:36:22] JW: Does it work?


[00:36:26] JE: Let's talk about the constraint of the job, right?


[00:36:28] JW: My favorite meme of all time has got to be that Pirates of the Caribbean one, where whatever, the admiral is like, “That has got to be the worst code that I’ve ever seen run,” and Jack Sparrow is like, “But it runs.” No, in all seriousness, I do try to — my first goal when I write code is to make it work. Obviously, you want to. This goes back to I think, the Joe Armstrong quote, “Make it work. Make it beautiful, then make it fast.” If you make it work and it's beautiful, chances are it'll be fast enough.


A lot of times when I sit down, if I’m trying to put a feature in, I want to do the minimal amount of work to make that work, but at the same time, I want it to be readable enough and “beautiful enough,” that in six months if I haven't seen that code, I’m going to be like, “Okay. Yeah. I know exactly what I was doing there.”


[00:37:20] JE: How do you apply that to the larger problem of code organization?


[00:37:25] JW: Well, I think that's where I fall back into putting things where they logically belong. Like a data access layer. I know that if I go in that part of the project, everything's going to be around data access. One of the things, perfect example is schema files for Ecto. The only thing that I put in my schema file is the schema definition. I might have a change set, but that change set, the only thing it really does — is does the cast of any required checks or anything like that. Any business logic, I would separate that out.


I think, if there's any calculation, which to me I wouldn't  — that's not part of the change set. The change set is literally for mapping that data coming in to the schema that's going to the database. If you're adding other things to it, then you're over complicating it and you're bearing logic in it. Whereas, say I have something like  — ‘customer.’ The customer schema is going to have the schema information and a change set that allows me to transfer customer data into an object that the database can accept.


I might have a module called ‘create customer.’ That create customer takes in a set of parameters that are needed to create that customer. Maybe the change set lives in there to where on creating a customer, these certain things have to happen. Then there might be a ‘create call.’ That chain set might be private. You don't really call it. You just pass it in parameters to creating. Create then calls the change set that starts by calling the chain set for the schema  — and then applies anything afterwards. Now, I have something. Well, I know when I’m creating a customer, I have that in that place.


I don't have to go digging around and I don’t have to look through the schema file, I have to figure out which change. And all my repo calls are in one place. I don't, from a controller at that point, you're just going to call ‘createcustomer.create,’ whatever you want to call it, and then it's going to actually execute and do its thing and then return something back. Then the controller itself can then send whatever response it needs.


Now in the case of maybe you have something more complicated, say, a purchase order. You're creating a purchase order, well, there's multiple elements in that. Well, so create a purchase order might have to call into create customer as part of that, might have to create an address. Whatever it ends up with other fields that are on there, but that's in its own module. Yeah, it might call into those other things.


I know when I want to know what the database schema looks like, I can go into the schema file and I can see that. When I want to know how to create a customer, I can go into the create customer module and see how to do that. When I want to create a purchase order, I can go into the purchase order and see how that's done. Things aren't scattered everywhere. I’ve seen cases where people put things in the change sets so that if something else calls the chain set, it might trigger a calculation somewhere. It's like, “Whoa! Hold on. I don't want to do that. I just want to write to the database.” Then I have to write another chain set. Whereas really, that stuff shouldn't be in there, or in my opinion it shouldn’t be.


[00:40:54] JE: I want to say, I agree. I agree with the overall philosophy. You're also much more experienced than me, so I’m not going to criticize it.


[00:41:03] JW: I make mistakes every single day. I will tell you. It doesn't matter how long you’ve been doing it. It doesn't matter how long you've been doing this. There's no such thing as a perfect code base. That's why I try not to be. I see people on Twitter, “Oh, I can't believe they did this. This should be done this way.” It varies. Some projects are different. You don't know what the —


I go into things thinking that every developer has the best intentions. Nobody goes in to work that day and says, “I’m going to write the shittiest code that I can write.” Excuse my language, by the way. But, “I’m going to write the worst code that I can write just to see what happens.” Everybody has the best intentions. Now they might not be [inaudible 00:41:43], but that’s what code reviews are for. Then you can come back and say, “Hey, we should do it differently, or something.” You don't understand the pressures they're on to write that code, what the parameters are around writing that code, what the business requirements for writing that code.


[00:41:56] JE: I do agree with you in spirit. At SmartLogic, I’ve got a really smart team where everyone is in alignment behind this idea of quality code and collaborative code, where people are looking at it and that the process is correct. We also inherit a lot of projects. When you're inheriting projects, it’s I think when you see the baffling design decisions that people have made. I guess, I’m trying to hone in on, like, “What are the rules of thumb that people, especially less experienced programmers can apply to their thinking as they go through their development cycle?” Also, what are the cardinal sins? One that you said was being too clever. That I see all the time. It almost seems as if trying to outsmart the future is what creates more problems for the future than any other single thing that people try to do.


We are also almost out of time. I feel like we could talk about this a lot. I want to give you time to respond to that and also to plug any of your projects, any shameless self-promotion, where you work, etc.


[00:43:09] JW: Yeah. Well, let me answer that real quick. I think there's a time and a place for everything. When I’m writing code that's production code, or work code that's going to go out, dogmatic probably sounds bad. I’m very careful about what I’m writing and what I’m reading, because other people are reading it. On side projects, or projects if the parameters lean towards that, I’m experimental. I write a lot of code, even recently, that I would never put into production for a lot of reasons.


For one, I think that especially as young developers, if I tell you you need to write code this way and you don't know why you need to write code that way, well you're never going to really learn. You just know that I have this pattern that I have to repeat. If you get out there and you experiment and you try things — like, one time I tried to write a broker. Well, one time I tried to write an SMTP at library, low-level opening up the connection, sending each phrase across the connection. I would never put it into production.


[00:44:11] EO: “Hello.”


[00:44:12] JW: Exactly. Yeah, you do the little handshake and everything like that and send your SMTP. I would never put it into production, necessarily, but it taught me so much. I think that's one of the things that really when I got into Elixir, really was the thing that hooked me. Was — there was so many things not written, like I had the opportunity to write all these things and I had the opportunity to make mistakes and I had the opportunity to try to figure things out. Whereas, a lot of times in your day job, you don't. You have to perform. You have to write good code.


You don't always get an explanation for why you did something wrong. If you take the time in side projects that go nowhere. Write bad code. Write a lot about code, because that's going to show you how to write good code, or why you should write good code. The first time you go to write something and it's so clever that you can't figure it out in a few weeks, you're going to realize I probably shouldn't be writing clever code. Or the first time you have to explain it. That's my favorite.


[00:45:12] EO: Before we move too far from this, the one thing I do want to call people out on is really bad commit messages. We've inherited projects that have — it's like, I” hate you other developer name.” That was the commit message.


[00:45:30] JW: One thing that I will say is a lot of times when I start projects, I’ll come up with a clever quote for that initial commit. I’ve used, “Make it so,” which I actually think I got that from Chris McCord. Look up quotes on beginning projects and things like that, or inspirational quotes and use those. Because it's the initial quote, or an initial commit. Now I am a firm advocate of, “I think this works.” — “I’m pretty sure I got it this time.”


[00:45:59] EO: “Take 40 seconds.”


[00:45:59] JE: Yeah, I do those a lot. It’s like, “I fixed it for real this time.” [Inaudible 00:46:05]. I literally did that today.


[00:46:10] EO: You can squash those away. It's just funny to be digging through an old project and just see this train of thought, or their mental state is forever recorded in this project as they're trying to fix things.


[00:46:24] JE: I recently had — this may or may not have been for work, but someone committed comments that were like, “I finally found it. Here's where the problem was.” I was like, “I don't need those comments to be committed. No one who reads that in the future is going to even get what that is referring to.” It was almost like, they had commented literally for me to read, but it was in the code.


[00:46:51] JW: They were so happy.


[00:46:54] JE: Yeah, it was really funny. I was like, “Yeah, you're going to have to — this can’t.”


[00:46:58] JW: Anytime they see that message, it’s going to put a little smile on their face.


[00:47:02] JE: Yeah. I love deleting people's comments that they leave, especially to-do's. Just, goodbye. Well, do you want to plug anything, or shameless self-promotion, anything like that? You're welcome to.


[00:47:15] JW: You know what? I’m plugging on a balanced life. How about that? I spent a lot of years, I’ve been doing this for 20 years. I’ve been in the Elixir community for six or so, maybe seven years now. I don't remember exactly. I guess, it's about yeah, seven years. Because I know, it was at least 2013 and it's 2020. About seven years. Man, I was churning constantly. Either trying to speak at conferences, or speaking at conferences and travel and doing the Elixir Fountain. Before that doing the Elixir Fountain as a newsletter.


I got caught up in the whole race of things. Recently, all my kids, I have what, seven kids, they all came to visit us. And just taking the time and taking some time away and spending some time with them. I’ve seen different people on Twitter now talking about, “Oh, I’m working all these hours.” Nobody gives this shit in three years that you stayed up late. I’m just stealing this. I’m paraphrasing it. But I guarantee, your kid is going to remember that you missed their play, because you worked late. I’m serious. I saw that and I was like — I saw that a couple weeks ago and I was like, “Holy shit. Yeah.” 


Yeah, because there's a lot of nights I worked late. I didn't necessarily miss anything, like an event, because I always made sure I went to events. I mean, I know I missed time just playing video games with my son, to work. I don't even remember what the hell I was working on. I don't remember why I was working on it. I guarantee, my son remembers the times that I didn't sit down and play video games with him for an hour.


I hope people out there can get back to focusing on balance. I think a lot of this with this pandemic, just spending time that you didn't spend before. I think that that's on one hand, I don't want to say it's a good thing, because I know a lot of people die and stuff like that, but maybe society needed a bit of a reset to say, “Hey, work isn't everything.” Getting out and spending money isn't everything. You just spend time with your family. Eat dinner with your family. Do things like that. That's my hot take.


[00:49:30] JE: Well, I really appreciate it, Johnny. I think that it is really important for us to try to find the good in everything, even the bad things that happen.


With that, this has been another episode of Elixir Wizards. Thank you, Johnny Winn, for coming on to the show. We would love to have you back again for next season. Thank you to my co-host, Eric Oestrich. Once again, I’m Justus Eapen. Elixir Wizards is a SmartLogic podcast. Here at SmartLogic, we're always looking to take on new projects, building web apps in Elixir, Rails, React, infrastructure projects using Kubernetes and mobile apps using React Native. We'd love to hear from you if you have a project we could help you with.


Don't forget to like and subscribe on your favorite podcast player. You can find us on Instagram and Twitter and Facebook, so add us on all of those. You can also find me personally @JustusEapen and Eric @EricOestrich. Join us again next week on Elixir Wizards for more system and application architecture.


[END]
        © 2020 Elixir Wizards