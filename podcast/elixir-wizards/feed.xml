<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" version="2.0" encoding="UTF-8">
  <channel>
    <generator>SmartLogic Podcasts</generator>
    <title>Elixir Wizards</title>
    <link>https://smartlogic.io/podcast/elixir-wizards</link>
    <pubDate>Thu, 23 Apr 2020 10:45:05 -0000</pubDate>
    <description>On Elixir Wizards, we talk with software developers from around the world about the Elixir language and other modern web technologies. In season three our theme is Working with Elixir: Functional Programming, Hiring/Training, and Performance.
Elixir Wizards is hosted by Justus Eapen and Eric Oestrich of SmartLogic, a dev shop that’s been building custom software since 2005 and running Elixir applications in production since 2015.
Learn more about how SmartLogic uses Phoenix and Elixir. (https://smartlogic.io/phoenix-and-elixir?utm_source=podcast) 
</description>
    <language>en-us</language>
    <itunes:type>episodic</itunes:type>
    <itunes:subtitle>Conversations on Elixir, Phoenix, and other light magic.</itunes:subtitle>
    <itunes:author>SmartLogic LLC</itunes:author>
    <itunes:summary>On Elixir Wizards, we talk with software developers from around the world about the Elixir language and other modern web technologies. In season three our theme is Working with Elixir: Functional Programming, Hiring/Training, and Performance.
Elixir Wizards is hosted by Justus Eapen and Eric Oestrich of SmartLogic, a dev shop that’s been building custom software since 2005 and running Elixir applications in production since 2015.
Learn more about how SmartLogic uses Phoenix and Elixir. (https://smartlogic.io/phoenix-and-elixir?utm_source=podcast) 
</itunes:summary>
    <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
    <itunes:explicit>no</itunes:explicit>
    <itunes:keywords>elixir, elixirlang, phoenix, web apps, mobile apps, webdev, software development</itunes:keywords>
    <itunes:owner>
      <itunes:name>SmartLogic LLC</itunes:name>
      <itunes:email>podcast@smartlogic.io</itunes:email>
    </itunes:owner>
    <itunes:category text="Technology"/>
    <itunes:category text="Education">
      <itunes:category text="How To"/>
    </itunes:category>
    
    <item>
      <title>Season 3 Trailer</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/s3-trailer</link>
      <guid isPermaLink="false">ba3a7fde-7592-4074-906d-1689a9801712</guid>
      <pubDate>Tue, 19 Nov 2019 06:00:00 -0500</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/ba3a7fde-7592-4074-906d-1689a9801712.mp3" length="2412548" type="audio/mp3"/>
      <itunes:episodeType>trailer</itunes:episodeType>
      <itunes:season>3</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Welcome back to Season 3! Our theme this time around is Working with Elixir. Listen for more on our theme, upcoming guests, and our new name.</itunes:subtitle>
      <itunes:duration>1:40</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>Welcome back to Season 3! Our theme this time around is Working with Elixir. Listen for more on our theme, upcoming guests, and our new name. 
</description>
      <itunes:keywords>elixir, phoenix</itunes:keywords>
      <content:encoded><![CDATA[
        <p>Welcome back to Season 3! Our theme this time around is Working with Elixir. Listen for more on our theme, upcoming guests, and our new name.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Welcome back to Season 3! Our theme this time around is Working with Elixir. Listen for more on our theme, upcoming guests, and our new name.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Season 2 Trailer</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/season-2-trailer</link>
      <guid isPermaLink="false">2301755d-d5af-4c53-b044-2d84b35b340f</guid>
      <pubDate>Tue, 09 Jul 2019 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/2301755d-d5af-4c53-b044-2d84b35b340f.mp3" length="2507438" type="audio/mpeg"/>
      <itunes:episodeType>trailer</itunes:episodeType>
      <itunes:season>2</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>We’re excited to announce our season two topic, Elixir Internals. In this season we talk with developers behind some of the most popular Elixir libraries, including Witchcraft, ElixirScript, Distillery, Ecto, and more!</itunes:subtitle>
      <itunes:duration>1:26</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>We’re excited to announce our season two topic, Elixir Internals. In this season we talk with developers behind some of the most popular Elixir libraries, including Witchcraft, ElixirScript, Distillery, Ecto, and more! 
</description>
      <itunes:keywords></itunes:keywords>
      <content:encoded><![CDATA[
        <p>We’re excited to announce our season two topic, Elixir Internals. In this season we talk with developers behind some of the most popular Elixir libraries, including Witchcraft, ElixirScript, Distillery, Ecto, and more!</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>We’re excited to announce our season two topic, Elixir Internals. In this season we talk with developers behind some of the most popular Elixir libraries, including Witchcraft, ElixirScript, Distillery, Ecto, and more!</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Smart Software Season 1 Trailer</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/season-1-trailer</link>
      <guid isPermaLink="false">8e2c78f1-af3a-4c6a-b1bc-413be9fb1e72</guid>
      <pubDate>Mon, 25 Feb 2019 10:00:00 -0500</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/8e2c78f1-af3a-4c6a-b1bc-413be9fb1e72.mp3" length="1009172" type="audio/mp3"/>
      <itunes:episodeType>trailer</itunes:episodeType>
      <itunes:season>1</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Welcome to the first season of Smart Software with SmartLogic. We'll be interviewing several companies about how they use Elixir in Production this season. In this preview episode, we introduce ourselves and some of the topics we’ll be covering.</itunes:subtitle>
      <itunes:duration>1:24</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>Welcome to the first season of Smart Software with SmartLogic. We'll be interviewing several companies about how they use Elixir in Production this season. In this preview episode, we introduce ourselves and some of the topics we’ll be covering.
Learn more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) 
</description>
      <itunes:keywords>elixir, phoenix, production</itunes:keywords>
      <content:encoded><![CDATA[
        <p>Welcome to the first season of Smart Software with SmartLogic. We&#39;ll be interviewing several companies about how they use Elixir in Production this season. In this preview episode, we introduce ourselves and some of the topics we’ll be covering.</p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Welcome to the first season of Smart Software with SmartLogic. We&#39;ll be interviewing several companies about how they use Elixir in Production this season. In this preview episode, we introduce ourselves and some of the topics we’ll be covering.</p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Betweenisode Part 2!  Featuring Amos King, Chris Keathley, Anna Neyzberg, Paul Schoenfelder, Sophie DeBenedetto, Meryl Dakin, and Dave Thomas</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/s4e0b-betweenisode-part-2</link>
      <guid isPermaLink="false">dbe34c01-2361-41a8-ab85-dab81699cc7e</guid>
      <pubDate>Thu, 23 Apr 2020 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/dbe34c01-2361-41a8-ab85-dab81699cc7e.mp3" length="76979190" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>4</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Welcome back to part two of our Betweenisode! Everybody is working remotely now including ourselves, so today we continue the catch ups we were having with a number of longstanding buddies and chat about life during social distancing.</itunes:subtitle>
      <itunes:duration>53:26</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>Welcome back to part two of our betweenisode! Everybody is working remotely now including ourselves, so today we continue the catch ups we were having with a number of longstanding buddies and chat about life after social distancing! The show is a back-to-back of four different conversations, the first being with Amos King, Chris Keathley, and Anna Neyzberg from Elixir Outlaws. After that we talk to Paul Schoenfelder, before getting on the line with Sophie DeBenedetto and Meryl Dakin. Last but not least we catch up with Dave Thomas. Our four conversations cover the same broad themes, and we mostly share our thoughts about what is happening in the world right now, how we are coping with working remotely, and what particular projects have been keeping us busy. Our guests share varying perspectives about what it means that we are restructuring the way we do things. We talk about how even if you worked remotely before, things feel different now, and we also consider the extra burdens of being a remote software developer. Other topics include the line between complaints and constructive criticism, wild animals roaming the streets, and the general atmosphere in our different locations. From a tech point of view, we touch on IoT development, various GitHub projects to get involved with, why students aren’t learning how to program properly anymore, and a lot more. Get it all here and make sure you stay tuned for episode one of season four!
Key Points From This Episode:
Scaling up the NFL Draft website for remote screening.
Home life and side projects in the quarantine: Mogde Podge, a baby, and game development.
Shameless plugs from everybody: Binary Noggin, ElixirBridge, and Finch.
Isolation, low supplies and trying to stay positive at present.
Imagining roaming wild animals now that humans are in quarantine.
Advice from Paul who works at home for surviving social distancing.
What Paul is doing for Ockam to secure IoT devices.
The danger of starting hack vulnerable tech companies.
A plug from Paul to get involved with Lumen.
Nature taking over; Meryl and Sophie’s experiences in Brooklyn and Westchester right now.
Working from home versus working from home due to a global crisis.
Domestic squabbles over bandwidth between Meryl and her software developer brother.
Lessons learned to stay sane during quarantine: getting dressed.
Extra tasks remote developers are having to do remotely; becoming project managers.
The difference between complaints and legitimate critiques of work systems.
Dave’s amazing remote communications setup 40 miles north of Dallas.
The situation where Dave is with regard to coronavirus and freedom.
How COBOL has not become too broad despite not using libraries.
The history of programming languages that Dave teaches.
That PDP-11 runs better emulated in Javascript than in its original hardware.
A drawback of modern development: not understanding hardware.
How Dave is digitizing his SMU courses due to teaching them online at present.
All the effort Dave puts into grading his students’ exercises.
Issues that coding is not taught rigorously enough; students can’t ‘program’.
How well the human race is doing to mobilize en masse right now.
Whether tech caused the crisis and humanity could manage this crisis 100 years ago.
Links Mentioned in Today’s Episode:
Eric Oestrich — https://oestrich.org/
Justus Eapen — https://www.linkedin.com/in/justuseapen/
Amos King — https://www.linkedin.com/in/amosking/
Chris Keathley — https://keathley.io/
Anna Neyzberg — https://www.linkedin.com/in/anna-neyzberg-93545316/
Elixir Outlaws — https://elixiroutlaws.com/
NFL Draft — https://www.nfl.com/draft/home
Modge Podge — https://www.amazon.com/Mod-Podge-Waterbase-16-Ounce-CS11302/dp/B001IKES5O
Star Trek — https://intl.startrek.com/
Sublime — https://www.sublimetext.com/
VSCode — https://code.visualstudio.com/
Binary Noggin — https://binarynoggin.com/
Connor Rigby — https://binarynoggin.com/author/connor/
ElixirBridge — http://elixirbridge.org/
Nico Piderman — https://github.com/sneako
Quinn Wilton — https://github.com/QuinnWilton
Jose Valim — https://github.com/josevalim
Finch Library— https://github.com/keathley/finch
Paul Schoenfelder — https://www.linkedin.com/in/gotbones/
Ockam — https://www.ockam.io/
Lumen — https://github.com/lumen/lumen
Timex — https://github.com/bitwalker/timex
Sophie DeBenedetto — https://www.linkedin.com/in/sophiedebenedetto/
Meryl Dakin — https://github.com/meryldakin
Flatiron — https://flatironschool.com/
Sophie DeBenedetto’s GitHub Post — https://www.thegreatcodeadventure.com/my-long-distance-relationship-with-github/
Elixir School — https://elixirschool.com/en/
Meryl Dakin’s Watch if Your Dare Episode — https://www.stitcher.com/podcast/watch-if-you-dare/e/68798094?autoplay=true
Luigi’s Mansion — https://www.nintendo.co.za/Games/Nintendo-Switch/Luigi-s-Mansion-3-1437312.html
Dave Thomas — https://pragdave.me/
COBOL — https://www.tutorialspoint.com/cobol/index.htm
PD-11 — https://history-computer.com/ModernComputer/Electronic/PDP-11.html
SMU — https://www.smu.edu/lyle
Elixir Wizards Podcast — https://podcast.smartlogic.io
SmartLogic — https://smartlogic.io/  Special Guests: Amos King, Anna Neyzberg, Chris Keathley, Dave Thomas, Meryl Dakin, Paul Schoenfelder, and Sophie DeBenedetto.
</description>
      <itunes:keywords>elixir, phoenix</itunes:keywords>
      <content:encoded><![CDATA[
        <p>Welcome back to part two of our betweenisode! Everybody is working remotely now including ourselves, so today we continue the catch ups we were having with a number of longstanding buddies and chat about life after social distancing! The show is a back-to-back of four different conversations, the first being with Amos King, Chris Keathley, and Anna Neyzberg from Elixir Outlaws. After that we talk to Paul Schoenfelder, before getting on the line with Sophie DeBenedetto and Meryl Dakin. Last but not least we catch up with Dave Thomas. Our four conversations cover the same broad themes, and we mostly share our thoughts about what is happening in the world right now, how we are coping with working remotely, and what particular projects have been keeping us busy. Our guests share varying perspectives about what it means that we are restructuring the way we do things. We talk about how even if you worked remotely before, things feel different now, and we also consider the extra burdens of being a remote software developer. Other topics include the line between complaints and constructive criticism, wild animals roaming the streets, and the general atmosphere in our different locations. From a tech point of view, we touch on IoT development, various GitHub projects to get involved with, why students aren’t learning how to program properly anymore, and a lot more. Get it all here and make sure you stay tuned for episode one of season four!</p>

<p>Key Points From This Episode:</p>

<ul>
<li>Scaling up the NFL Draft website for remote screening.</li>
<li>Home life and side projects in the quarantine: Mogde Podge, a baby, and game development.</li>
<li>Shameless plugs from everybody: Binary Noggin, ElixirBridge, and Finch.</li>
<li>Isolation, low supplies and trying to stay positive at present.</li>
<li>Imagining roaming wild animals now that humans are in quarantine.</li>
<li>Advice from Paul who works at home for surviving social distancing.</li>
<li>What Paul is doing for Ockam to secure IoT devices.</li>
<li>The danger of starting hack vulnerable tech companies.</li>
<li>A plug from Paul to get involved with Lumen.</li>
<li>Nature taking over; Meryl and Sophie’s experiences in Brooklyn and Westchester right now.</li>
<li>Working from home versus working from home due to a global crisis.</li>
<li>Domestic squabbles over bandwidth between Meryl and her software developer brother.</li>
<li>Lessons learned to stay sane during quarantine: getting dressed.</li>
<li>Extra tasks remote developers are having to do remotely; becoming project managers.</li>
<li>The difference between complaints and legitimate critiques of work systems.</li>
<li>Dave’s amazing remote communications setup 40 miles north of Dallas.</li>
<li>The situation where Dave is with regard to coronavirus and freedom.</li>
<li>How COBOL has not become too broad despite not using libraries.</li>
<li>The history of programming languages that Dave teaches.</li>
<li>That PDP-11 runs better emulated in Javascript than in its original hardware.</li>
<li>A drawback of modern development: not understanding hardware.</li>
<li>How Dave is digitizing his SMU courses due to teaching them online at present.</li>
<li>All the effort Dave puts into grading his students’ exercises.</li>
<li>Issues that coding is not taught rigorously enough; students can’t ‘program’.</li>
<li>How well the human race is doing to mobilize en masse right now.</li>
<li>Whether tech caused the crisis and humanity could manage this crisis 100 years ago.</li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>Eric Oestrich — <a href="https://oestrich.org/" rel="nofollow">https://oestrich.org/</a><br>
Justus Eapen — <a href="https://www.linkedin.com/in/justuseapen/" rel="nofollow">https://www.linkedin.com/in/justuseapen/</a><br>
Amos King — <a href="https://www.linkedin.com/in/amosking/" rel="nofollow">https://www.linkedin.com/in/amosking/</a><br>
Chris Keathley — <a href="https://keathley.io/" rel="nofollow">https://keathley.io/</a><br>
Anna Neyzberg — <a href="https://www.linkedin.com/in/anna-neyzberg-93545316/" rel="nofollow">https://www.linkedin.com/in/anna-neyzberg-93545316/</a><br>
Elixir Outlaws — <a href="https://elixiroutlaws.com/" rel="nofollow">https://elixiroutlaws.com/</a><br>
NFL Draft — <a href="https://www.nfl.com/draft/home" rel="nofollow">https://www.nfl.com/draft/home</a><br>
Modge Podge — <a href="https://www.amazon.com/Mod-Podge-Waterbase-16-Ounce-CS11302/dp/B001IKES5O" rel="nofollow">https://www.amazon.com/Mod-Podge-Waterbase-16-Ounce-CS11302/dp/B001IKES5O</a><br>
Star Trek — <a href="https://intl.startrek.com/" rel="nofollow">https://intl.startrek.com/</a><br>
Sublime — <a href="https://www.sublimetext.com/" rel="nofollow">https://www.sublimetext.com/</a><br>
VSCode — <a href="https://code.visualstudio.com/" rel="nofollow">https://code.visualstudio.com/</a><br>
Binary Noggin — <a href="https://binarynoggin.com/" rel="nofollow">https://binarynoggin.com/</a><br>
Connor Rigby — <a href="https://binarynoggin.com/author/connor/" rel="nofollow">https://binarynoggin.com/author/connor/</a><br>
ElixirBridge — <a href="http://elixirbridge.org/" rel="nofollow">http://elixirbridge.org/</a><br>
Nico Piderman — <a href="https://github.com/sneako" rel="nofollow">https://github.com/sneako</a><br>
Quinn Wilton — <a href="https://github.com/QuinnWilton" rel="nofollow">https://github.com/QuinnWilton</a><br>
Jose Valim — <a href="https://github.com/josevalim" rel="nofollow">https://github.com/josevalim</a><br>
Finch Library— <a href="https://github.com/keathley/finch" rel="nofollow">https://github.com/keathley/finch</a><br>
Paul Schoenfelder — <a href="https://www.linkedin.com/in/gotbones/" rel="nofollow">https://www.linkedin.com/in/gotbones/</a><br>
Ockam — <a href="https://www.ockam.io/" rel="nofollow">https://www.ockam.io/</a><br>
Lumen — <a href="https://github.com/lumen/lumen" rel="nofollow">https://github.com/lumen/lumen</a><br>
Timex — <a href="https://github.com/bitwalker/timex" rel="nofollow">https://github.com/bitwalker/timex</a><br>
Sophie DeBenedetto — <a href="https://www.linkedin.com/in/sophiedebenedetto/" rel="nofollow">https://www.linkedin.com/in/sophiedebenedetto/</a><br>
Meryl Dakin — <a href="https://github.com/meryldakin" rel="nofollow">https://github.com/meryldakin</a><br>
Flatiron — <a href="https://flatironschool.com/" rel="nofollow">https://flatironschool.com/</a><br>
Sophie DeBenedetto’s GitHub Post — <a href="https://www.thegreatcodeadventure.com/my-long-distance-relationship-with-github/" rel="nofollow">https://www.thegreatcodeadventure.com/my-long-distance-relationship-with-github/</a><br>
Elixir School — <a href="https://elixirschool.com/en/" rel="nofollow">https://elixirschool.com/en/</a><br>
Meryl Dakin’s Watch if Your Dare Episode — <a href="https://www.stitcher.com/podcast/watch-if-you-dare/e/68798094?autoplay=true" rel="nofollow">https://www.stitcher.com/podcast/watch-if-you-dare/e/68798094?autoplay=true</a><br>
Luigi’s Mansion — <a href="https://www.nintendo.co.za/Games/Nintendo-Switch/Luigi-s-Mansion-3-1437312.html" rel="nofollow">https://www.nintendo.co.za/Games/Nintendo-Switch/Luigi-s-Mansion-3-1437312.html</a><br>
Dave Thomas — <a href="https://pragdave.me/" rel="nofollow">https://pragdave.me/</a><br>
COBOL — <a href="https://www.tutorialspoint.com/cobol/index.htm" rel="nofollow">https://www.tutorialspoint.com/cobol/index.htm</a><br>
PD-11 — <a href="https://history-computer.com/ModernComputer/Electronic/PDP-11.html" rel="nofollow">https://history-computer.com/ModernComputer/Electronic/PDP-11.html</a><br>
SMU — <a href="https://www.smu.edu/lyle" rel="nofollow">https://www.smu.edu/lyle</a><br>
Elixir Wizards Podcast — <a href="https://podcast.smartlogic.io" rel="nofollow">https://podcast.smartlogic.io</a><br>
SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> </p><p>Special Guests: Amos King, Anna Neyzberg, Chris Keathley, Dave Thomas, Meryl Dakin, Paul Schoenfelder, and Sophie DeBenedetto.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Welcome back to part two of our betweenisode! Everybody is working remotely now including ourselves, so today we continue the catch ups we were having with a number of longstanding buddies and chat about life after social distancing! The show is a back-to-back of four different conversations, the first being with Amos King, Chris Keathley, and Anna Neyzberg from Elixir Outlaws. After that we talk to Paul Schoenfelder, before getting on the line with Sophie DeBenedetto and Meryl Dakin. Last but not least we catch up with Dave Thomas. Our four conversations cover the same broad themes, and we mostly share our thoughts about what is happening in the world right now, how we are coping with working remotely, and what particular projects have been keeping us busy. Our guests share varying perspectives about what it means that we are restructuring the way we do things. We talk about how even if you worked remotely before, things feel different now, and we also consider the extra burdens of being a remote software developer. Other topics include the line between complaints and constructive criticism, wild animals roaming the streets, and the general atmosphere in our different locations. From a tech point of view, we touch on IoT development, various GitHub projects to get involved with, why students aren’t learning how to program properly anymore, and a lot more. Get it all here and make sure you stay tuned for episode one of season four!</p>

<p>Key Points From This Episode:</p>

<ul>
<li>Scaling up the NFL Draft website for remote screening.</li>
<li>Home life and side projects in the quarantine: Mogde Podge, a baby, and game development.</li>
<li>Shameless plugs from everybody: Binary Noggin, ElixirBridge, and Finch.</li>
<li>Isolation, low supplies and trying to stay positive at present.</li>
<li>Imagining roaming wild animals now that humans are in quarantine.</li>
<li>Advice from Paul who works at home for surviving social distancing.</li>
<li>What Paul is doing for Ockam to secure IoT devices.</li>
<li>The danger of starting hack vulnerable tech companies.</li>
<li>A plug from Paul to get involved with Lumen.</li>
<li>Nature taking over; Meryl and Sophie’s experiences in Brooklyn and Westchester right now.</li>
<li>Working from home versus working from home due to a global crisis.</li>
<li>Domestic squabbles over bandwidth between Meryl and her software developer brother.</li>
<li>Lessons learned to stay sane during quarantine: getting dressed.</li>
<li>Extra tasks remote developers are having to do remotely; becoming project managers.</li>
<li>The difference between complaints and legitimate critiques of work systems.</li>
<li>Dave’s amazing remote communications setup 40 miles north of Dallas.</li>
<li>The situation where Dave is with regard to coronavirus and freedom.</li>
<li>How COBOL has not become too broad despite not using libraries.</li>
<li>The history of programming languages that Dave teaches.</li>
<li>That PDP-11 runs better emulated in Javascript than in its original hardware.</li>
<li>A drawback of modern development: not understanding hardware.</li>
<li>How Dave is digitizing his SMU courses due to teaching them online at present.</li>
<li>All the effort Dave puts into grading his students’ exercises.</li>
<li>Issues that coding is not taught rigorously enough; students can’t ‘program’.</li>
<li>How well the human race is doing to mobilize en masse right now.</li>
<li>Whether tech caused the crisis and humanity could manage this crisis 100 years ago.</li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>Eric Oestrich — <a href="https://oestrich.org/" rel="nofollow">https://oestrich.org/</a><br>
Justus Eapen — <a href="https://www.linkedin.com/in/justuseapen/" rel="nofollow">https://www.linkedin.com/in/justuseapen/</a><br>
Amos King — <a href="https://www.linkedin.com/in/amosking/" rel="nofollow">https://www.linkedin.com/in/amosking/</a><br>
Chris Keathley — <a href="https://keathley.io/" rel="nofollow">https://keathley.io/</a><br>
Anna Neyzberg — <a href="https://www.linkedin.com/in/anna-neyzberg-93545316/" rel="nofollow">https://www.linkedin.com/in/anna-neyzberg-93545316/</a><br>
Elixir Outlaws — <a href="https://elixiroutlaws.com/" rel="nofollow">https://elixiroutlaws.com/</a><br>
NFL Draft — <a href="https://www.nfl.com/draft/home" rel="nofollow">https://www.nfl.com/draft/home</a><br>
Modge Podge — <a href="https://www.amazon.com/Mod-Podge-Waterbase-16-Ounce-CS11302/dp/B001IKES5O" rel="nofollow">https://www.amazon.com/Mod-Podge-Waterbase-16-Ounce-CS11302/dp/B001IKES5O</a><br>
Star Trek — <a href="https://intl.startrek.com/" rel="nofollow">https://intl.startrek.com/</a><br>
Sublime — <a href="https://www.sublimetext.com/" rel="nofollow">https://www.sublimetext.com/</a><br>
VSCode — <a href="https://code.visualstudio.com/" rel="nofollow">https://code.visualstudio.com/</a><br>
Binary Noggin — <a href="https://binarynoggin.com/" rel="nofollow">https://binarynoggin.com/</a><br>
Connor Rigby — <a href="https://binarynoggin.com/author/connor/" rel="nofollow">https://binarynoggin.com/author/connor/</a><br>
ElixirBridge — <a href="http://elixirbridge.org/" rel="nofollow">http://elixirbridge.org/</a><br>
Nico Piderman — <a href="https://github.com/sneako" rel="nofollow">https://github.com/sneako</a><br>
Quinn Wilton — <a href="https://github.com/QuinnWilton" rel="nofollow">https://github.com/QuinnWilton</a><br>
Jose Valim — <a href="https://github.com/josevalim" rel="nofollow">https://github.com/josevalim</a><br>
Finch Library— <a href="https://github.com/keathley/finch" rel="nofollow">https://github.com/keathley/finch</a><br>
Paul Schoenfelder — <a href="https://www.linkedin.com/in/gotbones/" rel="nofollow">https://www.linkedin.com/in/gotbones/</a><br>
Ockam — <a href="https://www.ockam.io/" rel="nofollow">https://www.ockam.io/</a><br>
Lumen — <a href="https://github.com/lumen/lumen" rel="nofollow">https://github.com/lumen/lumen</a><br>
Timex — <a href="https://github.com/bitwalker/timex" rel="nofollow">https://github.com/bitwalker/timex</a><br>
Sophie DeBenedetto — <a href="https://www.linkedin.com/in/sophiedebenedetto/" rel="nofollow">https://www.linkedin.com/in/sophiedebenedetto/</a><br>
Meryl Dakin — <a href="https://github.com/meryldakin" rel="nofollow">https://github.com/meryldakin</a><br>
Flatiron — <a href="https://flatironschool.com/" rel="nofollow">https://flatironschool.com/</a><br>
Sophie DeBenedetto’s GitHub Post — <a href="https://www.thegreatcodeadventure.com/my-long-distance-relationship-with-github/" rel="nofollow">https://www.thegreatcodeadventure.com/my-long-distance-relationship-with-github/</a><br>
Elixir School — <a href="https://elixirschool.com/en/" rel="nofollow">https://elixirschool.com/en/</a><br>
Meryl Dakin’s Watch if Your Dare Episode — <a href="https://www.stitcher.com/podcast/watch-if-you-dare/e/68798094?autoplay=true" rel="nofollow">https://www.stitcher.com/podcast/watch-if-you-dare/e/68798094?autoplay=true</a><br>
Luigi’s Mansion — <a href="https://www.nintendo.co.za/Games/Nintendo-Switch/Luigi-s-Mansion-3-1437312.html" rel="nofollow">https://www.nintendo.co.za/Games/Nintendo-Switch/Luigi-s-Mansion-3-1437312.html</a><br>
Dave Thomas — <a href="https://pragdave.me/" rel="nofollow">https://pragdave.me/</a><br>
COBOL — <a href="https://www.tutorialspoint.com/cobol/index.htm" rel="nofollow">https://www.tutorialspoint.com/cobol/index.htm</a><br>
PD-11 — <a href="https://history-computer.com/ModernComputer/Electronic/PDP-11.html" rel="nofollow">https://history-computer.com/ModernComputer/Electronic/PDP-11.html</a><br>
SMU — <a href="https://www.smu.edu/lyle" rel="nofollow">https://www.smu.edu/lyle</a><br>
Elixir Wizards Podcast — <a href="https://podcast.smartlogic.io" rel="nofollow">https://podcast.smartlogic.io</a><br>
SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> </p><p>Special Guests: Amos King, Anna Neyzberg, Chris Keathley, Dave Thomas, Meryl Dakin, Paul Schoenfelder, and Sophie DeBenedetto.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Betweenisode Part 1: Saša Jurić, Bruce and Maggie Tate, James Edward Gray II, Jim and Chris Freeze, and Frank Hunleth</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/s4e0a-betweenisode-part-1</link>
      <guid isPermaLink="false">1b54b0cf-efaa-46fa-90b5-e40411069750</guid>
      <pubDate>Tue, 21 Apr 2020 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/1b54b0cf-efaa-46fa-90b5-e40411069750.mp3" length="76736442" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>4</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>The world has changed so much since the end of season 3, that we thought we’d put together a special Betweenisode to tide you over until Season 4 launches. In this episode, we talk to several friends and respected members of the Elixir community, about how they’re coping and tips they have for retaining some normalcy in your life if you’re suddenly having to work from home. </itunes:subtitle>
      <itunes:duration>53:16</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>The world has changed so much since the end of season 3, that we thought we’d put together a special Betweenisode to tide you over until Season 4 launches. In this episode, we talk to several friends and respected members of the Elixir community, about how they’re coping and tips they have for retaining some normalcy in your life if you’re suddenly having to work from home. Our first guest, Saša Jurić, of Very Big Things, and author of the unrivaled Elixir in Action, has had the privilege of working from home for several years. He shares the importance of having a routine, connecting with people, and why you should get out of your pajamas and into some real clothes when you work. He also shares what it’s been like in his home city of Zagreb, and how previous devastating events have in some way prepared him for what’s currently happening. Bruce and Maggie Tate of Groxio, an educational platform to learn languages, also join us. Maggie shares more on her culinary adventures, and the importance of having a definite start and finish time to your day. Bruce talks about some of the professional projects he’s working on, and why he believes it’s crucial to tackle difficult technical skills outside of developing. Other guests include James Edward Gray II, who shares more about the incredible way he and his daughter have been bonding, Jim Freeze, founder of ElixirConf, and his son Chris, who share some of the benefits of working from home, and show us how to see the silver lining during this difficult time, and Frank Hunleth, of Nerves Project, who talks about what he’s up to. There have certainly been more changes in the world than we could have anticipated, so it was wonderful to catch up and see how people in our community have been coping. Be sure to tune in today!
Key Points From This Episode:
Learn what’s happening in Saša’s home city, Zagreb, and what he’s doing to keep busy.
Saša’s advice for coping during the pandemic and preventing information overload.
The transition to remote work in Saša’s company and the impacts it’s had on workload.
How Saša started working remotely and the main lessons he has learned from doing it.
What Saša believes the future of virtual events and conferences will be.
Find out how Bruce and Maggie are dealing with these strange times. 
Groxio’s mission in terms of learning and Bruce and Maggie’s tip for working from home.
Current projects that Bruce and Maggie are working on both at Groxio and personally.
What’s in the pipeline with Groxio’s Elixir material and Bruce and Maggie’s plugs.
How James is holding up and his take on the COBOL debacle. 
Find out what motivated James to transition from Ruby to Elixir and what it’s been like. 
James’s experience working from home and tips for people who are new to it.
Specific versus general solutions: The difference and how James thinks we can tackle this.
Hear James’s ExVenture plug, which is Eric’s project.
Jim’s and Chris’s experience of the lockdown and the silver linings that have come from it
Find out Jim and Chris’s necessities for working from home and being productive. 
Jim’s plans for ElixirConf for this year and 2021, and Chris and Jim’s final plug. 
Frank’s tips for working from home and his product plugs. 
Links Mentioned in Today’s Episode:
Saša Jurić on Twitter — https://twitter.com/sasajuric
Saša Jurić on LinkedIn — https://hr.linkedin.com/in/sa%C5%A1a-juri%C4%87-21b23186
Erlangelist — https://www.theerlangelist.com/
Very Big Things — https://verybigthings.com/
Elixir in Action — https://www.manning.com/books/elixir-in-action-second-edition
Bruce Tate — https://www.linkedin.com/in/bruce-tate-a836b
Bruce Tate on Twitter — https://twitter.com/redrapids
Maggie Tate on LinkedIn — https://www.linkedin.com/in/maggie-tate-230234171
Groxio — https://grox.io/
Programmer Passport — https://elixirforum.com/t/programmer-passport-grox-io-pragprog/28253
Lonestar Elixir — https://lonestarelixir.com/
James Edward Gray II — https://twitter.com/JEG2
COBOL — https://www.tutorialspoint.com/cobol/index.htm
Gray Inc — http://graysoftinc.com/
Programming Erlang — https://pragprog.com/book/jaerlang2/programming-erlang
Nathan Long — https://twitter.com/sleeplessgeek
POV-Ray — http://www.povray.org/
Elixir Wizards S02 Eric on ExVenture — https://podcast.smartlogic.io/season-two-oestrich
Jesse Link — http://www.jesselink.com/
Jim Freeze on Twitter— https://twitter.com/jimfreeze
ElixirConf — https://elixirconf.com/2020
Chris Freeze on Twitter— https://twitter.com/chrisfreeze_
Tesla Car Lot — https://teslacarlot.com/
David Antaramian — https://www.linkedin.com/in/davidantaramian/
PepsiCo — https://www.pepsico.com/
Nerves Project — https://www.nerves-project.org/
Frank Hunleth on Twitter — https://twitter.com/fhunleth
SmartLogic — https://smartlogic.io/  Special Guests: Bruce Tate, Chris Freeze, Dr. Jim Freeze, Frank Hunleth, James Gray, Maggie Tate, and Saša Jurić.
</description>
      <itunes:keywords>elixir, phoenix</itunes:keywords>
      <content:encoded><![CDATA[
        <p>The world has changed so much since the end of season 3, that we thought we’d put together a special Betweenisode to tide you over until Season 4 launches. In this episode, we talk to several friends and respected members of the Elixir community, about how they’re coping and tips they have for retaining some normalcy in your life if you’re suddenly having to work from home. Our first guest, Saša Jurić, of Very Big Things, and author of the unrivaled Elixir in Action, has had the privilege of working from home for several years. He shares the importance of having a routine, connecting with people, and why you should get out of your pajamas and into some real clothes when you work. He also shares what it’s been like in his home city of Zagreb, and how previous devastating events have in some way prepared him for what’s currently happening. Bruce and Maggie Tate of Groxio, an educational platform to learn languages, also join us. Maggie shares more on her culinary adventures, and the importance of having a definite start and finish time to your day. Bruce talks about some of the professional projects he’s working on, and why he believes it’s crucial to tackle difficult technical skills outside of developing. Other guests include James Edward Gray II, who shares more about the incredible way he and his daughter have been bonding, Jim Freeze, founder of ElixirConf, and his son Chris, who share some of the benefits of working from home, and show us how to see the silver lining during this difficult time, and Frank Hunleth, of Nerves Project, who talks about what he’s up to. There have certainly been more changes in the world than we could have anticipated, so it was wonderful to catch up and see how people in our community have been coping. Be sure to tune in today!</p>

<p>Key Points From This Episode:</p>

<ul>
<li>Learn what’s happening in Saša’s home city, Zagreb, and what he’s doing to keep busy.</li>
<li>Saša’s advice for coping during the pandemic and preventing information overload.</li>
<li>The transition to remote work in Saša’s company and the impacts it’s had on workload.</li>
<li>How Saša started working remotely and the main lessons he has learned from doing it.</li>
<li>What Saša believes the future of virtual events and conferences will be.</li>
<li>Find out how Bruce and Maggie are dealing with these strange times. </li>
<li>Groxio’s mission in terms of learning and Bruce and Maggie’s tip for working from home.</li>
<li>Current projects that Bruce and Maggie are working on both at Groxio and personally.</li>
<li>What’s in the pipeline with Groxio’s Elixir material and Bruce and Maggie’s plugs.</li>
<li>How James is holding up and his take on the COBOL debacle. </li>
<li>Find out what motivated James to transition from Ruby to Elixir and what it’s been like. </li>
<li>James’s experience working from home and tips for people who are new to it.</li>
<li>Specific versus general solutions: The difference and how James thinks we can tackle this.</li>
<li>Hear James’s ExVenture plug, which is Eric’s project.</li>
<li>Jim’s and Chris’s experience of the lockdown and the silver linings that have come from it</li>
<li>Find out Jim and Chris’s necessities for working from home and being productive. </li>
<li>Jim’s plans for ElixirConf for this year and 2021, and Chris and Jim’s final plug. </li>
<li>Frank’s tips for working from home and his product plugs. </li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>Saša Jurić on Twitter — <a href="https://twitter.com/sasajuric" rel="nofollow">https://twitter.com/sasajuric</a><br>
Saša Jurić on LinkedIn — <a href="https://hr.linkedin.com/in/sa%C5%A1a-juri%C4%87-21b23186" rel="nofollow">https://hr.linkedin.com/in/sa%C5%A1a-juri%C4%87-21b23186</a><br>
Erlangelist — <a href="https://www.theerlangelist.com/" rel="nofollow">https://www.theerlangelist.com/</a><br>
Very Big Things — <a href="https://verybigthings.com/" rel="nofollow">https://verybigthings.com/</a><br>
Elixir in Action — <a href="https://www.manning.com/books/elixir-in-action-second-edition" rel="nofollow">https://www.manning.com/books/elixir-in-action-second-edition</a><br>
Bruce Tate — <a href="https://www.linkedin.com/in/bruce-tate-a836b" rel="nofollow">https://www.linkedin.com/in/bruce-tate-a836b</a><br>
Bruce Tate on Twitter — <a href="https://twitter.com/redrapids" rel="nofollow">https://twitter.com/redrapids</a><br>
Maggie Tate on LinkedIn — <a href="https://www.linkedin.com/in/maggie-tate-230234171" rel="nofollow">https://www.linkedin.com/in/maggie-tate-230234171</a><br>
Groxio — <a href="https://grox.io/" rel="nofollow">https://grox.io/</a><br>
Programmer Passport — <a href="https://elixirforum.com/t/programmer-passport-grox-io-pragprog/28253" rel="nofollow">https://elixirforum.com/t/programmer-passport-grox-io-pragprog/28253</a><br>
Lonestar Elixir — <a href="https://lonestarelixir.com/" rel="nofollow">https://lonestarelixir.com/</a><br>
James Edward Gray II — <a href="https://twitter.com/JEG2" rel="nofollow">https://twitter.com/JEG2</a><br>
COBOL — <a href="https://www.tutorialspoint.com/cobol/index.htm" rel="nofollow">https://www.tutorialspoint.com/cobol/index.htm</a><br>
Gray Inc — <a href="http://graysoftinc.com/" rel="nofollow">http://graysoftinc.com/</a><br>
Programming Erlang — <a href="https://pragprog.com/book/jaerlang2/programming-erlang" rel="nofollow">https://pragprog.com/book/jaerlang2/programming-erlang</a><br>
Nathan Long — <a href="https://twitter.com/sleeplessgeek" rel="nofollow">https://twitter.com/sleeplessgeek</a><br>
POV-Ray — <a href="http://www.povray.org/" rel="nofollow">http://www.povray.org/</a><br>
Elixir Wizards S02 Eric on ExVenture — <a href="https://podcast.smartlogic.io/season-two-oestrich" rel="nofollow">https://podcast.smartlogic.io/season-two-oestrich</a><br>
Jesse Link — <a href="http://www.jesselink.com/" rel="nofollow">http://www.jesselink.com/</a><br>
Jim Freeze on Twitter— <a href="https://twitter.com/jimfreeze" rel="nofollow">https://twitter.com/jimfreeze</a><br>
ElixirConf — <a href="https://elixirconf.com/2020" rel="nofollow">https://elixirconf.com/2020</a><br>
Chris Freeze on Twitter— <a href="https://twitter.com/chrisfreeze_" rel="nofollow">https://twitter.com/chrisfreeze_</a><br>
Tesla Car Lot — <a href="https://teslacarlot.com/" rel="nofollow">https://teslacarlot.com/</a><br>
David Antaramian — <a href="https://www.linkedin.com/in/davidantaramian/" rel="nofollow">https://www.linkedin.com/in/davidantaramian/</a><br>
PepsiCo — <a href="https://www.pepsico.com/" rel="nofollow">https://www.pepsico.com/</a><br>
Nerves Project — <a href="https://www.nerves-project.org/" rel="nofollow">https://www.nerves-project.org/</a><br>
Frank Hunleth on Twitter — <a href="https://twitter.com/fhunleth" rel="nofollow">https://twitter.com/fhunleth</a><br>
SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> </p><p>Special Guests: Bruce Tate, Chris Freeze, Dr. Jim Freeze, Frank Hunleth, James Gray, Maggie Tate, and Saša Jurić.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>The world has changed so much since the end of season 3, that we thought we’d put together a special Betweenisode to tide you over until Season 4 launches. In this episode, we talk to several friends and respected members of the Elixir community, about how they’re coping and tips they have for retaining some normalcy in your life if you’re suddenly having to work from home. Our first guest, Saša Jurić, of Very Big Things, and author of the unrivaled Elixir in Action, has had the privilege of working from home for several years. He shares the importance of having a routine, connecting with people, and why you should get out of your pajamas and into some real clothes when you work. He also shares what it’s been like in his home city of Zagreb, and how previous devastating events have in some way prepared him for what’s currently happening. Bruce and Maggie Tate of Groxio, an educational platform to learn languages, also join us. Maggie shares more on her culinary adventures, and the importance of having a definite start and finish time to your day. Bruce talks about some of the professional projects he’s working on, and why he believes it’s crucial to tackle difficult technical skills outside of developing. Other guests include James Edward Gray II, who shares more about the incredible way he and his daughter have been bonding, Jim Freeze, founder of ElixirConf, and his son Chris, who share some of the benefits of working from home, and show us how to see the silver lining during this difficult time, and Frank Hunleth, of Nerves Project, who talks about what he’s up to. There have certainly been more changes in the world than we could have anticipated, so it was wonderful to catch up and see how people in our community have been coping. Be sure to tune in today!</p>

<p>Key Points From This Episode:</p>

<ul>
<li>Learn what’s happening in Saša’s home city, Zagreb, and what he’s doing to keep busy.</li>
<li>Saša’s advice for coping during the pandemic and preventing information overload.</li>
<li>The transition to remote work in Saša’s company and the impacts it’s had on workload.</li>
<li>How Saša started working remotely and the main lessons he has learned from doing it.</li>
<li>What Saša believes the future of virtual events and conferences will be.</li>
<li>Find out how Bruce and Maggie are dealing with these strange times. </li>
<li>Groxio’s mission in terms of learning and Bruce and Maggie’s tip for working from home.</li>
<li>Current projects that Bruce and Maggie are working on both at Groxio and personally.</li>
<li>What’s in the pipeline with Groxio’s Elixir material and Bruce and Maggie’s plugs.</li>
<li>How James is holding up and his take on the COBOL debacle. </li>
<li>Find out what motivated James to transition from Ruby to Elixir and what it’s been like. </li>
<li>James’s experience working from home and tips for people who are new to it.</li>
<li>Specific versus general solutions: The difference and how James thinks we can tackle this.</li>
<li>Hear James’s ExVenture plug, which is Eric’s project.</li>
<li>Jim’s and Chris’s experience of the lockdown and the silver linings that have come from it</li>
<li>Find out Jim and Chris’s necessities for working from home and being productive. </li>
<li>Jim’s plans for ElixirConf for this year and 2021, and Chris and Jim’s final plug. </li>
<li>Frank’s tips for working from home and his product plugs. </li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>Saša Jurić on Twitter — <a href="https://twitter.com/sasajuric" rel="nofollow">https://twitter.com/sasajuric</a><br>
Saša Jurić on LinkedIn — <a href="https://hr.linkedin.com/in/sa%C5%A1a-juri%C4%87-21b23186" rel="nofollow">https://hr.linkedin.com/in/sa%C5%A1a-juri%C4%87-21b23186</a><br>
Erlangelist — <a href="https://www.theerlangelist.com/" rel="nofollow">https://www.theerlangelist.com/</a><br>
Very Big Things — <a href="https://verybigthings.com/" rel="nofollow">https://verybigthings.com/</a><br>
Elixir in Action — <a href="https://www.manning.com/books/elixir-in-action-second-edition" rel="nofollow">https://www.manning.com/books/elixir-in-action-second-edition</a><br>
Bruce Tate — <a href="https://www.linkedin.com/in/bruce-tate-a836b" rel="nofollow">https://www.linkedin.com/in/bruce-tate-a836b</a><br>
Bruce Tate on Twitter — <a href="https://twitter.com/redrapids" rel="nofollow">https://twitter.com/redrapids</a><br>
Maggie Tate on LinkedIn — <a href="https://www.linkedin.com/in/maggie-tate-230234171" rel="nofollow">https://www.linkedin.com/in/maggie-tate-230234171</a><br>
Groxio — <a href="https://grox.io/" rel="nofollow">https://grox.io/</a><br>
Programmer Passport — <a href="https://elixirforum.com/t/programmer-passport-grox-io-pragprog/28253" rel="nofollow">https://elixirforum.com/t/programmer-passport-grox-io-pragprog/28253</a><br>
Lonestar Elixir — <a href="https://lonestarelixir.com/" rel="nofollow">https://lonestarelixir.com/</a><br>
James Edward Gray II — <a href="https://twitter.com/JEG2" rel="nofollow">https://twitter.com/JEG2</a><br>
COBOL — <a href="https://www.tutorialspoint.com/cobol/index.htm" rel="nofollow">https://www.tutorialspoint.com/cobol/index.htm</a><br>
Gray Inc — <a href="http://graysoftinc.com/" rel="nofollow">http://graysoftinc.com/</a><br>
Programming Erlang — <a href="https://pragprog.com/book/jaerlang2/programming-erlang" rel="nofollow">https://pragprog.com/book/jaerlang2/programming-erlang</a><br>
Nathan Long — <a href="https://twitter.com/sleeplessgeek" rel="nofollow">https://twitter.com/sleeplessgeek</a><br>
POV-Ray — <a href="http://www.povray.org/" rel="nofollow">http://www.povray.org/</a><br>
Elixir Wizards S02 Eric on ExVenture — <a href="https://podcast.smartlogic.io/season-two-oestrich" rel="nofollow">https://podcast.smartlogic.io/season-two-oestrich</a><br>
Jesse Link — <a href="http://www.jesselink.com/" rel="nofollow">http://www.jesselink.com/</a><br>
Jim Freeze on Twitter— <a href="https://twitter.com/jimfreeze" rel="nofollow">https://twitter.com/jimfreeze</a><br>
ElixirConf — <a href="https://elixirconf.com/2020" rel="nofollow">https://elixirconf.com/2020</a><br>
Chris Freeze on Twitter— <a href="https://twitter.com/chrisfreeze_" rel="nofollow">https://twitter.com/chrisfreeze_</a><br>
Tesla Car Lot — <a href="https://teslacarlot.com/" rel="nofollow">https://teslacarlot.com/</a><br>
David Antaramian — <a href="https://www.linkedin.com/in/davidantaramian/" rel="nofollow">https://www.linkedin.com/in/davidantaramian/</a><br>
PepsiCo — <a href="https://www.pepsico.com/" rel="nofollow">https://www.pepsico.com/</a><br>
Nerves Project — <a href="https://www.nerves-project.org/" rel="nofollow">https://www.nerves-project.org/</a><br>
Frank Hunleth on Twitter — <a href="https://twitter.com/fhunleth" rel="nofollow">https://twitter.com/fhunleth</a><br>
SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> </p><p>Special Guests: Bruce Tate, Chris Freeze, Dr. Jim Freeze, Frank Hunleth, James Gray, Maggie Tate, and Saša Jurić.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Season Three Wrap and Remote Work Tips</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/s3e19-season-wrap</link>
      <guid isPermaLink="false">36812119-eef7-40f5-8aba-3fd7b3bebb09</guid>
      <pubDate>Thu, 02 Apr 2020 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/36812119-eef7-40f5-8aba-3fd7b3bebb09.mp3" length="73681004" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>3</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Todd Resudek joins us to take a look into the current contexts and home lives many of us find ourselves in today, offering top tips for working remotely from home during these challenging times. The lockdowns have forced many of us to reflect. To reflect on our lives, our work, what we’re grateful for, and in this case, our epic last season of Elixir Wizards!</itunes:subtitle>
      <itunes:duration>50:45</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>In this episode, we take a look into the current contexts and home lives many of us find ourselves in today, offering top tips for working remotely from home during these challenging times. The lockdowns have caused many of us to reflect. To reflect on our lives, our work, what we’re grateful for, and in this case, our epic last season of Elixir Wizards! Here, we take you through the highlights, the lowlights, our biggest lessons, our juiciest debates, and what you can expect for Season 4 – in sickness and in health. Stay safe, listen, and enjoy!
Key Points from This Episode:
The importance of demarcating your workspace, especially when the kids are home!
Always put your pants on: Why sticking to your morning schedule helps productivity.
Ways to eliminate the potential for distraction when working from home.
How working from home is enabling programmers to see one another’s human side.
Taking a break from conferences, cognition, and learning how to birth a baby Oestrich.
Third dimensions and entering the tangential learning plane with Brooklyn Zelenka.
The Surprise Toddcast: Why the improvised episode was a hit.
What it was like interviewing entrepreneurial couple, Bruce &amp; Maggie Tate.
Remember the time the father and son roasted each other on the podcast mic?
Why your podcast audience wants to know your guests on a more personal level.
A recap of the numbers from Season 1-3 and the 40,000+ Elixir Wizards downloads.
A sneak peek into the new Elixir Wizards theme for the upcoming Season 4.
Lib versus Web and other essential tips for the lazy Phoenix users out there.
Why we need a whole season on application architecture and one-letter module names.
The debate sparked by the disagreement between Chris Keathley and Brooklyn Zelenka.
Hackers, painters, Paul Graham, and the argument made in favor of dynamic typing.
Find out more about Sophie and Meryl’s epic takeover of Elixir Wizards!
Links Mentioned in Today’s Episode:
SmartLogic — https://smartlogic.io/ 
Eric Oestrich — https://twitter.com/ericoestrich?lang=en
Justus Eapen — https://twitter.com/justuseapen
Brooklyn Zelenka on Witchcraft — https://podcast.smartlogic.io/season-two-zelenka
Brooklyn Zelenka — https://twitter.com/expede?lang=en
Bruce and Maggie Tate from Groxio on Training — https://podcast.smartlogic.io/s3e8-groxio
Saša Jurić — https://twitter.com/sasajuric
Bonus Toddcast &amp; Lonestar Preview — https://podcast.smartlogic.io/s3e14-bonus-toddcast-and-lonestar-preview
The Lonestar Lunchisode — https://podcast.smartlogic.io/s3-lonestar-lunchisode-2020
Dave Thomas — https://www.davethomas.net/talks_index.html
Bonus Episode: Outlaws and The Wizards — https://podcast.smartlogic.io/s3-bonus-outlaws-and-wizards
Chris Keathley — https://twitter.com/ChrisKeathley
Paul Graham — http://www.paulgraham.com/
Sean Lewis from Divvy on Performance, Hiring and Training — https://podcast.smartlogic.io/s3e12-divvy
Devin C. Estes — https://twitter.com/devoncestes?lang=en
Muzak — https://www.kickstarter.com/projects/devonestes/muzak-a-mutation-testing-library-for-elixir-and-erlang Special Guest: Todd Resudek.
</description>
      <itunes:keywords>elixir,phoenix,erlang</itunes:keywords>
      <content:encoded><![CDATA[
        <p>In this episode, we take a look into the current contexts and home lives many of us find ourselves in today, offering top tips for working remotely from home during these challenging times. The lockdowns have caused many of us to reflect. To reflect on our lives, our work, what we’re grateful for, and in this case, our epic last season of Elixir Wizards! Here, we take you through the highlights, the lowlights, our biggest lessons, our juiciest debates, and what you can expect for Season 4 – in sickness and in health. Stay safe, listen, and enjoy!</p>

<p>Key Points from This Episode:</p>

<ul>
<li>The importance of demarcating your workspace, especially when the kids are home!</li>
<li>Always put your pants on: Why sticking to your morning schedule helps productivity.</li>
<li>Ways to eliminate the potential for distraction when working from home.</li>
<li>How working from home is enabling programmers to see one another’s human side.</li>
<li>Taking a break from conferences, cognition, and learning how to birth a baby Oestrich.</li>
<li>Third dimensions and entering the tangential learning plane with Brooklyn Zelenka.</li>
<li>The Surprise Toddcast: Why the improvised episode was a hit.</li>
<li>What it was like interviewing entrepreneurial couple, Bruce &amp; Maggie Tate.</li>
<li>Remember the time the father and son roasted each other on the podcast mic?</li>
<li>Why your podcast audience wants to know your guests on a more personal level.</li>
<li>A recap of the numbers from Season 1-3 and the 40,000+ Elixir Wizards downloads.</li>
<li>A sneak peek into the new Elixir Wizards theme for the upcoming Season 4.</li>
<li>Lib versus Web and other essential tips for the lazy Phoenix users out there.</li>
<li>Why we need a whole season on application architecture and one-letter module names.</li>
<li>The debate sparked by the disagreement between Chris Keathley and Brooklyn Zelenka.</li>
<li>Hackers, painters, Paul Graham, and the argument made in favor of dynamic typing.</li>
<li>Find out more about Sophie and Meryl’s epic takeover of Elixir Wizards!</li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
Eric Oestrich — <a href="https://twitter.com/ericoestrich?lang=en" rel="nofollow">https://twitter.com/ericoestrich?lang=en</a><br>
Justus Eapen — <a href="https://twitter.com/justuseapen" rel="nofollow">https://twitter.com/justuseapen</a><br>
Brooklyn Zelenka on Witchcraft — <a href="https://podcast.smartlogic.io/season-two-zelenka" rel="nofollow">https://podcast.smartlogic.io/season-two-zelenka</a><br>
Brooklyn Zelenka — <a href="https://twitter.com/expede?lang=en" rel="nofollow">https://twitter.com/expede?lang=en</a><br>
Bruce and Maggie Tate from Groxio on Training — <a href="https://podcast.smartlogic.io/s3e8-groxio" rel="nofollow">https://podcast.smartlogic.io/s3e8-groxio</a><br>
Saša Jurić — <a href="https://twitter.com/sasajuric" rel="nofollow">https://twitter.com/sasajuric</a><br>
Bonus Toddcast &amp; Lonestar Preview — <a href="https://podcast.smartlogic.io/s3e14-bonus-toddcast-and-lonestar-preview" rel="nofollow">https://podcast.smartlogic.io/s3e14-bonus-toddcast-and-lonestar-preview</a><br>
The Lonestar Lunchisode — <a href="https://podcast.smartlogic.io/s3-lonestar-lunchisode-2020" rel="nofollow">https://podcast.smartlogic.io/s3-lonestar-lunchisode-2020</a><br>
Dave Thomas — <a href="https://www.davethomas.net/talks_index.html" rel="nofollow">https://www.davethomas.net/talks_index.html</a><br>
Bonus Episode: Outlaws and The Wizards — <a href="https://podcast.smartlogic.io/s3-bonus-outlaws-and-wizards" rel="nofollow">https://podcast.smartlogic.io/s3-bonus-outlaws-and-wizards</a><br>
Chris Keathley — <a href="https://twitter.com/ChrisKeathley" rel="nofollow">https://twitter.com/ChrisKeathley</a><br>
Paul Graham — <a href="http://www.paulgraham.com/" rel="nofollow">http://www.paulgraham.com/</a><br>
Sean Lewis from Divvy on Performance, Hiring and Training — <a href="https://podcast.smartlogic.io/s3e12-divvy" rel="nofollow">https://podcast.smartlogic.io/s3e12-divvy</a><br>
Devin C. Estes — <a href="https://twitter.com/devoncestes?lang=en" rel="nofollow">https://twitter.com/devoncestes?lang=en</a><br>
Muzak — <a href="https://www.kickstarter.com/projects/devonestes/muzak-a-mutation-testing-library-for-elixir-and-erlang" rel="nofollow">https://www.kickstarter.com/projects/devonestes/muzak-a-mutation-testing-library-for-elixir-and-erlang</a></p><p>Special Guest: Todd Resudek.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>In this episode, we take a look into the current contexts and home lives many of us find ourselves in today, offering top tips for working remotely from home during these challenging times. The lockdowns have caused many of us to reflect. To reflect on our lives, our work, what we’re grateful for, and in this case, our epic last season of Elixir Wizards! Here, we take you through the highlights, the lowlights, our biggest lessons, our juiciest debates, and what you can expect for Season 4 – in sickness and in health. Stay safe, listen, and enjoy!</p>

<p>Key Points from This Episode:</p>

<ul>
<li>The importance of demarcating your workspace, especially when the kids are home!</li>
<li>Always put your pants on: Why sticking to your morning schedule helps productivity.</li>
<li>Ways to eliminate the potential for distraction when working from home.</li>
<li>How working from home is enabling programmers to see one another’s human side.</li>
<li>Taking a break from conferences, cognition, and learning how to birth a baby Oestrich.</li>
<li>Third dimensions and entering the tangential learning plane with Brooklyn Zelenka.</li>
<li>The Surprise Toddcast: Why the improvised episode was a hit.</li>
<li>What it was like interviewing entrepreneurial couple, Bruce &amp; Maggie Tate.</li>
<li>Remember the time the father and son roasted each other on the podcast mic?</li>
<li>Why your podcast audience wants to know your guests on a more personal level.</li>
<li>A recap of the numbers from Season 1-3 and the 40,000+ Elixir Wizards downloads.</li>
<li>A sneak peek into the new Elixir Wizards theme for the upcoming Season 4.</li>
<li>Lib versus Web and other essential tips for the lazy Phoenix users out there.</li>
<li>Why we need a whole season on application architecture and one-letter module names.</li>
<li>The debate sparked by the disagreement between Chris Keathley and Brooklyn Zelenka.</li>
<li>Hackers, painters, Paul Graham, and the argument made in favor of dynamic typing.</li>
<li>Find out more about Sophie and Meryl’s epic takeover of Elixir Wizards!</li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
Eric Oestrich — <a href="https://twitter.com/ericoestrich?lang=en" rel="nofollow">https://twitter.com/ericoestrich?lang=en</a><br>
Justus Eapen — <a href="https://twitter.com/justuseapen" rel="nofollow">https://twitter.com/justuseapen</a><br>
Brooklyn Zelenka on Witchcraft — <a href="https://podcast.smartlogic.io/season-two-zelenka" rel="nofollow">https://podcast.smartlogic.io/season-two-zelenka</a><br>
Brooklyn Zelenka — <a href="https://twitter.com/expede?lang=en" rel="nofollow">https://twitter.com/expede?lang=en</a><br>
Bruce and Maggie Tate from Groxio on Training — <a href="https://podcast.smartlogic.io/s3e8-groxio" rel="nofollow">https://podcast.smartlogic.io/s3e8-groxio</a><br>
Saša Jurić — <a href="https://twitter.com/sasajuric" rel="nofollow">https://twitter.com/sasajuric</a><br>
Bonus Toddcast &amp; Lonestar Preview — <a href="https://podcast.smartlogic.io/s3e14-bonus-toddcast-and-lonestar-preview" rel="nofollow">https://podcast.smartlogic.io/s3e14-bonus-toddcast-and-lonestar-preview</a><br>
The Lonestar Lunchisode — <a href="https://podcast.smartlogic.io/s3-lonestar-lunchisode-2020" rel="nofollow">https://podcast.smartlogic.io/s3-lonestar-lunchisode-2020</a><br>
Dave Thomas — <a href="https://www.davethomas.net/talks_index.html" rel="nofollow">https://www.davethomas.net/talks_index.html</a><br>
Bonus Episode: Outlaws and The Wizards — <a href="https://podcast.smartlogic.io/s3-bonus-outlaws-and-wizards" rel="nofollow">https://podcast.smartlogic.io/s3-bonus-outlaws-and-wizards</a><br>
Chris Keathley — <a href="https://twitter.com/ChrisKeathley" rel="nofollow">https://twitter.com/ChrisKeathley</a><br>
Paul Graham — <a href="http://www.paulgraham.com/" rel="nofollow">http://www.paulgraham.com/</a><br>
Sean Lewis from Divvy on Performance, Hiring and Training — <a href="https://podcast.smartlogic.io/s3e12-divvy" rel="nofollow">https://podcast.smartlogic.io/s3e12-divvy</a><br>
Devin C. Estes — <a href="https://twitter.com/devoncestes?lang=en" rel="nofollow">https://twitter.com/devoncestes?lang=en</a><br>
Muzak — <a href="https://www.kickstarter.com/projects/devonestes/muzak-a-mutation-testing-library-for-elixir-and-erlang" rel="nofollow">https://www.kickstarter.com/projects/devonestes/muzak-a-mutation-testing-library-for-elixir-and-erlang</a></p><p>Special Guest: Todd Resudek.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Sophie and Meryl Takeover: Sean Callan and Steven Nunez on Elixir Education</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/s3e18-nunez-callan</link>
      <guid isPermaLink="false">19db794e-cf88-4320-969b-ea0ccbe0949d</guid>
      <pubDate>Thu, 26 Mar 2020 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/19db794e-cf88-4320-969b-ea0ccbe0949d.mp3" length="78219006" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>3</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Today we have special guest hosts: Meryl Dakin of Frame.io and Sophie DeBenedetto of Github, and they welcome Steven Nunez, Staff Engineer at the Flatiron School, and Sean Callan, creator of Elixir School, to the show. Where some would see the fact that Elixir doesn’t have a ton of readily available answers out there as a restriction to mastering the language, our guests argue that this is the best educational environment.</itunes:subtitle>
      <itunes:duration>53:54</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>Welcome to another extra special episode of Elixir Wizards! We have guest hosts today, Meryl Dakin of Frame.io and Sophie DeBenedetto of Github, and they welcome Steven Nunez, Staff Engineer at the Flatiron School, and Sean Callan, creator of Elixir School, to the show. Where some would see the fact that Elixir doesn’t have a ton of readily available answers out there as a restriction to mastering the language, our guests argue that this is the best educational environment. Writing about challenges and teaching others how you overcame them are some of the best ways to learn. We also discuss concurrency and other contrasts with prominent languages. Our guests weigh in on dealing with students and how far enthusiasm and openness can go in helping inspire other minds. Steven stresses the need for greater resources, especially at a beginner level, as this will lower the barrier to entry for new programmers and ultimately benefit the entire Elixir community.
Key Points From This Episode:
An introduction to Sean and Steven, their work and experience with Elixir. 
Work and professional horoscopes for the panel of today's podcast!
The accidental path that led Sean to Elixir and the translations that affirmed his work.
The use of writing and blogging in your own education; teaching is learning twice!
Steven's early attraction to Elixir and the obsession and evangelism that followed. 
Concurrency visibility and differences between Elixir and other languages.
Different tracks for learning; coming into Elixir as a beginner or as someone with experience. 
The evolution of thought around education and things that have changed at Elixir School. 
Learning that includes reasons why; you don't know what you don't know! 
Knowing your students and keeping them excited to maintain a passion for learning. 
Growing confidence and the benefits of great resources for the spread of increasing skills.  
Scratching your own itch; write the educational information that you cannot find yourself.
Our guest's Elixir wish lists; more learning opportunities, widespread adoption and beginner-friendly content.  
Requests about Elixir from our guests, a few plugs and how to connect with them!
Links Mentioned in Today’s Episode:
SmartLogic — https://smartlogic.io/ 
Sophie DeBenedetto — https://twitter.com/smdebenedetto
Meryl Dakin — https://twitter.com/meryldakin
Steven Nunez — https://twitter.com/stevennunez
Sean Callan — https://twitter.com/doomspork
System 76 — https://system76.com/
Flatiron — https://flatironschool.com/
Elixir School — https://elixirschool.com
GitHub — https://github.com/
Erlang — https://www.erlang.org/
Phoenix — https://www.phoenixframework.org/
Kubernetes — https://kubernetes.io/
The Developer's Guide to Content Creation — https://www.developersguidetocontent.com/
Stephanie Morillo — https://www.stephaniemorillo.co/
Elixir and The Beam: How Concurrency Really Works https://www.thegreatcodeadventure.com/elixir-and-the-beam-how-concurrency-really-works/ Special Guests: Sean Callan and Steven Nunez.
</description>
      <itunes:keywords>elixir,phoenix</itunes:keywords>
      <content:encoded><![CDATA[
        <p>Welcome to another extra special episode of Elixir Wizards! We have guest hosts today, Meryl Dakin of Frame.io and Sophie DeBenedetto of Github, and they welcome Steven Nunez, Staff Engineer at the Flatiron School, and Sean Callan, creator of Elixir School, to the show. Where some would see the fact that Elixir doesn’t have a ton of readily available answers out there as a restriction to mastering the language, our guests argue that this is the best educational environment. Writing about challenges and teaching others how you overcame them are some of the best ways to learn. We also discuss concurrency and other contrasts with prominent languages. Our guests weigh in on dealing with students and how far enthusiasm and openness can go in helping inspire other minds. Steven stresses the need for greater resources, especially at a beginner level, as this will lower the barrier to entry for new programmers and ultimately benefit the entire Elixir community.</p>

<p>Key Points From This Episode:</p>

<ul>
<li>An introduction to Sean and Steven, their work and experience with Elixir. </li>
<li>Work and professional horoscopes for the panel of today&#39;s podcast!</li>
<li>The accidental path that led Sean to Elixir and the translations that affirmed his work.</li>
<li>The use of writing and blogging in your own education; teaching is learning twice!</li>
<li>Steven&#39;s early attraction to Elixir and the obsession and evangelism that followed. </li>
<li>Concurrency visibility and differences between Elixir and other languages.</li>
<li>Different tracks for learning; coming into Elixir as a beginner or as someone with experience. </li>
<li>The evolution of thought around education and things that have changed at Elixir School. </li>
<li>Learning that includes reasons why; you don&#39;t know what you don&#39;t know! </li>
<li>Knowing your students and keeping them excited to maintain a passion for learning. </li>
<li>Growing confidence and the benefits of great resources for the spread of increasing skills.<br></li>
<li>Scratching your own itch; write the educational information that you cannot find yourself.</li>
<li>Our guest&#39;s Elixir wish lists; more learning opportunities, widespread adoption and beginner-friendly content.<br></li>
<li>Requests about Elixir from our guests, a few plugs and how to connect with them!</li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
Sophie DeBenedetto — <a href="https://twitter.com/sm_debenedetto" rel="nofollow">https://twitter.com/sm_debenedetto</a><br>
Meryl Dakin — <a href="https://twitter.com/meryldakin" rel="nofollow">https://twitter.com/meryldakin</a><br>
Steven Nunez — <a href="https://twitter.com/_stevennunez" rel="nofollow">https://twitter.com/_stevennunez</a><br>
Sean Callan — <a href="https://twitter.com/doomspork" rel="nofollow">https://twitter.com/doomspork</a><br>
System 76 — <a href="https://system76.com/" rel="nofollow">https://system76.com/</a><br>
Flatiron — <a href="https://flatironschool.com/" rel="nofollow">https://flatironschool.com/</a><br>
Elixir School — <a href="https://elixirschool.com" rel="nofollow">https://elixirschool.com</a><br>
GitHub — <a href="https://github.com/" rel="nofollow">https://github.com/</a><br>
Erlang — <a href="https://www.erlang.org/" rel="nofollow">https://www.erlang.org/</a><br>
Phoenix — <a href="https://www.phoenixframework.org/" rel="nofollow">https://www.phoenixframework.org/</a><br>
Kubernetes — <a href="https://kubernetes.io/" rel="nofollow">https://kubernetes.io/</a><br>
The Developer&#39;s Guide to Content Creation — <a href="https://www.developersguidetocontent.com/" rel="nofollow">https://www.developersguidetocontent.com/</a><br>
Stephanie Morillo — <a href="https://www.stephaniemorillo.co/" rel="nofollow">https://www.stephaniemorillo.co/</a><br>
Elixir and The Beam: How Concurrency Really Works <a href="https://www.thegreatcodeadventure.com/elixir-and-the-beam-how-concurrency-really-works/" rel="nofollow">https://www.thegreatcodeadventure.com/elixir-and-the-beam-how-concurrency-really-works/</a></p><p>Special Guests: Sean Callan and Steven Nunez.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Welcome to another extra special episode of Elixir Wizards! We have guest hosts today, Meryl Dakin of Frame.io and Sophie DeBenedetto of Github, and they welcome Steven Nunez, Staff Engineer at the Flatiron School, and Sean Callan, creator of Elixir School, to the show. Where some would see the fact that Elixir doesn’t have a ton of readily available answers out there as a restriction to mastering the language, our guests argue that this is the best educational environment. Writing about challenges and teaching others how you overcame them are some of the best ways to learn. We also discuss concurrency and other contrasts with prominent languages. Our guests weigh in on dealing with students and how far enthusiasm and openness can go in helping inspire other minds. Steven stresses the need for greater resources, especially at a beginner level, as this will lower the barrier to entry for new programmers and ultimately benefit the entire Elixir community.</p>

<p>Key Points From This Episode:</p>

<ul>
<li>An introduction to Sean and Steven, their work and experience with Elixir. </li>
<li>Work and professional horoscopes for the panel of today&#39;s podcast!</li>
<li>The accidental path that led Sean to Elixir and the translations that affirmed his work.</li>
<li>The use of writing and blogging in your own education; teaching is learning twice!</li>
<li>Steven&#39;s early attraction to Elixir and the obsession and evangelism that followed. </li>
<li>Concurrency visibility and differences between Elixir and other languages.</li>
<li>Different tracks for learning; coming into Elixir as a beginner or as someone with experience. </li>
<li>The evolution of thought around education and things that have changed at Elixir School. </li>
<li>Learning that includes reasons why; you don&#39;t know what you don&#39;t know! </li>
<li>Knowing your students and keeping them excited to maintain a passion for learning. </li>
<li>Growing confidence and the benefits of great resources for the spread of increasing skills.<br></li>
<li>Scratching your own itch; write the educational information that you cannot find yourself.</li>
<li>Our guest&#39;s Elixir wish lists; more learning opportunities, widespread adoption and beginner-friendly content.<br></li>
<li>Requests about Elixir from our guests, a few plugs and how to connect with them!</li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
Sophie DeBenedetto — <a href="https://twitter.com/sm_debenedetto" rel="nofollow">https://twitter.com/sm_debenedetto</a><br>
Meryl Dakin — <a href="https://twitter.com/meryldakin" rel="nofollow">https://twitter.com/meryldakin</a><br>
Steven Nunez — <a href="https://twitter.com/_stevennunez" rel="nofollow">https://twitter.com/_stevennunez</a><br>
Sean Callan — <a href="https://twitter.com/doomspork" rel="nofollow">https://twitter.com/doomspork</a><br>
System 76 — <a href="https://system76.com/" rel="nofollow">https://system76.com/</a><br>
Flatiron — <a href="https://flatironschool.com/" rel="nofollow">https://flatironschool.com/</a><br>
Elixir School — <a href="https://elixirschool.com" rel="nofollow">https://elixirschool.com</a><br>
GitHub — <a href="https://github.com/" rel="nofollow">https://github.com/</a><br>
Erlang — <a href="https://www.erlang.org/" rel="nofollow">https://www.erlang.org/</a><br>
Phoenix — <a href="https://www.phoenixframework.org/" rel="nofollow">https://www.phoenixframework.org/</a><br>
Kubernetes — <a href="https://kubernetes.io/" rel="nofollow">https://kubernetes.io/</a><br>
The Developer&#39;s Guide to Content Creation — <a href="https://www.developersguidetocontent.com/" rel="nofollow">https://www.developersguidetocontent.com/</a><br>
Stephanie Morillo — <a href="https://www.stephaniemorillo.co/" rel="nofollow">https://www.stephaniemorillo.co/</a><br>
Elixir and The Beam: How Concurrency Really Works <a href="https://www.thegreatcodeadventure.com/elixir-and-the-beam-how-concurrency-really-works/" rel="nofollow">https://www.thegreatcodeadventure.com/elixir-and-the-beam-how-concurrency-really-works/</a></p><p>Special Guests: Sean Callan and Steven Nunez.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Saša Jurić on Training</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/s3e17-juric</link>
      <guid isPermaLink="false">75204e87-33b5-4a39-833c-d2a7f5ae1931</guid>
      <pubDate>Thu, 19 Mar 2020 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/75204e87-33b5-4a39-833c-d2a7f5ae1931.mp3" length="74048722" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>3</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Saša Jurić is a household name in the Elixir and Erlang space and we are so glad to finally welcome him on to the show today! Author of Elixir in Action, Saša is here to discuss training and his thoughts on getting a team up to speed with regards to testing and beyond. </itunes:subtitle>
      <itunes:duration>51:01</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>Saša Jurić is a household name in the Elixir and Erlang space and we are so glad to finally welcome him on to the show today! Author of Elixir in Action, Saša is here to discuss training and his thoughts on getting a team up to speed with regards to testing and beyond. We hear from our guest about his discovery of Elixir, his uncharacteristic early adoption of the language, and why he chose it. From there, Saša talks a bit about his book, the opportunity that arose for him to write it after Manning approached him and how he views its place among other prominent pieces of literature on the subject. We discuss early steps in the process of learning Elixir for new programmers and old, and Saša weighs in on when it might be a good idea to put in the effort. We also get to hear about very big things, where Saša works and the central work and services of the agency. The last part of our conversation is spent on more technical aspects of Saša's work, his approach to coding in general and then approaches to testing and the training side of this. Join us today for this great conversation!
Key Points From This Episode:
Saša's discovery of Elixir and his first experiences of the language.
A lucky opportunity to write a book that presented itself to Saša!
The complementary nature of Elixir in Action; reading it in conjunction with other books.   
Ideas on how to introduce the concepts of Elixir to new programmers and the unfamiliar. 
The effort needed in order to understand and adopt the new paradigm of Elixir.
Saša's work at very big things and the services that the agency offers.
The most useful idioms that Saša uses and the modes of operation at that agency. 
Saša's use of Dialyzer for debugging despite its imperfections.
The exploratory nature of good coding and finding solutions as you go. 
Helper libraries and comparing functions from Saša's own one!
Training for unit, feature and integration testing; Saša's approach for his team.
Differentiating between the different types of testing and the importance of naming. 
Clarifying Saša's philosophy on testing and his understanding of the term 'unit'. 
Links Mentioned in Today’s Episode:
SmartLogic — https://smartlogic.io/ 
Saša Jurić on Twitter — https://twitter.com/sasajuric
The Erlangerist — https://www.theerlangelist.com/
Elixir in Action — https://www.manning.com/books/elixir-in-action-second-edition?query=sa%C5%A1a - use special code podexwizards20 for 40% off your purchase at Manning Publications!
Michael Stevens — https://www.linkedin.com/in/michaelstephens2
Manning — https://www.manning.com/
Programming Elixir — https://pragprog.com/book/elixir16/programming-elixir-1-6
Learn Functional Programming with Elixir — https://pragprog.com/book/cdc-elixir/learn-functional-programming-with-elixir
very big things — https://verybigthings.com/
Dialyzer — https://hexdocs.pm/dialyzex/Mix.Tasks.Dialyzer.html
Hackers &amp; Painters — http://shop.oreilly.com/product/9780596006624.do
Paul Graham — http://www.paulgraham.com/
Justin Searls Blog - https://blog.testdouble.com/
Marie Kondo — https://konmari.com/
 Special Guest: Saša Jurić.
</description>
      <itunes:keywords>elixir, phoenix, erlang</itunes:keywords>
      <content:encoded><![CDATA[
        <p>Saša Jurić is a household name in the Elixir and Erlang space and we are so glad to finally welcome him on to the show today! Author of Elixir in Action, Saša is here to discuss training and his thoughts on getting a team up to speed with regards to testing and beyond. We hear from our guest about his discovery of Elixir, his uncharacteristic early adoption of the language, and why he chose it. From there, Saša talks a bit about his book, the opportunity that arose for him to write it after Manning approached him and how he views its place among other prominent pieces of literature on the subject. We discuss early steps in the process of learning Elixir for new programmers and old, and Saša weighs in on when it might be a good idea to put in the effort. We also get to hear about very big things, where Saša works and the central work and services of the agency. The last part of our conversation is spent on more technical aspects of Saša&#39;s work, his approach to coding in general and then approaches to testing and the training side of this. Join us today for this great conversation!</p>

<p>Key Points From This Episode:</p>

<ul>
<li>Saša&#39;s discovery of Elixir and his first experiences of the language.</li>
<li>A lucky opportunity to write a book that presented itself to Saša!</li>
<li>The complementary nature of Elixir in Action; reading it in conjunction with other books.<br></li>
<li>Ideas on how to introduce the concepts of Elixir to new programmers and the unfamiliar. </li>
<li>The effort needed in order to understand and adopt the new paradigm of Elixir.</li>
<li>Saša&#39;s work at very big things and the services that the agency offers.</li>
<li>The most useful idioms that Saša uses and the modes of operation at that agency. </li>
<li>Saša&#39;s use of Dialyzer for debugging despite its imperfections.</li>
<li>The exploratory nature of good coding and finding solutions as you go. </li>
<li>Helper libraries and comparing functions from Saša&#39;s own one!</li>
<li>Training for unit, feature and integration testing; Saša&#39;s approach for his team.</li>
<li>Differentiating between the different types of testing and the importance of naming. </li>
<li>Clarifying Saša&#39;s philosophy on testing and his understanding of the term &#39;unit&#39;. </li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
Saša Jurić on Twitter — <a href="https://twitter.com/sasajuric" rel="nofollow">https://twitter.com/sasajuric</a><br>
The Erlangerist — <a href="https://www.theerlangelist.com/" rel="nofollow">https://www.theerlangelist.com/</a><br>
Elixir in Action — <a href="https://www.manning.com/books/elixir-in-action-second-edition?query=sa%C5%A1a" rel="nofollow">https://www.manning.com/books/elixir-in-action-second-edition?query=sa%C5%A1a</a> - use special code podexwizards20 for 40% off your purchase at Manning Publications!<br>
Michael Stevens — <a href="https://www.linkedin.com/in/michaelstephens2" rel="nofollow">https://www.linkedin.com/in/michaelstephens2</a><br>
Manning — <a href="https://www.manning.com/" rel="nofollow">https://www.manning.com/</a><br>
Programming Elixir — <a href="https://pragprog.com/book/elixir16/programming-elixir-1-6" rel="nofollow">https://pragprog.com/book/elixir16/programming-elixir-1-6</a><br>
Learn Functional Programming with Elixir — <a href="https://pragprog.com/book/cdc-elixir/learn-functional-programming-with-elixir" rel="nofollow">https://pragprog.com/book/cdc-elixir/learn-functional-programming-with-elixir</a><br>
very big things — <a href="https://verybigthings.com/" rel="nofollow">https://verybigthings.com/</a><br>
Dialyzer — <a href="https://hexdocs.pm/dialyzex/Mix.Tasks.Dialyzer.html" rel="nofollow">https://hexdocs.pm/dialyzex/Mix.Tasks.Dialyzer.html</a><br>
Hackers &amp; Painters — <a href="http://shop.oreilly.com/product/9780596006624.do" rel="nofollow">http://shop.oreilly.com/product/9780596006624.do</a><br>
Paul Graham — <a href="http://www.paulgraham.com/" rel="nofollow">http://www.paulgraham.com/</a><br>
Justin Searls Blog - <a href="https://blog.testdouble.com/" rel="nofollow">https://blog.testdouble.com/</a><br>
Marie Kondo — <a href="https://konmari.com/" rel="nofollow">https://konmari.com/</a></p><p>Special Guest: Saša Jurić.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Saša Jurić is a household name in the Elixir and Erlang space and we are so glad to finally welcome him on to the show today! Author of Elixir in Action, Saša is here to discuss training and his thoughts on getting a team up to speed with regards to testing and beyond. We hear from our guest about his discovery of Elixir, his uncharacteristic early adoption of the language, and why he chose it. From there, Saša talks a bit about his book, the opportunity that arose for him to write it after Manning approached him and how he views its place among other prominent pieces of literature on the subject. We discuss early steps in the process of learning Elixir for new programmers and old, and Saša weighs in on when it might be a good idea to put in the effort. We also get to hear about very big things, where Saša works and the central work and services of the agency. The last part of our conversation is spent on more technical aspects of Saša&#39;s work, his approach to coding in general and then approaches to testing and the training side of this. Join us today for this great conversation!</p>

<p>Key Points From This Episode:</p>

<ul>
<li>Saša&#39;s discovery of Elixir and his first experiences of the language.</li>
<li>A lucky opportunity to write a book that presented itself to Saša!</li>
<li>The complementary nature of Elixir in Action; reading it in conjunction with other books.<br></li>
<li>Ideas on how to introduce the concepts of Elixir to new programmers and the unfamiliar. </li>
<li>The effort needed in order to understand and adopt the new paradigm of Elixir.</li>
<li>Saša&#39;s work at very big things and the services that the agency offers.</li>
<li>The most useful idioms that Saša uses and the modes of operation at that agency. </li>
<li>Saša&#39;s use of Dialyzer for debugging despite its imperfections.</li>
<li>The exploratory nature of good coding and finding solutions as you go. </li>
<li>Helper libraries and comparing functions from Saša&#39;s own one!</li>
<li>Training for unit, feature and integration testing; Saša&#39;s approach for his team.</li>
<li>Differentiating between the different types of testing and the importance of naming. </li>
<li>Clarifying Saša&#39;s philosophy on testing and his understanding of the term &#39;unit&#39;. </li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
Saša Jurić on Twitter — <a href="https://twitter.com/sasajuric" rel="nofollow">https://twitter.com/sasajuric</a><br>
The Erlangerist — <a href="https://www.theerlangelist.com/" rel="nofollow">https://www.theerlangelist.com/</a><br>
Elixir in Action — <a href="https://www.manning.com/books/elixir-in-action-second-edition?query=sa%C5%A1a" rel="nofollow">https://www.manning.com/books/elixir-in-action-second-edition?query=sa%C5%A1a</a> - use special code podexwizards20 for 40% off your purchase at Manning Publications!<br>
Michael Stevens — <a href="https://www.linkedin.com/in/michaelstephens2" rel="nofollow">https://www.linkedin.com/in/michaelstephens2</a><br>
Manning — <a href="https://www.manning.com/" rel="nofollow">https://www.manning.com/</a><br>
Programming Elixir — <a href="https://pragprog.com/book/elixir16/programming-elixir-1-6" rel="nofollow">https://pragprog.com/book/elixir16/programming-elixir-1-6</a><br>
Learn Functional Programming with Elixir — <a href="https://pragprog.com/book/cdc-elixir/learn-functional-programming-with-elixir" rel="nofollow">https://pragprog.com/book/cdc-elixir/learn-functional-programming-with-elixir</a><br>
very big things — <a href="https://verybigthings.com/" rel="nofollow">https://verybigthings.com/</a><br>
Dialyzer — <a href="https://hexdocs.pm/dialyzex/Mix.Tasks.Dialyzer.html" rel="nofollow">https://hexdocs.pm/dialyzex/Mix.Tasks.Dialyzer.html</a><br>
Hackers &amp; Painters — <a href="http://shop.oreilly.com/product/9780596006624.do" rel="nofollow">http://shop.oreilly.com/product/9780596006624.do</a><br>
Paul Graham — <a href="http://www.paulgraham.com/" rel="nofollow">http://www.paulgraham.com/</a><br>
Justin Searls Blog - <a href="https://blog.testdouble.com/" rel="nofollow">https://blog.testdouble.com/</a><br>
Marie Kondo — <a href="https://konmari.com/" rel="nofollow">https://konmari.com/</a></p><p>Special Guest: Saša Jurić.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Bonus Episode: Outlaws and Wizards</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/s3-bonus-outlaws-and-wizards</link>
      <guid isPermaLink="false">dbe0827c-2449-477d-bb59-3a189d039ad0</guid>
      <pubDate>Fri, 13 Mar 2020 12:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/dbe0827c-2449-477d-bb59-3a189d039ad0.mp3" length="44875455" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>3</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Elixir Outlaws invited us to join them for a special crossover episode, recorded live at Lonestar Elixir 2020. Join us for a conversation around fun and learning in development, highlights from day one of the conference, remembering Joe Armstrong, and more.</itunes:subtitle>
      <itunes:duration>46:44</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>Elixir Outlaws invited us to join them for a special crossover episode, recorded live at Lonestar Elixir 2020. Join us for a conversation around fun and learning in development, highlights from day one of the conference, remembering Joe Armstrong, and more.
Guests / Hosts
Justus Eapen @justuseapen (https://twitter.com/justuseapen)
Anna Neyzberg @ANeyzb (https://twitter.com/ANeyzb)
Amos King @adkron (https://twitter.com/Adkron)
Bruce Tate @redrapids (https://twitter.com/redrapids)
Susumu Yamazaki @zacky1972 (https://twitter.com/zacky1972)
Melvin Cedeno @TheCraftedGem (https://twitter.com/TheCraftedGem)
Tim Mecklem @tim_mecklem (https://twitter.com/tim_mecklem)
Elixir Outlaws https://elixiroutlaws.com/
Lonestar Elixir https://lonestarelixir.com/ Special Guests: Amos King, Anna Neyzberg, Bruce Tate, Chris Keathley, Melvin Cedeno, Susumu Yamazaki, and Tim Mecklem.
</description>
      <itunes:keywords>elixir, phoenix, lonestar elixir</itunes:keywords>
      <content:encoded><![CDATA[
        <p>Elixir Outlaws invited us to join them for a special crossover episode, recorded live at Lonestar Elixir 2020. Join us for a conversation around fun and learning in development, highlights from day one of the conference, remembering Joe Armstrong, and more.</p>

<p><strong>Guests / Hosts</strong><br>
Justus Eapen <a href="https://twitter.com/justuseapen" rel="nofollow">@justuseapen</a><br>
Anna Neyzberg <a href="https://twitter.com/ANeyzb" rel="nofollow">@ANeyzb</a><br>
Amos King <a href="https://twitter.com/Adkron" rel="nofollow">@adkron</a><br>
Bruce Tate <a href="https://twitter.com/redrapids" rel="nofollow">@redrapids</a><br>
Susumu Yamazaki <a href="https://twitter.com/zacky1972" rel="nofollow">@zacky1972</a><br>
Melvin Cedeno <a href="https://twitter.com/TheCraftedGem" rel="nofollow">@TheCraftedGem</a><br>
Tim Mecklem <a href="https://twitter.com/tim_mecklem" rel="nofollow">@tim_mecklem</a></p>

<p>Elixir Outlaws <a href="https://elixiroutlaws.com/" rel="nofollow">https://elixiroutlaws.com/</a><br>
Lonestar Elixir <a href="https://lonestarelixir.com/" rel="nofollow">https://lonestarelixir.com/</a></p><p>Special Guests: Amos King, Anna Neyzberg, Bruce Tate, Chris Keathley, Melvin Cedeno, Susumu Yamazaki, and Tim Mecklem.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Elixir Outlaws invited us to join them for a special crossover episode, recorded live at Lonestar Elixir 2020. Join us for a conversation around fun and learning in development, highlights from day one of the conference, remembering Joe Armstrong, and more.</p>

<p><strong>Guests / Hosts</strong><br>
Justus Eapen <a href="https://twitter.com/justuseapen" rel="nofollow">@justuseapen</a><br>
Anna Neyzberg <a href="https://twitter.com/ANeyzb" rel="nofollow">@ANeyzb</a><br>
Amos King <a href="https://twitter.com/Adkron" rel="nofollow">@adkron</a><br>
Bruce Tate <a href="https://twitter.com/redrapids" rel="nofollow">@redrapids</a><br>
Susumu Yamazaki <a href="https://twitter.com/zacky1972" rel="nofollow">@zacky1972</a><br>
Melvin Cedeno <a href="https://twitter.com/TheCraftedGem" rel="nofollow">@TheCraftedGem</a><br>
Tim Mecklem <a href="https://twitter.com/tim_mecklem" rel="nofollow">@tim_mecklem</a></p>

<p>Elixir Outlaws <a href="https://elixiroutlaws.com/" rel="nofollow">https://elixiroutlaws.com/</a><br>
Lonestar Elixir <a href="https://lonestarelixir.com/" rel="nofollow">https://lonestarelixir.com/</a></p><p>Special Guests: Amos King, Anna Neyzberg, Bruce Tate, Chris Keathley, Melvin Cedeno, Susumu Yamazaki, and Tim Mecklem.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Devon Estes from Sketch on Benchee,  Performance and Training</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/s3e16-estes</link>
      <guid isPermaLink="false">65360c15-6a60-4c48-be76-94f642cb6869</guid>
      <pubDate>Thu, 12 Mar 2020 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/65360c15-6a60-4c48-be76-94f642cb6869.mp3" length="70535610" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>3</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Devon Estes joins our ongoing discussion about performance and training in the Elixir world, shares about his current work on the beta for Sketch Cloud, his previous Erlang consultancy role at one of the largest banks in Europe, and the massive responsibility he carried while working on the bottom line application.</itunes:subtitle>
      <itunes:duration>48:34</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>Our guest today, Devon Estes, approached us about the possible opportunity for Elixir to optimize and build out the pandas data analysis and manipulation tool, sharing why he thinks it would be a valuable addition to the Elixir open source ecosystem. But Devon joins us to contribute to our ongoing discussion about performance and training in the Elixir world, sharing about his current work on the beta for Sketch Cloud, his previous Erlang consultancy role at one of the largest banks in Europe, and the massive responsibility he carried while working on the bottom line application. He continues to advise listeners on the considerations for optimizing Erlang performance and solving database-specific problems, and the memory constraints he comes up against in the Sketch Cloud application. Devon talks about Benchee, a benchmarking library created by his friend, and how the two of them have continued to develop this tool, including its performance testing capabilities and how they deconstructed the benchmarking steps to build out the library. He also talks more broadly about the importance of considering the data when distinguishing between facts and opinions in conversations about performance. 
Key Points From This Episode:
What Devon believes would be a valuable addition to the Elixir open source ecosystem. 
Why optimizing and building out the pandas tool will be worth a company’s time and effort.
Devon’s experience with pandas and Python, and recognizing the opportunity for Elixir. 
Working on the beta for Sketch’s Cloud that will allow real-time collaboration. 
Devon’s consultancy role at Klarna, one of the largest banks in Europe. 
The responsibility involved in working on the bottom-of-the-stack application at Klarna.  
Considerations for optimizing Erlang performance and why you should look at the tail. 
Solving the database performance problems – running queries and searches – at Klarna. 
The unique memory constraints of Sketch Cloud and the problem with receiving large files. 
More about Benchee, a benchmarking library, and all its performance testing capabilities. 
Deciding whether a function is responsible for other things when benchmarking. 
The time Devon spends on optimizing performance and the first two steps in the process. 
The profiling process of determining which function is slow and writing a benchmark for it. 
Distinguish between a fact and an opinion by considering the data (or lack thereof). 
Keeping in mind that truth is time-bound, and it also applies to benchmarking.
Deconstructing the steps in the process of further developing Benchee.
How Devon became a maintainer of the Elixir track for Exercism, and what the role involves. 
Links Mentioned in Today’s Episode:
Devon Estes — http://www.devonestes.com
Devon Estes on Twitter — https://twitter.com/devoncestes?lang=en
Devon Estes on GitHub — https://github.com/devonestes
pandas — https://pandas.pydata.org
Python — https://www.python.org
Sketch — https://www.sketch.com
Klarna — https://www.klarna.com/international/
Erlang — https://www.erlang.org
PostgreSQL — https://www.postgresql.org
Ruby  — https://www.ruby-lang.org/en/
Adopting Elixir — https://www.amazon.com/Adopting-Elixir-Production-Ben-Marx/dp/1680502522
Exercism — https://exercism.io
JavaScript — https://www.javascript.com
Benchee — https://github.com/bencheeorg
SmartLogic — https://smartlogic.io/ 
Elixir — https://elixir-lang.org
Elixir Wizards Podcast — https://podcast.smartlogic.io
Update:
What's Inside a Reduction? http://www.devonestes.com/inside-a-reduction Special Guest: Devon Estes.
</description>
      <itunes:keywords>elixir, ruby, benchee, pandas, erlang</itunes:keywords>
      <content:encoded><![CDATA[
        <p>Our guest today, Devon Estes, approached us about the possible opportunity for Elixir to optimize and build out the pandas data analysis and manipulation tool, sharing why he thinks it would be a valuable addition to the Elixir open source ecosystem. But Devon joins us to contribute to our ongoing discussion about performance and training in the Elixir world, sharing about his current work on the beta for Sketch Cloud, his previous Erlang consultancy role at one of the largest banks in Europe, and the massive responsibility he carried while working on the bottom line application. He continues to advise listeners on the considerations for optimizing Erlang performance and solving database-specific problems, and the memory constraints he comes up against in the Sketch Cloud application. Devon talks about Benchee, a benchmarking library created by his friend, and how the two of them have continued to develop this tool, including its performance testing capabilities and how they deconstructed the benchmarking steps to build out the library. He also talks more broadly about the importance of considering the data when distinguishing between facts and opinions in conversations about performance. </p>

<p>Key Points From This Episode:</p>

<ul>
<li>What Devon believes would be a valuable addition to the Elixir open source ecosystem. </li>
<li>Why optimizing and building out the pandas tool will be worth a company’s time and effort.</li>
<li>Devon’s experience with pandas and Python, and recognizing the opportunity for Elixir. </li>
<li>Working on the beta for Sketch’s Cloud that will allow real-time collaboration. </li>
<li>Devon’s consultancy role at Klarna, one of the largest banks in Europe. </li>
<li>The responsibility involved in working on the bottom-of-the-stack application at Klarna.<br></li>
<li>Considerations for optimizing Erlang performance and why you should look at the tail. </li>
<li>Solving the database performance problems – running queries and searches – at Klarna. </li>
<li>The unique memory constraints of Sketch Cloud and the problem with receiving large files. </li>
<li>More about Benchee, a benchmarking library, and all its performance testing capabilities. </li>
<li>Deciding whether a function is responsible for other things when benchmarking. </li>
<li>The time Devon spends on optimizing performance and the first two steps in the process. </li>
<li>The profiling process of determining which function is slow and writing a benchmark for it. </li>
<li>Distinguish between a fact and an opinion by considering the data (or lack thereof). </li>
<li>Keeping in mind that truth is time-bound, and it also applies to benchmarking.</li>
<li>Deconstructing the steps in the process of further developing Benchee.</li>
<li>How Devon became a maintainer of the Elixir track for Exercism, and what the role involves. </li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>Devon Estes — <a href="http://www.devonestes.com" rel="nofollow">http://www.devonestes.com</a><br>
Devon Estes on Twitter — <a href="https://twitter.com/devoncestes?lang=en" rel="nofollow">https://twitter.com/devoncestes?lang=en</a><br>
Devon Estes on GitHub — <a href="https://github.com/devonestes" rel="nofollow">https://github.com/devonestes</a><br>
pandas — <a href="https://pandas.pydata.org" rel="nofollow">https://pandas.pydata.org</a><br>
Python — <a href="https://www.python.org" rel="nofollow">https://www.python.org</a><br>
Sketch — <a href="https://www.sketch.com" rel="nofollow">https://www.sketch.com</a><br>
Klarna — <a href="https://www.klarna.com/international/" rel="nofollow">https://www.klarna.com/international/</a><br>
Erlang — <a href="https://www.erlang.org" rel="nofollow">https://www.erlang.org</a><br>
PostgreSQL — <a href="https://www.postgresql.org" rel="nofollow">https://www.postgresql.org</a><br>
Ruby  — <a href="https://www.ruby-lang.org/en/" rel="nofollow">https://www.ruby-lang.org/en/</a><br>
Adopting Elixir — <a href="https://www.amazon.com/Adopting-Elixir-Production-Ben-Marx/dp/1680502522" rel="nofollow">https://www.amazon.com/Adopting-Elixir-Production-Ben-Marx/dp/1680502522</a><br>
Exercism — <a href="https://exercism.io" rel="nofollow">https://exercism.io</a><br>
JavaScript — <a href="https://www.javascript.com" rel="nofollow">https://www.javascript.com</a><br>
Benchee — <a href="https://github.com/bencheeorg" rel="nofollow">https://github.com/bencheeorg</a><br>
SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
Elixir — <a href="https://elixir-lang.org" rel="nofollow">https://elixir-lang.org</a><br>
Elixir Wizards Podcast — <a href="https://podcast.smartlogic.io" rel="nofollow">https://podcast.smartlogic.io</a></p>

<p>Update:<br>
What&#39;s Inside a Reduction? <a href="http://www.devonestes.com/inside-a-reduction" rel="nofollow">http://www.devonestes.com/inside-a-reduction</a></p><p>Special Guest: Devon Estes.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Our guest today, Devon Estes, approached us about the possible opportunity for Elixir to optimize and build out the pandas data analysis and manipulation tool, sharing why he thinks it would be a valuable addition to the Elixir open source ecosystem. But Devon joins us to contribute to our ongoing discussion about performance and training in the Elixir world, sharing about his current work on the beta for Sketch Cloud, his previous Erlang consultancy role at one of the largest banks in Europe, and the massive responsibility he carried while working on the bottom line application. He continues to advise listeners on the considerations for optimizing Erlang performance and solving database-specific problems, and the memory constraints he comes up against in the Sketch Cloud application. Devon talks about Benchee, a benchmarking library created by his friend, and how the two of them have continued to develop this tool, including its performance testing capabilities and how they deconstructed the benchmarking steps to build out the library. He also talks more broadly about the importance of considering the data when distinguishing between facts and opinions in conversations about performance. </p>

<p>Key Points From This Episode:</p>

<ul>
<li>What Devon believes would be a valuable addition to the Elixir open source ecosystem. </li>
<li>Why optimizing and building out the pandas tool will be worth a company’s time and effort.</li>
<li>Devon’s experience with pandas and Python, and recognizing the opportunity for Elixir. </li>
<li>Working on the beta for Sketch’s Cloud that will allow real-time collaboration. </li>
<li>Devon’s consultancy role at Klarna, one of the largest banks in Europe. </li>
<li>The responsibility involved in working on the bottom-of-the-stack application at Klarna.<br></li>
<li>Considerations for optimizing Erlang performance and why you should look at the tail. </li>
<li>Solving the database performance problems – running queries and searches – at Klarna. </li>
<li>The unique memory constraints of Sketch Cloud and the problem with receiving large files. </li>
<li>More about Benchee, a benchmarking library, and all its performance testing capabilities. </li>
<li>Deciding whether a function is responsible for other things when benchmarking. </li>
<li>The time Devon spends on optimizing performance and the first two steps in the process. </li>
<li>The profiling process of determining which function is slow and writing a benchmark for it. </li>
<li>Distinguish between a fact and an opinion by considering the data (or lack thereof). </li>
<li>Keeping in mind that truth is time-bound, and it also applies to benchmarking.</li>
<li>Deconstructing the steps in the process of further developing Benchee.</li>
<li>How Devon became a maintainer of the Elixir track for Exercism, and what the role involves. </li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>Devon Estes — <a href="http://www.devonestes.com" rel="nofollow">http://www.devonestes.com</a><br>
Devon Estes on Twitter — <a href="https://twitter.com/devoncestes?lang=en" rel="nofollow">https://twitter.com/devoncestes?lang=en</a><br>
Devon Estes on GitHub — <a href="https://github.com/devonestes" rel="nofollow">https://github.com/devonestes</a><br>
pandas — <a href="https://pandas.pydata.org" rel="nofollow">https://pandas.pydata.org</a><br>
Python — <a href="https://www.python.org" rel="nofollow">https://www.python.org</a><br>
Sketch — <a href="https://www.sketch.com" rel="nofollow">https://www.sketch.com</a><br>
Klarna — <a href="https://www.klarna.com/international/" rel="nofollow">https://www.klarna.com/international/</a><br>
Erlang — <a href="https://www.erlang.org" rel="nofollow">https://www.erlang.org</a><br>
PostgreSQL — <a href="https://www.postgresql.org" rel="nofollow">https://www.postgresql.org</a><br>
Ruby  — <a href="https://www.ruby-lang.org/en/" rel="nofollow">https://www.ruby-lang.org/en/</a><br>
Adopting Elixir — <a href="https://www.amazon.com/Adopting-Elixir-Production-Ben-Marx/dp/1680502522" rel="nofollow">https://www.amazon.com/Adopting-Elixir-Production-Ben-Marx/dp/1680502522</a><br>
Exercism — <a href="https://exercism.io" rel="nofollow">https://exercism.io</a><br>
JavaScript — <a href="https://www.javascript.com" rel="nofollow">https://www.javascript.com</a><br>
Benchee — <a href="https://github.com/bencheeorg" rel="nofollow">https://github.com/bencheeorg</a><br>
SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
Elixir — <a href="https://elixir-lang.org" rel="nofollow">https://elixir-lang.org</a><br>
Elixir Wizards Podcast — <a href="https://podcast.smartlogic.io" rel="nofollow">https://podcast.smartlogic.io</a></p>

<p>Update:<br>
What&#39;s Inside a Reduction? <a href="http://www.devonestes.com/inside-a-reduction" rel="nofollow">http://www.devonestes.com/inside-a-reduction</a></p><p>Special Guest: Devon Estes.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Second Annual Lonestar Lunchisode</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/s3-lonestar-lunchisode-2020</link>
      <guid isPermaLink="false">49808f09-dc08-407e-9d3b-9db8f0bbff97</guid>
      <pubDate>Thu, 05 Mar 2020 06:00:00 -0500</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/49808f09-dc08-407e-9d3b-9db8f0bbff97.mp3" length="77832636" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>3</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Recorded live at Lonestar Elixir 2020! Tune in for our conversation with many great guests, including Bruce Tate, Steve Bussey, Bruce Williams, Ricardo Echavarria, Brian Naegele, Frank Kumro, Zach Thomas, Dave Thomas, Jon Carstens, and guest co-host Todd Resudek.</itunes:subtitle>
      <itunes:duration>53:38</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>Welcome back to the show for this special edition Lunchisode, coming to you live from the Lonestar Elixir 2020 Conference! We have a revolving door of speakers at this informal roundtable and a few friends and associates stop by to introduce themselves, share their thoughts on the conference so far and subjects that they care about. We follow up on some of the ideas raised in the Lonestar preview episode as well as hear about new and interesting ways that Elixir is being used at a variety of companies, including SalesLoft, ActiveProspect, SmartRent and more! We also consider the place of Elixir education and go deeper on the topic of finding fun and meaning in our programming pursuits and beyond. Join us for this special edition and stay tuned for the next installment soon.
Key Points From This Episode:
Thoughts on the conference so far — the talks and venue.  
SalesLoft's Elixir adoption and how the decision was made by those in power. 
Bruce Williams' current work at GitHub and his project on Absinthe. 
Elixir usage in Mexico and the prominent organizations and companies that use it.
Some information on the Observability Working Group and what they are currently busy with. 
Differences between tracing and logging; tracing is essentially distributed logging. 
What it means for the programmer when they bump up against a challenge!
The amount of effort that should go into developing entry points for new Elixir developers.
Education in the Elixir space and the success of the bootcamp model. 
Considering the ongoing utility of unit tests and changing up training strategies. 
The work done by SmartRent in real estate and how Elixir fits into their tech stack. 
Links Mentioned in Today’s Episode:
Lonestar Elixir — https://lonestarelixir.com/
Bruce Tate — https://twitter.com/redrapids
Steve Bussey — https://twitter.com/YOOOODAAAA
Bruce Williams — https://twitter.com/wbruce
Ricardo Echavarria — https://twitter.com/ricarus
Brain Naegele — https://twitter.com/bsidebryan
Frank Kumro — https://twitter.com/frigidcode
Zach Thomas — https://twitter.com/ZachDCThom
Dave Thomas — https://twitter.com/pragdave
Jon Carstens — https://twitter.com/JonCarstens
Todd Resudek — https://twitter.com/sprsmpl
SmartLogic — https://smartlogic.io/ 
SalesLoft — https://salesloft.com/
Absinthe — https://github.com/absinthe-graphql/absinthe
Sophie DeBenedetto — http://sophiedebenedetto.nyc/
RestFest — https://www.restfest.org/
Observability Working Group — https://erlef.org/wg/observability
GigCity Elixir Conference — https://www.gigcityelixir.com/
ActiveProspect — https://activeprospect.com/
The Pragmatic Programmer — https://pragprog.com/book/tpp20/the-pragmatic-programmer-20th-anniversary-edition
SmartRent — https://smartrent.com/
Blinker — https://www.blinker.com/ Special Guests: Brain Naegele, Bruce Tate, Bruce Williams, Dave Thomas, Frank Kumro, Jon Carstens, Ricardo Echavarria, Steve Bussey, Todd Resudek, and Zach Thomas.
</description>
      <itunes:keywords>lonestar elixir, elixir, phoenix</itunes:keywords>
      <content:encoded><![CDATA[
        <p>Welcome back to the show for this special edition Lunchisode, coming to you live from the Lonestar Elixir 2020 Conference! We have a revolving door of speakers at this informal roundtable and a few friends and associates stop by to introduce themselves, share their thoughts on the conference so far and subjects that they care about. We follow up on some of the ideas raised in the Lonestar preview episode as well as hear about new and interesting ways that Elixir is being used at a variety of companies, including SalesLoft, ActiveProspect, SmartRent and more! We also consider the place of Elixir education and go deeper on the topic of finding fun and meaning in our programming pursuits and beyond. Join us for this special edition and stay tuned for the next installment soon.</p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>Thoughts on the conference so far — the talks and venue.<br></li>
<li>SalesLoft&#39;s Elixir adoption and how the decision was made by those in power. </li>
<li>Bruce Williams&#39; current work at GitHub and his project on Absinthe. </li>
<li>Elixir usage in Mexico and the prominent organizations and companies that use it.</li>
<li>Some information on the Observability Working Group and what they are currently busy with. </li>
<li>Differences between tracing and logging; tracing is essentially distributed logging. </li>
<li>What it means for the programmer when they bump up against a challenge!</li>
<li>The amount of effort that should go into developing entry points for new Elixir developers.</li>
<li>Education in the Elixir space and the success of the bootcamp model. </li>
<li>Considering the ongoing utility of unit tests and changing up training strategies. </li>
<li>The work done by SmartRent in real estate and how Elixir fits into their tech stack. </li>
</ul>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>Lonestar Elixir — <a href="https://lonestarelixir.com/" rel="nofollow">https://lonestarelixir.com/</a><br>
Bruce Tate — <a href="https://twitter.com/redrapids" rel="nofollow">https://twitter.com/redrapids</a><br>
Steve Bussey — <a href="https://twitter.com/YOOOODAAAA" rel="nofollow">https://twitter.com/YOOOODAAAA</a><br>
Bruce Williams — <a href="https://twitter.com/wbruce" rel="nofollow">https://twitter.com/wbruce</a><br>
Ricardo Echavarria — <a href="https://twitter.com/r_icarus" rel="nofollow">https://twitter.com/r_icarus</a><br>
Brain Naegele — <a href="https://twitter.com/bside_bryan" rel="nofollow">https://twitter.com/bside_bryan</a><br>
Frank Kumro — <a href="https://twitter.com/frigidcode" rel="nofollow">https://twitter.com/frigidcode</a><br>
Zach Thomas — <a href="https://twitter.com/ZachDCThom" rel="nofollow">https://twitter.com/ZachDCThom</a><br>
Dave Thomas — <a href="https://twitter.com/pragdave" rel="nofollow">https://twitter.com/pragdave</a><br>
Jon Carstens — <a href="https://twitter.com/JonCarstens" rel="nofollow">https://twitter.com/JonCarstens</a><br>
Todd Resudek — <a href="https://twitter.com/sprsmpl" rel="nofollow">https://twitter.com/sprsmpl</a><br>
SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
SalesLoft — <a href="https://salesloft.com/" rel="nofollow">https://salesloft.com/</a><br>
Absinthe — <a href="https://github.com/absinthe-graphql/absinthe" rel="nofollow">https://github.com/absinthe-graphql/absinthe</a><br>
Sophie DeBenedetto — <a href="http://sophiedebenedetto.nyc/" rel="nofollow">http://sophiedebenedetto.nyc/</a><br>
RestFest — <a href="https://www.restfest.org/" rel="nofollow">https://www.restfest.org/</a><br>
Observability Working Group — <a href="https://erlef.org/wg/observability" rel="nofollow">https://erlef.org/wg/observability</a><br>
GigCity Elixir Conference — <a href="https://www.gigcityelixir.com/" rel="nofollow">https://www.gigcityelixir.com/</a><br>
ActiveProspect — <a href="https://activeprospect.com/" rel="nofollow">https://activeprospect.com/</a><br>
The Pragmatic Programmer — <a href="https://pragprog.com/book/tpp20/the-pragmatic-programmer-20th-anniversary-edition" rel="nofollow">https://pragprog.com/book/tpp20/the-pragmatic-programmer-20th-anniversary-edition</a><br>
SmartRent — <a href="https://smartrent.com/" rel="nofollow">https://smartrent.com/</a><br>
Blinker — <a href="https://www.blinker.com/" rel="nofollow">https://www.blinker.com/</a></p><p>Special Guests: Brain Naegele, Bruce Tate, Bruce Williams, Dave Thomas, Frank Kumro, Jon Carstens, Ricardo Echavarria, Steve Bussey, Todd Resudek, and Zach Thomas.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Welcome back to the show for this special edition Lunchisode, coming to you live from the Lonestar Elixir 2020 Conference! We have a revolving door of speakers at this informal roundtable and a few friends and associates stop by to introduce themselves, share their thoughts on the conference so far and subjects that they care about. We follow up on some of the ideas raised in the Lonestar preview episode as well as hear about new and interesting ways that Elixir is being used at a variety of companies, including SalesLoft, ActiveProspect, SmartRent and more! We also consider the place of Elixir education and go deeper on the topic of finding fun and meaning in our programming pursuits and beyond. Join us for this special edition and stay tuned for the next installment soon.</p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>Thoughts on the conference so far — the talks and venue.<br></li>
<li>SalesLoft&#39;s Elixir adoption and how the decision was made by those in power. </li>
<li>Bruce Williams&#39; current work at GitHub and his project on Absinthe. </li>
<li>Elixir usage in Mexico and the prominent organizations and companies that use it.</li>
<li>Some information on the Observability Working Group and what they are currently busy with. </li>
<li>Differences between tracing and logging; tracing is essentially distributed logging. </li>
<li>What it means for the programmer when they bump up against a challenge!</li>
<li>The amount of effort that should go into developing entry points for new Elixir developers.</li>
<li>Education in the Elixir space and the success of the bootcamp model. </li>
<li>Considering the ongoing utility of unit tests and changing up training strategies. </li>
<li>The work done by SmartRent in real estate and how Elixir fits into their tech stack. </li>
</ul>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>Lonestar Elixir — <a href="https://lonestarelixir.com/" rel="nofollow">https://lonestarelixir.com/</a><br>
Bruce Tate — <a href="https://twitter.com/redrapids" rel="nofollow">https://twitter.com/redrapids</a><br>
Steve Bussey — <a href="https://twitter.com/YOOOODAAAA" rel="nofollow">https://twitter.com/YOOOODAAAA</a><br>
Bruce Williams — <a href="https://twitter.com/wbruce" rel="nofollow">https://twitter.com/wbruce</a><br>
Ricardo Echavarria — <a href="https://twitter.com/r_icarus" rel="nofollow">https://twitter.com/r_icarus</a><br>
Brain Naegele — <a href="https://twitter.com/bside_bryan" rel="nofollow">https://twitter.com/bside_bryan</a><br>
Frank Kumro — <a href="https://twitter.com/frigidcode" rel="nofollow">https://twitter.com/frigidcode</a><br>
Zach Thomas — <a href="https://twitter.com/ZachDCThom" rel="nofollow">https://twitter.com/ZachDCThom</a><br>
Dave Thomas — <a href="https://twitter.com/pragdave" rel="nofollow">https://twitter.com/pragdave</a><br>
Jon Carstens — <a href="https://twitter.com/JonCarstens" rel="nofollow">https://twitter.com/JonCarstens</a><br>
Todd Resudek — <a href="https://twitter.com/sprsmpl" rel="nofollow">https://twitter.com/sprsmpl</a><br>
SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
SalesLoft — <a href="https://salesloft.com/" rel="nofollow">https://salesloft.com/</a><br>
Absinthe — <a href="https://github.com/absinthe-graphql/absinthe" rel="nofollow">https://github.com/absinthe-graphql/absinthe</a><br>
Sophie DeBenedetto — <a href="http://sophiedebenedetto.nyc/" rel="nofollow">http://sophiedebenedetto.nyc/</a><br>
RestFest — <a href="https://www.restfest.org/" rel="nofollow">https://www.restfest.org/</a><br>
Observability Working Group — <a href="https://erlef.org/wg/observability" rel="nofollow">https://erlef.org/wg/observability</a><br>
GigCity Elixir Conference — <a href="https://www.gigcityelixir.com/" rel="nofollow">https://www.gigcityelixir.com/</a><br>
ActiveProspect — <a href="https://activeprospect.com/" rel="nofollow">https://activeprospect.com/</a><br>
The Pragmatic Programmer — <a href="https://pragprog.com/book/tpp20/the-pragmatic-programmer-20th-anniversary-edition" rel="nofollow">https://pragprog.com/book/tpp20/the-pragmatic-programmer-20th-anniversary-edition</a><br>
SmartRent — <a href="https://smartrent.com/" rel="nofollow">https://smartrent.com/</a><br>
Blinker — <a href="https://www.blinker.com/" rel="nofollow">https://www.blinker.com/</a></p><p>Special Guests: Brain Naegele, Bruce Tate, Bruce Williams, Dave Thomas, Frank Kumro, Jon Carstens, Ricardo Echavarria, Steve Bussey, Todd Resudek, and Zach Thomas.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Bonus Toddcast &amp; Lonestar Preview</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/s3e14-bonus-toddcast-and-lonestar-preview</link>
      <guid isPermaLink="false">10fa47c2-0223-46ac-a69d-465fd1393edb</guid>
      <pubDate>Thu, 27 Feb 2020 07:30:00 -0500</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/10fa47c2-0223-46ac-a69d-465fd1393edb.mp3" length="102498288" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>3</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Special format bonus episode! This week we are joined by bonus co-host Todd Resudek as well as a number of guests who each share a little bit about what they're working on, and in many cases their upcoming presentations at Lonestar Elixir. 

Special guests: Angel Jose of Cars.com, Dave Lucia of SimpleBet, Greg Mefford from Bleacher Report, Melvin Cedeno of SplitGyms, Zach Thomas of Blinker</itunes:subtitle>
      <itunes:duration>1:10:46</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>This week we're delighted to share a special format bonus episode! 
We are joined by guest co-host Todd Resudek as well as a number of guests who each share a little bit about what they're working on and in many cases their upcoming presentations at Lonestar Elixir. 
Special episode guests: 
* Angel Jose, Senior Platform Engineer at Cars.com
* Dave Lucia, VP of Engineering at SimpleBet
* Greg Mefford, Senior Back-End Engineer at Bleacher Report
* Melvin Cedeno, Elixir Developer at SplitGyms
* Zach Thomas, API Developer at Blinker
Most of our guests weigh in about their upcoming presentations at the event and we also get to chat about a few near and dear topics with our rotating cast. We hear about where they are working, their experiences with Elixir and their thoughts on education and company culture. It's an unusual episode but one we are so glad to have had the chance to make! We also find time to touch on our focus for the next season of the podcast, which is very exciting for all of us over here at the show. Remember to stay plugged in for more on Lonestar Elixir and attend if you can!
Key Points From This Episode:
Some thoughts on LiveView and its adoption by new developers. 
Angel's work at Cars and how they are using Elixir and LiveView to rewrite everything.
Chatbots and the immediate benefits of using Elixir to rewrite them.
The elevator pitch on SimpleBet and the tech stack, skillset and ecosystem of the company.
Why Dave and his team have moved away from Rust! 
A quick tease of what to expect for Season 4 of the podcast: Architecture of Applications!  
How Bleacher Report is using Elixir to build the 'third space' for sports fans.
Team building and expansion at Bleacher Report and the stages of scaling.  
A sneak preview of Greg's upcoming talk at Lonestar!
How Greg got started with Nerves and why it has a special place in his heart.  
The theme of Melvin's talk at Lonestar; untraditional routes and emotions in tech. 
Considering the usefulness of boot camps, the value of ISAs and CS programs.
Zach's background in Elixir and his current work at Blinker with the language.
Experiences at Turing and in liberal arts during college.
Zach's Lonestar talk elevator pitch: 'Getting the Frog out of the Well'. 
The allegory of the cave, 'what is water' and how this differs from Zach's idea. 
Why don't we like statically typed things as much as we should?
Links Mentioned in Today’s Episode:
SmartLogic — https://smartlogic.io/ 
Lonestar Elixir 2020 — https://lonestarelixir.com/
Todd Resudek — https://medium.com/@toddresudek
Todd Resudek on Twitter — https://twitter.com/sprsmpl
Angel Jose — https://github.com/ajose01
Dave Lucia — https://github.com/davydog187
Greg Mefford — https://github.com/GregMefford/blinkchain
Melvin Cedeno — https://gist.github.com/normanrs/eeb5cc91cb10eeb7d3e43168396efb27
Zack Thomas — https://github.com/zeam-vm/pelemay
Sophie DeBenedetto — http://sophiedebenedetto.nyc/
LiveView — https://hexdocs.pm/phoenixliveview/Phoenix.LiveView.html
ElixirConf — https://elixirconf.com/events
Cars — https://www.cars.com/
SimpleBet — https://www.simplebet.io/
Full Stack Developer Horse Drawing Meme — https://knowyourmeme.com/photos/1624070-unfinished-horse-drawing
Conway's Law — https://www.thoughtworks.com/insights/blog/applying-conways-law-improve-your-software-development
ElixirConf 2019 - Lighting Talk - Are There Benefits Of Crying In Tech — https://www.youtube.com/watch?v=oW5Plkroyxk
TRON — https://www.rottentomatoes.com/m/tron
Smart Mirror Blog Post — https://medium.com/@toddresudek/building-a-smart-mirror-with-phoenix-liveview-18193ee6438f
Bleacher Report — https://bleacherreport.com/
Team Topologies — https://teamtopologies.com/
Nerves — https://nerves-project.org/
Turing — https://turing.io/
CIRR — https://cirr.org/
David Heinemeier Hansson — https://dhh.dk/
Blinker — https://www.blinker.com/
David Foster Wallace — http://www.davidfosterwallacebooks.com/
Gödel, Escher, Bach — https://www.goodreads.com/book/show/24113.GdelEscher_Bach Special Guests: Angel Jose, Dave Lucia, Greg Mefford, Melvin Cedeno, Todd Resudek, and Zach Thomas.
</description>
      <itunes:keywords>elixir, phoenix, lonestar</itunes:keywords>
      <content:encoded><![CDATA[
        <p>This week we&#39;re delighted to share a special format bonus episode! </p>

<p>We are joined by guest co-host Todd Resudek as well as a number of guests who each share a little bit about what they&#39;re working on and in many cases their upcoming presentations at Lonestar Elixir. </p>

<p>Special episode guests: </p>

<ul>
<li>Angel Jose, Senior Platform Engineer at Cars.com</li>
<li>Dave Lucia, VP of Engineering at SimpleBet</li>
<li>Greg Mefford, Senior Back-End Engineer at Bleacher Report</li>
<li>Melvin Cedeno, Elixir Developer at SplitGyms</li>
<li>Zach Thomas, API Developer at Blinker</li>
</ul>

<p>Most of our guests weigh in about their upcoming presentations at the event and we also get to chat about a few near and dear topics with our rotating cast. We hear about where they are working, their experiences with Elixir and their thoughts on education and company culture. It&#39;s an unusual episode but one we are so glad to have had the chance to make! We also find time to touch on our focus for the next season of the podcast, which is very exciting for all of us over here at the show. Remember to stay plugged in for more on Lonestar Elixir and attend if you can!</p>

<p>Key Points From This Episode:</p>

<ul>
<li>Some thoughts on LiveView and its adoption by new developers. </li>
<li>Angel&#39;s work at Cars and how they are using Elixir and LiveView to rewrite everything.</li>
<li>Chatbots and the immediate benefits of using Elixir to rewrite them.</li>
<li>The elevator pitch on SimpleBet and the tech stack, skillset and ecosystem of the company.</li>
<li>Why Dave and his team have moved away from Rust! </li>
<li>A quick tease of what to expect for Season 4 of the podcast: Architecture of Applications!<br></li>
<li>How Bleacher Report is using Elixir to build the &#39;third space&#39; for sports fans.</li>
<li>Team building and expansion at Bleacher Report and the stages of scaling.<br></li>
<li>A sneak preview of Greg&#39;s upcoming talk at Lonestar!</li>
<li>How Greg got started with Nerves and why it has a special place in his heart.<br></li>
<li>The theme of Melvin&#39;s talk at Lonestar; untraditional routes and emotions in tech. </li>
<li>Considering the usefulness of boot camps, the value of ISAs and CS programs.</li>
<li>Zach&#39;s background in Elixir and his current work at Blinker with the language.</li>
<li>Experiences at Turing and in liberal arts during college.</li>
<li>Zach&#39;s Lonestar talk elevator pitch: &#39;Getting the Frog out of the Well&#39;. </li>
<li>The allegory of the cave, &#39;what is water&#39; and how this differs from Zach&#39;s idea. </li>
<li>Why don&#39;t we like statically typed things as much as we should?</li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
Lonestar Elixir 2020 — <a href="https://lonestarelixir.com/" rel="nofollow">https://lonestarelixir.com/</a><br>
Todd Resudek — <a href="https://medium.com/@toddresudek" rel="nofollow">https://medium.com/@toddresudek</a><br>
Todd Resudek on Twitter — <a href="https://twitter.com/sprsmpl" rel="nofollow">https://twitter.com/sprsmpl</a><br>
Angel Jose — <a href="https://github.com/ajose01" rel="nofollow">https://github.com/ajose01</a><br>
Dave Lucia — <a href="https://github.com/davydog187" rel="nofollow">https://github.com/davydog187</a><br>
Greg Mefford — <a href="https://github.com/GregMefford/blinkchain" rel="nofollow">https://github.com/GregMefford/blinkchain</a><br>
Melvin Cedeno — <a href="https://gist.github.com/normanrs/eeb5cc91cb10eeb7d3e43168396efb27" rel="nofollow">https://gist.github.com/normanrs/eeb5cc91cb10eeb7d3e43168396efb27</a><br>
Zack Thomas — <a href="https://github.com/zeam-vm/pelemay" rel="nofollow">https://github.com/zeam-vm/pelemay</a><br>
Sophie DeBenedetto — <a href="http://sophiedebenedetto.nyc/" rel="nofollow">http://sophiedebenedetto.nyc/</a><br>
LiveView — <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html" rel="nofollow">https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html</a><br>
ElixirConf — <a href="https://elixirconf.com/events" rel="nofollow">https://elixirconf.com/events</a><br>
Cars — <a href="https://www.cars.com/" rel="nofollow">https://www.cars.com/</a><br>
SimpleBet — <a href="https://www.simplebet.io/" rel="nofollow">https://www.simplebet.io/</a><br>
Full Stack Developer Horse Drawing Meme — <a href="https://knowyourmeme.com/photos/1624070-unfinished-horse-drawing" rel="nofollow">https://knowyourmeme.com/photos/1624070-unfinished-horse-drawing</a><br>
Conway&#39;s Law — <a href="https://www.thoughtworks.com/insights/blog/applying-conways-law-improve-your-software-development" rel="nofollow">https://www.thoughtworks.com/insights/blog/applying-conways-law-improve-your-software-development</a><br>
ElixirConf 2019 - Lighting Talk - Are There Benefits Of Crying In Tech — <a href="https://www.youtube.com/watch?v=oW5Plkroyxk" rel="nofollow">https://www.youtube.com/watch?v=oW5Plkroyxk</a><br>
TRON — <a href="https://www.rottentomatoes.com/m/tron" rel="nofollow">https://www.rottentomatoes.com/m/tron</a><br>
Smart Mirror Blog Post — <a href="https://medium.com/@toddresudek/building-a-smart-mirror-with-phoenix-liveview-18193ee6438f" rel="nofollow">https://medium.com/@toddresudek/building-a-smart-mirror-with-phoenix-liveview-18193ee6438f</a><br>
Bleacher Report — <a href="https://bleacherreport.com/" rel="nofollow">https://bleacherreport.com/</a><br>
Team Topologies — <a href="https://teamtopologies.com/" rel="nofollow">https://teamtopologies.com/</a><br>
Nerves — <a href="https://nerves-project.org/" rel="nofollow">https://nerves-project.org/</a><br>
Turing — <a href="https://turing.io/" rel="nofollow">https://turing.io/</a><br>
CIRR — <a href="https://cirr.org/" rel="nofollow">https://cirr.org/</a><br>
David Heinemeier Hansson — <a href="https://dhh.dk/" rel="nofollow">https://dhh.dk/</a><br>
Blinker — <a href="https://www.blinker.com/" rel="nofollow">https://www.blinker.com/</a><br>
David Foster Wallace — <a href="http://www.davidfosterwallacebooks.com/" rel="nofollow">http://www.davidfosterwallacebooks.com/</a><br>
Gödel, Escher, Bach — <a href="https://www.goodreads.com/book/show/24113.G_del_Escher_Bach" rel="nofollow">https://www.goodreads.com/book/show/24113.G_del_Escher_Bach</a></p><p>Special Guests: Angel Jose, Dave Lucia, Greg Mefford, Melvin Cedeno, Todd Resudek, and Zach Thomas.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>This week we&#39;re delighted to share a special format bonus episode! </p>

<p>We are joined by guest co-host Todd Resudek as well as a number of guests who each share a little bit about what they&#39;re working on and in many cases their upcoming presentations at Lonestar Elixir. </p>

<p>Special episode guests: </p>

<ul>
<li>Angel Jose, Senior Platform Engineer at Cars.com</li>
<li>Dave Lucia, VP of Engineering at SimpleBet</li>
<li>Greg Mefford, Senior Back-End Engineer at Bleacher Report</li>
<li>Melvin Cedeno, Elixir Developer at SplitGyms</li>
<li>Zach Thomas, API Developer at Blinker</li>
</ul>

<p>Most of our guests weigh in about their upcoming presentations at the event and we also get to chat about a few near and dear topics with our rotating cast. We hear about where they are working, their experiences with Elixir and their thoughts on education and company culture. It&#39;s an unusual episode but one we are so glad to have had the chance to make! We also find time to touch on our focus for the next season of the podcast, which is very exciting for all of us over here at the show. Remember to stay plugged in for more on Lonestar Elixir and attend if you can!</p>

<p>Key Points From This Episode:</p>

<ul>
<li>Some thoughts on LiveView and its adoption by new developers. </li>
<li>Angel&#39;s work at Cars and how they are using Elixir and LiveView to rewrite everything.</li>
<li>Chatbots and the immediate benefits of using Elixir to rewrite them.</li>
<li>The elevator pitch on SimpleBet and the tech stack, skillset and ecosystem of the company.</li>
<li>Why Dave and his team have moved away from Rust! </li>
<li>A quick tease of what to expect for Season 4 of the podcast: Architecture of Applications!<br></li>
<li>How Bleacher Report is using Elixir to build the &#39;third space&#39; for sports fans.</li>
<li>Team building and expansion at Bleacher Report and the stages of scaling.<br></li>
<li>A sneak preview of Greg&#39;s upcoming talk at Lonestar!</li>
<li>How Greg got started with Nerves and why it has a special place in his heart.<br></li>
<li>The theme of Melvin&#39;s talk at Lonestar; untraditional routes and emotions in tech. </li>
<li>Considering the usefulness of boot camps, the value of ISAs and CS programs.</li>
<li>Zach&#39;s background in Elixir and his current work at Blinker with the language.</li>
<li>Experiences at Turing and in liberal arts during college.</li>
<li>Zach&#39;s Lonestar talk elevator pitch: &#39;Getting the Frog out of the Well&#39;. </li>
<li>The allegory of the cave, &#39;what is water&#39; and how this differs from Zach&#39;s idea. </li>
<li>Why don&#39;t we like statically typed things as much as we should?</li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
Lonestar Elixir 2020 — <a href="https://lonestarelixir.com/" rel="nofollow">https://lonestarelixir.com/</a><br>
Todd Resudek — <a href="https://medium.com/@toddresudek" rel="nofollow">https://medium.com/@toddresudek</a><br>
Todd Resudek on Twitter — <a href="https://twitter.com/sprsmpl" rel="nofollow">https://twitter.com/sprsmpl</a><br>
Angel Jose — <a href="https://github.com/ajose01" rel="nofollow">https://github.com/ajose01</a><br>
Dave Lucia — <a href="https://github.com/davydog187" rel="nofollow">https://github.com/davydog187</a><br>
Greg Mefford — <a href="https://github.com/GregMefford/blinkchain" rel="nofollow">https://github.com/GregMefford/blinkchain</a><br>
Melvin Cedeno — <a href="https://gist.github.com/normanrs/eeb5cc91cb10eeb7d3e43168396efb27" rel="nofollow">https://gist.github.com/normanrs/eeb5cc91cb10eeb7d3e43168396efb27</a><br>
Zack Thomas — <a href="https://github.com/zeam-vm/pelemay" rel="nofollow">https://github.com/zeam-vm/pelemay</a><br>
Sophie DeBenedetto — <a href="http://sophiedebenedetto.nyc/" rel="nofollow">http://sophiedebenedetto.nyc/</a><br>
LiveView — <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html" rel="nofollow">https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html</a><br>
ElixirConf — <a href="https://elixirconf.com/events" rel="nofollow">https://elixirconf.com/events</a><br>
Cars — <a href="https://www.cars.com/" rel="nofollow">https://www.cars.com/</a><br>
SimpleBet — <a href="https://www.simplebet.io/" rel="nofollow">https://www.simplebet.io/</a><br>
Full Stack Developer Horse Drawing Meme — <a href="https://knowyourmeme.com/photos/1624070-unfinished-horse-drawing" rel="nofollow">https://knowyourmeme.com/photos/1624070-unfinished-horse-drawing</a><br>
Conway&#39;s Law — <a href="https://www.thoughtworks.com/insights/blog/applying-conways-law-improve-your-software-development" rel="nofollow">https://www.thoughtworks.com/insights/blog/applying-conways-law-improve-your-software-development</a><br>
ElixirConf 2019 - Lighting Talk - Are There Benefits Of Crying In Tech — <a href="https://www.youtube.com/watch?v=oW5Plkroyxk" rel="nofollow">https://www.youtube.com/watch?v=oW5Plkroyxk</a><br>
TRON — <a href="https://www.rottentomatoes.com/m/tron" rel="nofollow">https://www.rottentomatoes.com/m/tron</a><br>
Smart Mirror Blog Post — <a href="https://medium.com/@toddresudek/building-a-smart-mirror-with-phoenix-liveview-18193ee6438f" rel="nofollow">https://medium.com/@toddresudek/building-a-smart-mirror-with-phoenix-liveview-18193ee6438f</a><br>
Bleacher Report — <a href="https://bleacherreport.com/" rel="nofollow">https://bleacherreport.com/</a><br>
Team Topologies — <a href="https://teamtopologies.com/" rel="nofollow">https://teamtopologies.com/</a><br>
Nerves — <a href="https://nerves-project.org/" rel="nofollow">https://nerves-project.org/</a><br>
Turing — <a href="https://turing.io/" rel="nofollow">https://turing.io/</a><br>
CIRR — <a href="https://cirr.org/" rel="nofollow">https://cirr.org/</a><br>
David Heinemeier Hansson — <a href="https://dhh.dk/" rel="nofollow">https://dhh.dk/</a><br>
Blinker — <a href="https://www.blinker.com/" rel="nofollow">https://www.blinker.com/</a><br>
David Foster Wallace — <a href="http://www.davidfosterwallacebooks.com/" rel="nofollow">http://www.davidfosterwallacebooks.com/</a><br>
Gödel, Escher, Bach — <a href="https://www.goodreads.com/book/show/24113.G_del_Escher_Bach" rel="nofollow">https://www.goodreads.com/book/show/24113.G_del_Escher_Bach</a></p><p>Special Guests: Angel Jose, Dave Lucia, Greg Mefford, Melvin Cedeno, Todd Resudek, and Zach Thomas.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Alex Garibay and Mike Binns from DockYard on Hiring and Training</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/s3e13-binns-garibay</link>
      <guid isPermaLink="false">1cd7d8f6-8965-4bd2-b159-1580e133bb6f</guid>
      <pubDate>Thu, 20 Feb 2020 06:00:00 -0500</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/1cd7d8f6-8965-4bd2-b159-1580e133bb6f.mp3" length="38304122" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>3</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Mike Binns and Alex Garibay of DockYard share their journeys of how they came to work at DockYard and give us a fascinating peek behind-the-scenes into DockYard’s hiring and training processes, systems, and philosophies.</itunes:subtitle>
      <itunes:duration>26:11</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>Today on the show, we’re joined by Mike Binns and Alex Garibay of DockYard. In this episode, Mike and Alex share their journeys of how they came to work at DockYard and give us a view into DockYard’s hiring and training processes, systems, and philosophies. Here they share what they enjoy most about working at DockYard and their emphasis on being supported in your continual growth as an employee and human being.
Key Points from This Episode:
Find out how Mike and Alex both got their jobs at DockYard in 2016.
Working for a fully remote company: Mike and Alex share their experiences.
The amount of languages used at DockYard and what the day-to-day looks like.
React VS Ember: Find out DockYard’s opinion on the debate between the two.
How to know whether you should be using JavaScript or Live View on your projects.
The importance of inclusion and empowerment in the onboarding process at DockYard.
How to support and train new employees in “soft” skills, such as communication.
Personal strategies Mike and Alex use to help “soften the blow” of feedback and criticism. 
Discover what DockYard does to support the learning growth of their employees.
Learn more about DockYard Friday and the exciting projects that have emerged from it.
Helpful resources for learning Elixir and how to remain a curious learner as a developer.
Find out the top skills that make a great engineering manager at DockYard today.
Links Mentioned in Today’s Episode:
Mike Binns on Twitter — https://twitter.com/1stAvenger
Mike Binns on LinkedIn — https://www.linkedin.com/in/mikebinns
Alex Garibay — https://alexgaribay.com/
Alex Garibay on Twitter — https://twitter.com/AlexGaribay
Alex Garibay on LinkedIn — https://www.linkedin.com/in/alexandergaribay/
DockYard — https://DockYard.com/
SmartLogic — https://smartlogic.io/ 
RailsConf — https://railsconf.com/
Chris McCord — http://chrismccord.com/
Ember — https://emberjs.com/
Live View — https://support.google.com/maps/thread/11554255?hl=en
Elixir in Action — https://www.amazon.com/Elixir-Action-Sa%C5%A1a-Juri-cacute/dp/1617295027 
Elixir Conf 2014 Keynote by Dave Thomas — https://www.youtube.com/watch?v=5hDVftaPQwY
Sarah Drasner — https://sarahdrasnerdesign.com/
Lonestar Elixir — https://lonestarelixir.com/
Programming Phoenix — https://www.amazon.com/Programming-Phoenix-Productive-Reliable-Fast/dp/1680501453
Jason Goldberger — https://twitter.com/jsonlouis Special Guests: Alex Garibay and Mike Binns.
</description>
      <itunes:keywords>DockYard, elixir, phoenix</itunes:keywords>
      <content:encoded><![CDATA[
        <p>Today on the show, we’re joined by Mike Binns and Alex Garibay of DockYard. In this episode, Mike and Alex share their journeys of how they came to work at DockYard and give us a view into DockYard’s hiring and training processes, systems, and philosophies. Here they share what they enjoy most about working at DockYard and their emphasis on being supported in your continual growth as an employee and human being.</p>

<p>Key Points from This Episode:</p>

<ul>
<li>Find out how Mike and Alex both got their jobs at DockYard in 2016.</li>
<li>Working for a fully remote company: Mike and Alex share their experiences.</li>
<li>The amount of languages used at DockYard and what the day-to-day looks like.</li>
<li>React VS Ember: Find out DockYard’s opinion on the debate between the two.</li>
<li>How to know whether you should be using JavaScript or Live View on your projects.</li>
<li>The importance of inclusion and empowerment in the onboarding process at DockYard.</li>
<li>How to support and train new employees in “soft” skills, such as communication.</li>
<li>Personal strategies Mike and Alex use to help “soften the blow” of feedback and criticism. </li>
<li>Discover what DockYard does to support the learning growth of their employees.</li>
<li>Learn more about DockYard Friday and the exciting projects that have emerged from it.</li>
<li>Helpful resources for learning Elixir and how to remain a curious learner as a developer.</li>
<li>Find out the top skills that make a great engineering manager at DockYard today.</li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>Mike Binns on Twitter — <a href="https://twitter.com/1stAvenger" rel="nofollow">https://twitter.com/1stAvenger</a><br>
Mike Binns on LinkedIn — <a href="https://www.linkedin.com/in/mikebinns" rel="nofollow">https://www.linkedin.com/in/mikebinns</a><br>
Alex Garibay — <a href="https://alexgaribay.com/" rel="nofollow">https://alexgaribay.com/</a><br>
Alex Garibay on Twitter — <a href="https://twitter.com/_AlexGaribay" rel="nofollow">https://twitter.com/_AlexGaribay</a><br>
Alex Garibay on LinkedIn — <a href="https://www.linkedin.com/in/alexandergaribay/" rel="nofollow">https://www.linkedin.com/in/alexandergaribay/</a><br>
DockYard — <a href="https://DockYard.com/" rel="nofollow">https://DockYard.com/</a><br>
SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
RailsConf — <a href="https://railsconf.com/" rel="nofollow">https://railsconf.com/</a><br>
Chris McCord — <a href="http://chrismccord.com/" rel="nofollow">http://chrismccord.com/</a><br>
Ember — <a href="https://emberjs.com/" rel="nofollow">https://emberjs.com/</a><br>
Live View — <a href="https://support.google.com/maps/thread/11554255?hl=en" rel="nofollow">https://support.google.com/maps/thread/11554255?hl=en</a><br>
Elixir in Action — <a href="https://www.amazon.com/Elixir-Action-Sa%C5%A1a-Juri-cacute/dp/1617295027" rel="nofollow">https://www.amazon.com/Elixir-Action-Sa%C5%A1a-Juri-cacute/dp/1617295027</a> <br>
Elixir Conf 2014 Keynote by Dave Thomas — <a href="https://www.youtube.com/watch?v=5hDVftaPQwY" rel="nofollow">https://www.youtube.com/watch?v=5hDVftaPQwY</a><br>
Sarah Drasner — <a href="https://sarahdrasnerdesign.com/" rel="nofollow">https://sarahdrasnerdesign.com/</a><br>
Lonestar Elixir — <a href="https://lonestarelixir.com/" rel="nofollow">https://lonestarelixir.com/</a><br>
Programming Phoenix — <a href="https://www.amazon.com/Programming-Phoenix-Productive-Reliable-Fast/dp/1680501453" rel="nofollow">https://www.amazon.com/Programming-Phoenix-Productive-Reliable-Fast/dp/1680501453</a><br>
Jason Goldberger — <a href="https://twitter.com/jsonlouis_" rel="nofollow">https://twitter.com/jsonlouis_</a></p><p>Special Guests: Alex Garibay and Mike Binns.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Today on the show, we’re joined by Mike Binns and Alex Garibay of DockYard. In this episode, Mike and Alex share their journeys of how they came to work at DockYard and give us a view into DockYard’s hiring and training processes, systems, and philosophies. Here they share what they enjoy most about working at DockYard and their emphasis on being supported in your continual growth as an employee and human being.</p>

<p>Key Points from This Episode:</p>

<ul>
<li>Find out how Mike and Alex both got their jobs at DockYard in 2016.</li>
<li>Working for a fully remote company: Mike and Alex share their experiences.</li>
<li>The amount of languages used at DockYard and what the day-to-day looks like.</li>
<li>React VS Ember: Find out DockYard’s opinion on the debate between the two.</li>
<li>How to know whether you should be using JavaScript or Live View on your projects.</li>
<li>The importance of inclusion and empowerment in the onboarding process at DockYard.</li>
<li>How to support and train new employees in “soft” skills, such as communication.</li>
<li>Personal strategies Mike and Alex use to help “soften the blow” of feedback and criticism. </li>
<li>Discover what DockYard does to support the learning growth of their employees.</li>
<li>Learn more about DockYard Friday and the exciting projects that have emerged from it.</li>
<li>Helpful resources for learning Elixir and how to remain a curious learner as a developer.</li>
<li>Find out the top skills that make a great engineering manager at DockYard today.</li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>Mike Binns on Twitter — <a href="https://twitter.com/1stAvenger" rel="nofollow">https://twitter.com/1stAvenger</a><br>
Mike Binns on LinkedIn — <a href="https://www.linkedin.com/in/mikebinns" rel="nofollow">https://www.linkedin.com/in/mikebinns</a><br>
Alex Garibay — <a href="https://alexgaribay.com/" rel="nofollow">https://alexgaribay.com/</a><br>
Alex Garibay on Twitter — <a href="https://twitter.com/_AlexGaribay" rel="nofollow">https://twitter.com/_AlexGaribay</a><br>
Alex Garibay on LinkedIn — <a href="https://www.linkedin.com/in/alexandergaribay/" rel="nofollow">https://www.linkedin.com/in/alexandergaribay/</a><br>
DockYard — <a href="https://DockYard.com/" rel="nofollow">https://DockYard.com/</a><br>
SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
RailsConf — <a href="https://railsconf.com/" rel="nofollow">https://railsconf.com/</a><br>
Chris McCord — <a href="http://chrismccord.com/" rel="nofollow">http://chrismccord.com/</a><br>
Ember — <a href="https://emberjs.com/" rel="nofollow">https://emberjs.com/</a><br>
Live View — <a href="https://support.google.com/maps/thread/11554255?hl=en" rel="nofollow">https://support.google.com/maps/thread/11554255?hl=en</a><br>
Elixir in Action — <a href="https://www.amazon.com/Elixir-Action-Sa%C5%A1a-Juri-cacute/dp/1617295027" rel="nofollow">https://www.amazon.com/Elixir-Action-Sa%C5%A1a-Juri-cacute/dp/1617295027</a> <br>
Elixir Conf 2014 Keynote by Dave Thomas — <a href="https://www.youtube.com/watch?v=5hDVftaPQwY" rel="nofollow">https://www.youtube.com/watch?v=5hDVftaPQwY</a><br>
Sarah Drasner — <a href="https://sarahdrasnerdesign.com/" rel="nofollow">https://sarahdrasnerdesign.com/</a><br>
Lonestar Elixir — <a href="https://lonestarelixir.com/" rel="nofollow">https://lonestarelixir.com/</a><br>
Programming Phoenix — <a href="https://www.amazon.com/Programming-Phoenix-Productive-Reliable-Fast/dp/1680501453" rel="nofollow">https://www.amazon.com/Programming-Phoenix-Productive-Reliable-Fast/dp/1680501453</a><br>
Jason Goldberger — <a href="https://twitter.com/jsonlouis_" rel="nofollow">https://twitter.com/jsonlouis_</a></p><p>Special Guests: Alex Garibay and Mike Binns.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Sean Lewis from Divvy on Performance, Hiring and Training</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/s3e12-divvy</link>
      <guid isPermaLink="false">37389f65-249a-4e59-bdac-c71a646d2b23</guid>
      <pubDate>Thu, 13 Feb 2020 06:00:00 -0500</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/37389f65-249a-4e59-bdac-c71a646d2b23.mp3" length="50367014" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>3</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Today on Elixir Wizards we are delighted to be joined by Sean Lewis, a senior backend architect at Divvy. One of the many impressive facts about Sean is that he is entirely self-taught, from dabbling in Python and coding to eventually writing a bunch of Ruby tests and working his way up in the product development sphere. In his free time, he likes to play around with electronics and work on other tech-related projects such as developing custom smart home devices. In this episode, Sean discusses his recent Meetup talk on the implementation of Broadway and explains Divvy’s tech stack choices that include React, Elixir, and Python. He dives into the topic of hiring for Elixir, outlining the challenges and providing strategies and resources to equip new developers in the area of functional programming.</itunes:subtitle>
      <itunes:duration>34:34</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>Today on Elixir Wizards we are delighted to be joined by Sean Lewis, a senior backend architect at Divvy. One of the many impressive facts about Sean is that he is entirely self-taught, from dabbling in Python and coding to eventually writing a bunch of Ruby tests and working his way up in the product development sphere. In his free time, he likes to play around with electronics and work on other tech-related projects such as developing custom smart home devices. In this episode, Sean discusses his recent Meetup talk on the implementation of Broadway and explains Divvy’s tech stack choices that include React, Elixir, and Python. He dives into the topic of hiring for Elixir, outlining the challenges and providing strategies and resources to equip new developers in the area of functional programming. For Sean, the most important aspect of onboarding is teaching newcomers to ask the right questions since this is the foundation of the problem-solving process. He shares about Divvy’s approach to recruitment, his role as mentor, how they go about retaining and continuously growing their developers, the importance of being teachable, and then Sean concludes by giving listeners practical advice for ensuring data fidelity.
Key Points From This Episode:
Sean’s self-taught journey and role as senior backend architect at Divvy. 
The smart home projects he has recently worked on, including a smart garage. 
An overview of Broadway and Sean’s Meetup talk regarding implementation. 
The straightforward tech stack at Divvy: React, Elixir, and Python. 
The difficulty of hiring for Elixir and finding fintech companies that use Elixir. 
Strategies and resources for training new engineers on Elixir and functional programming. 
Why fintech works well with functional programming in the context of authorization. 
Training state-minimization as a primary concern.
Onboarding: a process of teaching developers to ask the right questions. 
Divvy’s approach to finding and recruiting new employees. 
Thoughts on why so many Utahn companies use Elixir and the city’s exponential growth. 
How Sean was recruited by Divvy, his progression to architect, and his role as a mentor. 
Critical practices for onboarding developers, including assimilating them into the culture. 
How Devvy continues to grow and retain its engineers. 
The importance of challenging yourself, constantly learning, and staying teachable. 
Implementing high-quality checkpoints and other advice for ensuring data fidelity. 
Links Mentioned in Today’s Episode:
Sean Lewis on LinkedIn — https://www.linkedin.com/in/sean-lewis-40375077/
Sean Lewis on Twitter — https://twitter.com/fricsean?lang=en
Sean Lewis on GitHub — https://github.com/SophisticaSean
Divvy — https://getdivvy.com
Ruby — https://www.ruby-lang.org/en/
Broadway — https://hexdocs.pm/broadway/amazon-sqs.html
Utah Elixir Meetup — https://www.meetup.com/utah-elixir
React — https://reactjs.org
Elixir — https://elixir-lang.org
Susumu Yamazaki on Twitter — https://twitter.com/zacky1972
Domain Modeling Made Functional — https://www.amazon.com/Domain-Modeling-Made-Functional-Domain-Driven-ebook/dp/B07B44BPFB
Slack — https://slack.com/
MongoDB — https://www.mongodb.com
PostgreSQL — https://www.postgresql.org
Elixir Wizards Podcast — https://podcast.smartlogic.io
SmartLogic — https://smartlogic.io/ 
 Special Guest: Sean Lewis.
</description>
      <itunes:keywords>elixir, phoenix</itunes:keywords>
      <content:encoded><![CDATA[
        <p>Today on Elixir Wizards we are delighted to be joined by Sean Lewis, a senior backend architect at Divvy. One of the many impressive facts about Sean is that he is entirely self-taught, from dabbling in Python and coding to eventually writing a bunch of Ruby tests and working his way up in the product development sphere. In his free time, he likes to play around with electronics and work on other tech-related projects such as developing custom smart home devices. In this episode, Sean discusses his recent Meetup talk on the implementation of Broadway and explains Divvy’s tech stack choices that include React, Elixir, and Python. He dives into the topic of hiring for Elixir, outlining the challenges and providing strategies and resources to equip new developers in the area of functional programming. For Sean, the most important aspect of onboarding is teaching newcomers to ask the right questions since this is the foundation of the problem-solving process. He shares about Divvy’s approach to recruitment, his role as mentor, how they go about retaining and continuously growing their developers, the importance of being teachable, and then Sean concludes by giving listeners practical advice for ensuring data fidelity.</p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>Sean’s self-taught journey and role as senior backend architect at Divvy. </li>
<li>The smart home projects he has recently worked on, including a smart garage. </li>
<li>An overview of Broadway and Sean’s Meetup talk regarding implementation. </li>
<li>The straightforward tech stack at Divvy: React, Elixir, and Python. </li>
<li>The difficulty of hiring for Elixir and finding fintech companies that use Elixir. </li>
<li>Strategies and resources for training new engineers on Elixir and functional programming. </li>
<li>Why fintech works well with functional programming in the context of authorization. </li>
<li>Training state-minimization as a primary concern.</li>
<li>Onboarding: a process of teaching developers to ask the right questions. </li>
<li>Divvy’s approach to finding and recruiting new employees. </li>
<li>Thoughts on why so many Utahn companies use Elixir and the city’s exponential growth. </li>
<li>How Sean was recruited by Divvy, his progression to architect, and his role as a mentor. </li>
<li>Critical practices for onboarding developers, including assimilating them into the culture. </li>
<li>How Devvy continues to grow and retain its engineers. </li>
<li>The importance of challenging yourself, constantly learning, and staying teachable. </li>
<li>Implementing high-quality checkpoints and other advice for ensuring data fidelity. </li>
</ul>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>Sean Lewis on LinkedIn — <a href="https://www.linkedin.com/in/sean-lewis-40375077/" rel="nofollow">https://www.linkedin.com/in/sean-lewis-40375077/</a><br>
Sean Lewis on Twitter — <a href="https://twitter.com/fricsean?lang=en" rel="nofollow">https://twitter.com/fricsean?lang=en</a><br>
Sean Lewis on GitHub — <a href="https://github.com/SophisticaSean" rel="nofollow">https://github.com/SophisticaSean</a><br>
Divvy — <a href="https://getdivvy.com" rel="nofollow">https://getdivvy.com</a><br>
Ruby — <a href="https://www.ruby-lang.org/en/" rel="nofollow">https://www.ruby-lang.org/en/</a><br>
Broadway — <a href="https://hexdocs.pm/broadway/amazon-sqs.html" rel="nofollow">https://hexdocs.pm/broadway/amazon-sqs.html</a><br>
Utah Elixir Meetup — <a href="https://www.meetup.com/utah-elixir" rel="nofollow">https://www.meetup.com/utah-elixir</a><br>
React — <a href="https://reactjs.org" rel="nofollow">https://reactjs.org</a><br>
Elixir — <a href="https://elixir-lang.org" rel="nofollow">https://elixir-lang.org</a><br>
Susumu Yamazaki on Twitter — <a href="https://twitter.com/zacky1972" rel="nofollow">https://twitter.com/zacky1972</a><br>
Domain Modeling Made Functional — <a href="https://www.amazon.com/Domain-Modeling-Made-Functional-Domain-Driven-ebook/dp/B07B44BPFB" rel="nofollow">https://www.amazon.com/Domain-Modeling-Made-Functional-Domain-Driven-ebook/dp/B07B44BPFB</a><br>
Slack — <a href="https://slack.com/" rel="nofollow">https://slack.com/</a><br>
MongoDB — <a href="https://www.mongodb.com" rel="nofollow">https://www.mongodb.com</a><br>
PostgreSQL — <a href="https://www.postgresql.org" rel="nofollow">https://www.postgresql.org</a><br>
Elixir Wizards Podcast — <a href="https://podcast.smartlogic.io" rel="nofollow">https://podcast.smartlogic.io</a><br>
SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> </p><p>Special Guest: Sean Lewis.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Today on Elixir Wizards we are delighted to be joined by Sean Lewis, a senior backend architect at Divvy. One of the many impressive facts about Sean is that he is entirely self-taught, from dabbling in Python and coding to eventually writing a bunch of Ruby tests and working his way up in the product development sphere. In his free time, he likes to play around with electronics and work on other tech-related projects such as developing custom smart home devices. In this episode, Sean discusses his recent Meetup talk on the implementation of Broadway and explains Divvy’s tech stack choices that include React, Elixir, and Python. He dives into the topic of hiring for Elixir, outlining the challenges and providing strategies and resources to equip new developers in the area of functional programming. For Sean, the most important aspect of onboarding is teaching newcomers to ask the right questions since this is the foundation of the problem-solving process. He shares about Divvy’s approach to recruitment, his role as mentor, how they go about retaining and continuously growing their developers, the importance of being teachable, and then Sean concludes by giving listeners practical advice for ensuring data fidelity.</p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>Sean’s self-taught journey and role as senior backend architect at Divvy. </li>
<li>The smart home projects he has recently worked on, including a smart garage. </li>
<li>An overview of Broadway and Sean’s Meetup talk regarding implementation. </li>
<li>The straightforward tech stack at Divvy: React, Elixir, and Python. </li>
<li>The difficulty of hiring for Elixir and finding fintech companies that use Elixir. </li>
<li>Strategies and resources for training new engineers on Elixir and functional programming. </li>
<li>Why fintech works well with functional programming in the context of authorization. </li>
<li>Training state-minimization as a primary concern.</li>
<li>Onboarding: a process of teaching developers to ask the right questions. </li>
<li>Divvy’s approach to finding and recruiting new employees. </li>
<li>Thoughts on why so many Utahn companies use Elixir and the city’s exponential growth. </li>
<li>How Sean was recruited by Divvy, his progression to architect, and his role as a mentor. </li>
<li>Critical practices for onboarding developers, including assimilating them into the culture. </li>
<li>How Devvy continues to grow and retain its engineers. </li>
<li>The importance of challenging yourself, constantly learning, and staying teachable. </li>
<li>Implementing high-quality checkpoints and other advice for ensuring data fidelity. </li>
</ul>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>Sean Lewis on LinkedIn — <a href="https://www.linkedin.com/in/sean-lewis-40375077/" rel="nofollow">https://www.linkedin.com/in/sean-lewis-40375077/</a><br>
Sean Lewis on Twitter — <a href="https://twitter.com/fricsean?lang=en" rel="nofollow">https://twitter.com/fricsean?lang=en</a><br>
Sean Lewis on GitHub — <a href="https://github.com/SophisticaSean" rel="nofollow">https://github.com/SophisticaSean</a><br>
Divvy — <a href="https://getdivvy.com" rel="nofollow">https://getdivvy.com</a><br>
Ruby — <a href="https://www.ruby-lang.org/en/" rel="nofollow">https://www.ruby-lang.org/en/</a><br>
Broadway — <a href="https://hexdocs.pm/broadway/amazon-sqs.html" rel="nofollow">https://hexdocs.pm/broadway/amazon-sqs.html</a><br>
Utah Elixir Meetup — <a href="https://www.meetup.com/utah-elixir" rel="nofollow">https://www.meetup.com/utah-elixir</a><br>
React — <a href="https://reactjs.org" rel="nofollow">https://reactjs.org</a><br>
Elixir — <a href="https://elixir-lang.org" rel="nofollow">https://elixir-lang.org</a><br>
Susumu Yamazaki on Twitter — <a href="https://twitter.com/zacky1972" rel="nofollow">https://twitter.com/zacky1972</a><br>
Domain Modeling Made Functional — <a href="https://www.amazon.com/Domain-Modeling-Made-Functional-Domain-Driven-ebook/dp/B07B44BPFB" rel="nofollow">https://www.amazon.com/Domain-Modeling-Made-Functional-Domain-Driven-ebook/dp/B07B44BPFB</a><br>
Slack — <a href="https://slack.com/" rel="nofollow">https://slack.com/</a><br>
MongoDB — <a href="https://www.mongodb.com" rel="nofollow">https://www.mongodb.com</a><br>
PostgreSQL — <a href="https://www.postgresql.org" rel="nofollow">https://www.postgresql.org</a><br>
Elixir Wizards Podcast — <a href="https://podcast.smartlogic.io" rel="nofollow">https://podcast.smartlogic.io</a><br>
SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> </p><p>Special Guest: Sean Lewis.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Paul Schoenfelder and Hans Elias Josephsen on Lumen and Performance</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/s3e11-lumen</link>
      <guid isPermaLink="false">5c493edc-c294-4fdd-b9f9-86a091800d96</guid>
      <pubDate>Thu, 06 Feb 2020 06:00:00 -0500</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/5c493edc-c294-4fdd-b9f9-86a091800d96.mp3" length="75445954" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>3</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Paul Schoenfelder and Hans Elias Josephsen from DockYard have been working on Lumen, and in this episode, we discuss how this project is incorporated with WebAssembly, a binary instruction format that ultimately allows Elixir to be run in the browser and preserve the semantics of the language. We talk specifics - the data flow and process of writing Elixir, the compiler, interpreter, and run-time functions involved, Rust as the programming language of choice, and when users can expect Lumen to be released.</itunes:subtitle>
      <itunes:duration>51:59</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>In line with our current working-with-Elixir theme, today we’re talking about performance with Paul Schoenfelder and Hans Elias Josephsen from DockYard. The two have been working on Lumen, and in this episode, they discuss how this project is incorporated with WebAssembly, a binary instruction format that ultimately allows Elixir to be run in the browser and preserve the semantics of the language. Paul and Hans talk about the specific aspects of Lumen they are working on; the data flow and process of writing Elixir; and the compiler, interpreter and run-time functions involved. Joining in this conversation, you will also hear how they approached starting developing Lumen as a brand new compiler, researching, the aspects Paul wanted to tackle first, and when users can expect Lumen to be released. We also talk about the performance concerns they encountered along the way, the many reasons why Rust was their programming language of choice, and their thoughts on generic associated types in Rust. 
Key Points From This Episode:
• How Paul and Hans got introduced to Elixir and working for DockYard.
• An overview of what Lumen is and how it relates to WebAssembly. 
• WebAssembly code to run Elixir in the browser and preserve the semantics of the language. 
• The different aspects of the Lumen project that Paul and Hans are involved in. 
• The data flow and process when writing Elixir and how the compiler function features.
• Taking advantage of optimizations that can be performed on the code that is generated. 
• An explanation of the interpreter and run-time parts of the project. 
• How they approached the major task of starting with a brand new compiler. 
• The process of researching and why Paul wanted to get a frontend in place first. 
• The production readiness of Lumen and when they expect to release it. 
• Performance concerns they encountered during development. 
• The relevance of code size for the WebAssembly backend to be usable.  
• Why Rust was the best choice for building the compiler. 
• Using Elixir to generate a standard binary that can run on any machine. 
• A description of generic associated types in Rust and why they are controversial. 
Links Mentioned in Today’s Episode:
Paul Schoenfelder on LinkedIn — https://www.linkedin.com/in/gotbones/
Paul Schoenfelder on Twitter — https://twitter.com/gotbones?lang=en
Hans Elias Josephsen on Twitter — https://twitter.com/hansihe
DockYard — https://dockyard.com
Elixir — https://elixir-lang.org
WebAssembly — https://webassembly.org
Rust — https://www.rust-lang.org
JavaScript — https://www.javascript.com
C++ — http://www.cplusplus.com
SmartLogic — https://smartlogic.io/ 
 Special Guests: Hans Elias Josephsen and Paul Schoenfelder.
</description>
      <itunes:keywords>elixir, lumen, rust</itunes:keywords>
      <content:encoded><![CDATA[
        <p>In line with our current working-with-Elixir theme, today we’re talking about performance with Paul Schoenfelder and Hans Elias Josephsen from DockYard. The two have been working on Lumen, and in this episode, they discuss how this project is incorporated with WebAssembly, a binary instruction format that ultimately allows Elixir to be run in the browser and preserve the semantics of the language. Paul and Hans talk about the specific aspects of Lumen they are working on; the data flow and process of writing Elixir; and the compiler, interpreter and run-time functions involved. Joining in this conversation, you will also hear how they approached starting developing Lumen as a brand new compiler, researching, the aspects Paul wanted to tackle first, and when users can expect Lumen to be released. We also talk about the performance concerns they encountered along the way, the many reasons why Rust was their programming language of choice, and their thoughts on generic associated types in Rust. </p>

<p>Key Points From This Episode:</p>

<p>• How Paul and Hans got introduced to Elixir and working for DockYard.<br>
• An overview of what Lumen is and how it relates to WebAssembly. <br>
• WebAssembly code to run Elixir in the browser and preserve the semantics of the language. <br>
• The different aspects of the Lumen project that Paul and Hans are involved in. <br>
• The data flow and process when writing Elixir and how the compiler function features.<br>
• Taking advantage of optimizations that can be performed on the code that is generated. <br>
• An explanation of the interpreter and run-time parts of the project. <br>
• How they approached the major task of starting with a brand new compiler. <br>
• The process of researching and why Paul wanted to get a frontend in place first. <br>
• The production readiness of Lumen and when they expect to release it. <br>
• Performance concerns they encountered during development. <br>
• The relevance of code size for the WebAssembly backend to be usable.<br><br>
• Why Rust was the best choice for building the compiler. <br>
• Using Elixir to generate a standard binary that can run on any machine. <br>
• A description of generic associated types in Rust and why they are controversial. </p>

<p>Links Mentioned in Today’s Episode:</p>

<p>Paul Schoenfelder on LinkedIn — <a href="https://www.linkedin.com/in/gotbones/" rel="nofollow">https://www.linkedin.com/in/gotbones/</a><br>
Paul Schoenfelder on Twitter — <a href="https://twitter.com/gotbones?lang=en" rel="nofollow">https://twitter.com/gotbones?lang=en</a><br>
Hans Elias Josephsen on Twitter — <a href="https://twitter.com/hansihe" rel="nofollow">https://twitter.com/hansihe</a><br>
DockYard — <a href="https://dockyard.com" rel="nofollow">https://dockyard.com</a><br>
Elixir — <a href="https://elixir-lang.org" rel="nofollow">https://elixir-lang.org</a><br>
WebAssembly — <a href="https://webassembly.org" rel="nofollow">https://webassembly.org</a><br>
Rust — <a href="https://www.rust-lang.org" rel="nofollow">https://www.rust-lang.org</a><br>
JavaScript — <a href="https://www.javascript.com" rel="nofollow">https://www.javascript.com</a><br>
C++ — <a href="http://www.cplusplus.com" rel="nofollow">http://www.cplusplus.com</a><br>
SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> </p><p>Special Guests: Hans Elias Josephsen and Paul Schoenfelder.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>In line with our current working-with-Elixir theme, today we’re talking about performance with Paul Schoenfelder and Hans Elias Josephsen from DockYard. The two have been working on Lumen, and in this episode, they discuss how this project is incorporated with WebAssembly, a binary instruction format that ultimately allows Elixir to be run in the browser and preserve the semantics of the language. Paul and Hans talk about the specific aspects of Lumen they are working on; the data flow and process of writing Elixir; and the compiler, interpreter and run-time functions involved. Joining in this conversation, you will also hear how they approached starting developing Lumen as a brand new compiler, researching, the aspects Paul wanted to tackle first, and when users can expect Lumen to be released. We also talk about the performance concerns they encountered along the way, the many reasons why Rust was their programming language of choice, and their thoughts on generic associated types in Rust. </p>

<p>Key Points From This Episode:</p>

<p>• How Paul and Hans got introduced to Elixir and working for DockYard.<br>
• An overview of what Lumen is and how it relates to WebAssembly. <br>
• WebAssembly code to run Elixir in the browser and preserve the semantics of the language. <br>
• The different aspects of the Lumen project that Paul and Hans are involved in. <br>
• The data flow and process when writing Elixir and how the compiler function features.<br>
• Taking advantage of optimizations that can be performed on the code that is generated. <br>
• An explanation of the interpreter and run-time parts of the project. <br>
• How they approached the major task of starting with a brand new compiler. <br>
• The process of researching and why Paul wanted to get a frontend in place first. <br>
• The production readiness of Lumen and when they expect to release it. <br>
• Performance concerns they encountered during development. <br>
• The relevance of code size for the WebAssembly backend to be usable.<br><br>
• Why Rust was the best choice for building the compiler. <br>
• Using Elixir to generate a standard binary that can run on any machine. <br>
• A description of generic associated types in Rust and why they are controversial. </p>

<p>Links Mentioned in Today’s Episode:</p>

<p>Paul Schoenfelder on LinkedIn — <a href="https://www.linkedin.com/in/gotbones/" rel="nofollow">https://www.linkedin.com/in/gotbones/</a><br>
Paul Schoenfelder on Twitter — <a href="https://twitter.com/gotbones?lang=en" rel="nofollow">https://twitter.com/gotbones?lang=en</a><br>
Hans Elias Josephsen on Twitter — <a href="https://twitter.com/hansihe" rel="nofollow">https://twitter.com/hansihe</a><br>
DockYard — <a href="https://dockyard.com" rel="nofollow">https://dockyard.com</a><br>
Elixir — <a href="https://elixir-lang.org" rel="nofollow">https://elixir-lang.org</a><br>
WebAssembly — <a href="https://webassembly.org" rel="nofollow">https://webassembly.org</a><br>
Rust — <a href="https://www.rust-lang.org" rel="nofollow">https://www.rust-lang.org</a><br>
JavaScript — <a href="https://www.javascript.com" rel="nofollow">https://www.javascript.com</a><br>
C++ — <a href="http://www.cplusplus.com" rel="nofollow">http://www.cplusplus.com</a><br>
SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> </p><p>Special Guests: Hans Elias Josephsen and Paul Schoenfelder.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Sophie DeBenedetto and Meryl Dakin on Training and Building Elixir Projects Under Constraints</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/s3e10-debenedetto-dakin</link>
      <guid isPermaLink="false">37d41249-7185-40c3-a4c3-3d761103ed16</guid>
      <pubDate>Thu, 30 Jan 2020 06:00:00 -0500</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/37d41249-7185-40c3-a4c3-3d761103ed16.mp3" length="65675346" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>3</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Sophie DeBenedetto from GitHub and Meryl Dakin from Frame.io talk about specific ways to develop new features while simultaneously managing team members and other projects. We discuss Elixir-specific challenges encountered while developing applications for 2U, how Elixir’s failure-first programming capability guided them, how they prepare for training workshops, and the productivity hacks that keep them focused and energized. </itunes:subtitle>
      <itunes:duration>45:12</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>Today on the show we are joined by Sophie DeBenedetto from GitHub and Meryl Dakin from Frame.io to talk about the processes involved in training others and building Elixir projects. They share about studying and working together at the Flatiron School and what they do now in their respective new roles at Github and Frame.io. During their time at Flatiron, they worked on various projects, often collaborating with engineering teams from other companies and having to train these team members in Elixir. They talk about how they managed to develop new features while simultaneously onboarding new people and getting everyone on the same page. For them, the pair programming model had been most beneficial, and they discuss the habits and practices they implemented to encourage team members, optimize each learning experience, and share knowledge during training events. Sophie and Meryl also share the Elixir-specific challenges they encountered while developing applications for 2U, how Elixir’s failure-first programming capability guided them, how they prepare for training workshops, and the productivity hacks that keep them focused and energized. 
Key Points From This Episode:
• How Sophie and Meryl know each other from working and studying at the Flatiron School. 
• Frame.io as a tool that facilitates the communication between video editors and clients. 
• Meryl’s new role as a full-stack developer working with Elixir and React. 
• The projects they worked on at Flatiron and partnering with various companies like 2U. 
• Their secret to developing new features while also introducing new team members to Elixir.  
• The benefits of pair programming and teaching a programming language to others. 
• Reserving time to celebrate wins and knowledge share during training events. 
• Key lessons they learned from their collaboration with the 2U team. 
• Elixir-specific challenges during the development of the applications project with 2U. 
• How Elixir’s failure-first programming capability ultimately helps developers. 
• Sophie and Meryl’s experience using LiveView at Flatiron and the problems encountered. 
• The work that went into preparing for training workshops. 
• Advice for teaching someone who is not technical to become a working developer.
• Productivity hacks to stay focused and regain energy. 
Links Mentioned in Today’s Episode:
Sophie DeBenedetto on LinkedIn — https://www.linkedin.com/in/sophiedebenedetto/
Sophie DeBenedetto on Twitter — https://twitter.com/sm_debenedetto
Meryl Dakin in LinkedIn — https://www.linkedin.com/in/meryldakin/
Meryl Dakin on Twitter — https://twitter.com/meryldakin
Eric Oestrich — https://oestrich.org
Frame.io — https://frame.io
GitHub — https://github.com
Flatiron School — https://flatironschool.com
Elixir — https://elixir-lang.org
React — https://reactjs.org
2U — https://2u.com
Kubernetes — https://kubernetes.io
Ruby — https://www.ruby-lang.org/en/
Elixir School — https://elixirschool.com/en/
Drawing on the Right Side of the Brain — https://www.amazon.com/Drawing-Right-Side-Brain-Definitive/dp/1585429201
Etsy — https://www.etsy.com
EMPEX NYC Conference — https://empex.co/nyc.html
SmartLogic — https://smartlogic.io/ 
 Special Guests: Meryl Dakin and Sophie DeBenedetto.
</description>
      <itunes:keywords>elixir, 2U,Frame.io,github</itunes:keywords>
      <content:encoded><![CDATA[
        <p>Today on the show we are joined by Sophie DeBenedetto from GitHub and Meryl Dakin from Frame.io to talk about the processes involved in training others and building Elixir projects. They share about studying and working together at the Flatiron School and what they do now in their respective new roles at Github and Frame.io. During their time at Flatiron, they worked on various projects, often collaborating with engineering teams from other companies and having to train these team members in Elixir. They talk about how they managed to develop new features while simultaneously onboarding new people and getting everyone on the same page. For them, the pair programming model had been most beneficial, and they discuss the habits and practices they implemented to encourage team members, optimize each learning experience, and share knowledge during training events. Sophie and Meryl also share the Elixir-specific challenges they encountered while developing applications for 2U, how Elixir’s failure-first programming capability guided them, how they prepare for training workshops, and the productivity hacks that keep them focused and energized. </p>

<p>Key Points From This Episode:</p>

<p>• How Sophie and Meryl know each other from working and studying at the Flatiron School. <br>
• Frame.io as a tool that facilitates the communication between video editors and clients. <br>
• Meryl’s new role as a full-stack developer working with Elixir and React. <br>
• The projects they worked on at Flatiron and partnering with various companies like 2U. <br>
• Their secret to developing new features while also introducing new team members to Elixir.<br><br>
• The benefits of pair programming and teaching a programming language to others. <br>
• Reserving time to celebrate wins and knowledge share during training events. <br>
• Key lessons they learned from their collaboration with the 2U team. <br>
• Elixir-specific challenges during the development of the applications project with 2U. <br>
• How Elixir’s failure-first programming capability ultimately helps developers. <br>
• Sophie and Meryl’s experience using LiveView at Flatiron and the problems encountered. <br>
• The work that went into preparing for training workshops. <br>
• Advice for teaching someone who is not technical to become a working developer.<br>
• Productivity hacks to stay focused and regain energy. </p>

<p>Links Mentioned in Today’s Episode:</p>

<p>Sophie DeBenedetto on LinkedIn — <a href="https://www.linkedin.com/in/sophiedebenedetto/" rel="nofollow">https://www.linkedin.com/in/sophiedebenedetto/</a><br>
Sophie DeBenedetto on Twitter — <a href="https://twitter.com/sm_debenedetto" rel="nofollow">https://twitter.com/sm_debenedetto</a><br>
Meryl Dakin in LinkedIn — <a href="https://www.linkedin.com/in/meryldakin/" rel="nofollow">https://www.linkedin.com/in/meryldakin/</a><br>
Meryl Dakin on Twitter — <a href="https://twitter.com/meryldakin" rel="nofollow">https://twitter.com/meryldakin</a><br>
Eric Oestrich — <a href="https://oestrich.org" rel="nofollow">https://oestrich.org</a><br>
Frame.io — <a href="https://frame.io" rel="nofollow">https://frame.io</a><br>
GitHub — <a href="https://github.com" rel="nofollow">https://github.com</a><br>
Flatiron School — <a href="https://flatironschool.com" rel="nofollow">https://flatironschool.com</a><br>
Elixir — <a href="https://elixir-lang.org" rel="nofollow">https://elixir-lang.org</a><br>
React — <a href="https://reactjs.org" rel="nofollow">https://reactjs.org</a><br>
2U — <a href="https://2u.com" rel="nofollow">https://2u.com</a><br>
Kubernetes — <a href="https://kubernetes.io" rel="nofollow">https://kubernetes.io</a><br>
Ruby — <a href="https://www.ruby-lang.org/en/" rel="nofollow">https://www.ruby-lang.org/en/</a><br>
Elixir School — <a href="https://elixirschool.com/en/" rel="nofollow">https://elixirschool.com/en/</a><br>
Drawing on the Right Side of the Brain — <a href="https://www.amazon.com/Drawing-Right-Side-Brain-Definitive/dp/1585429201" rel="nofollow">https://www.amazon.com/Drawing-Right-Side-Brain-Definitive/dp/1585429201</a><br>
Etsy — <a href="https://www.etsy.com" rel="nofollow">https://www.etsy.com</a><br>
EMPEX NYC Conference — <a href="https://empex.co/nyc.html" rel="nofollow">https://empex.co/nyc.html</a><br>
SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> </p><p>Special Guests: Meryl Dakin and Sophie DeBenedetto.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Today on the show we are joined by Sophie DeBenedetto from GitHub and Meryl Dakin from Frame.io to talk about the processes involved in training others and building Elixir projects. They share about studying and working together at the Flatiron School and what they do now in their respective new roles at Github and Frame.io. During their time at Flatiron, they worked on various projects, often collaborating with engineering teams from other companies and having to train these team members in Elixir. They talk about how they managed to develop new features while simultaneously onboarding new people and getting everyone on the same page. For them, the pair programming model had been most beneficial, and they discuss the habits and practices they implemented to encourage team members, optimize each learning experience, and share knowledge during training events. Sophie and Meryl also share the Elixir-specific challenges they encountered while developing applications for 2U, how Elixir’s failure-first programming capability guided them, how they prepare for training workshops, and the productivity hacks that keep them focused and energized. </p>

<p>Key Points From This Episode:</p>

<p>• How Sophie and Meryl know each other from working and studying at the Flatiron School. <br>
• Frame.io as a tool that facilitates the communication between video editors and clients. <br>
• Meryl’s new role as a full-stack developer working with Elixir and React. <br>
• The projects they worked on at Flatiron and partnering with various companies like 2U. <br>
• Their secret to developing new features while also introducing new team members to Elixir.<br><br>
• The benefits of pair programming and teaching a programming language to others. <br>
• Reserving time to celebrate wins and knowledge share during training events. <br>
• Key lessons they learned from their collaboration with the 2U team. <br>
• Elixir-specific challenges during the development of the applications project with 2U. <br>
• How Elixir’s failure-first programming capability ultimately helps developers. <br>
• Sophie and Meryl’s experience using LiveView at Flatiron and the problems encountered. <br>
• The work that went into preparing for training workshops. <br>
• Advice for teaching someone who is not technical to become a working developer.<br>
• Productivity hacks to stay focused and regain energy. </p>

<p>Links Mentioned in Today’s Episode:</p>

<p>Sophie DeBenedetto on LinkedIn — <a href="https://www.linkedin.com/in/sophiedebenedetto/" rel="nofollow">https://www.linkedin.com/in/sophiedebenedetto/</a><br>
Sophie DeBenedetto on Twitter — <a href="https://twitter.com/sm_debenedetto" rel="nofollow">https://twitter.com/sm_debenedetto</a><br>
Meryl Dakin in LinkedIn — <a href="https://www.linkedin.com/in/meryldakin/" rel="nofollow">https://www.linkedin.com/in/meryldakin/</a><br>
Meryl Dakin on Twitter — <a href="https://twitter.com/meryldakin" rel="nofollow">https://twitter.com/meryldakin</a><br>
Eric Oestrich — <a href="https://oestrich.org" rel="nofollow">https://oestrich.org</a><br>
Frame.io — <a href="https://frame.io" rel="nofollow">https://frame.io</a><br>
GitHub — <a href="https://github.com" rel="nofollow">https://github.com</a><br>
Flatiron School — <a href="https://flatironschool.com" rel="nofollow">https://flatironschool.com</a><br>
Elixir — <a href="https://elixir-lang.org" rel="nofollow">https://elixir-lang.org</a><br>
React — <a href="https://reactjs.org" rel="nofollow">https://reactjs.org</a><br>
2U — <a href="https://2u.com" rel="nofollow">https://2u.com</a><br>
Kubernetes — <a href="https://kubernetes.io" rel="nofollow">https://kubernetes.io</a><br>
Ruby — <a href="https://www.ruby-lang.org/en/" rel="nofollow">https://www.ruby-lang.org/en/</a><br>
Elixir School — <a href="https://elixirschool.com/en/" rel="nofollow">https://elixirschool.com/en/</a><br>
Drawing on the Right Side of the Brain — <a href="https://www.amazon.com/Drawing-Right-Side-Brain-Definitive/dp/1585429201" rel="nofollow">https://www.amazon.com/Drawing-Right-Side-Brain-Definitive/dp/1585429201</a><br>
Etsy — <a href="https://www.etsy.com" rel="nofollow">https://www.etsy.com</a><br>
EMPEX NYC Conference — <a href="https://empex.co/nyc.html" rel="nofollow">https://empex.co/nyc.html</a><br>
SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> </p><p>Special Guests: Meryl Dakin and Sophie DeBenedetto.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Brooklyn Zelenka on Functional Programming</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/s3e9-zelenka</link>
      <guid isPermaLink="false">590ef7b4-3a91-4c74-9325-2568d7adecdb</guid>
      <pubDate>Thu, 23 Jan 2020 06:00:00 -0500</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/590ef7b4-3a91-4c74-9325-2568d7adecdb.mp3" length="57370076" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>3</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>In today’s episode we have one of our favorite recurring guests, Brooklyn Zelenka, joining us once again! Brooklyn has been on the show in both the first and second seasons to speak about Elixir and functional programming. In those conversations, it came up that this topic is far from exhausted, and since Season 3's theme is working with Elixir, we thought it would be great to have Brooklyn on for a third time. Today, Brooklyn does not speak to Elixir specifically though, but on functional programming more broadly.</itunes:subtitle>
      <itunes:duration>39:26</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>In today’s episode we have one of our favorite recurring guests, Brooklyn Zelenka, joining us once again! Brooklyn has been on the show in both the first and second seasons to speak about Elixir and functional programming. In those conversations, it came up that this topic is far from exhausted, and since Season 3's theme is working with Elixir, we thought it would be great to have Brooklyn on for a third time. Today, Brooklyn does not speak to Elixir specifically though, but on functional programming more broadly. Fission, her company which is working on developing next-generation hostless apps, actually uses Haskel, but Brooklyn has a ton of experience across the board. She gives us some great insights into what makes the functional versus OOP paradigm great and helps us to understand some of the inner workings of both worlds, talking about abstraction, application, data orientation, and more. Interestingly, Brooklyn does employ some imperative programming in her company through the use of Typescript, but uses a functional style to get around the context switch. We spend some time toward the end of the show digging deeper into macros, and Brooklyn helps to revise understandings of them as code which writes more code as well as clarifies the term 'homoiconic' as it relates to ASTs. Brooklyn covers a whole lot more today so hop on for a deep dive into functional programming with today's great guest.
Key Points From This Episode:
• Why Brooklyn uses FPE: it can be reused and reasoned about.
• Two things that functions provide: abstraction and application.
• Data orientation and hiding information: imperative vs functional paradigms.
• Understanding imperative programming: it’s less structured and hard to reason about.
• Challenges experienced imperative programmers face with functional programming.
• Differences between Elixir, Erlang, Haskel, Elm, and Clojure.
• Using Clojure: tradeoffs, distinctions, tooling, flexibility, and compatibility with Java.
• The language Brooklyn could use if only one existed: Racket.
• Bridging functional and imperative paradigms through disciplined use of style.
• Segfaults in Haskell related to its compatibility with lib C.
• How to use Musl instead of lib C by employing docker files.
• Algebraic types and why static types aren’t hindrances in functional languages.
• Preferences for tests or proofs and their role in finding types valuable.
• Macros as compile-time functions that are difficult to debug.
• A definition of a ‘homoiconic’: high-level syntax which represents the AST.
• What makes C macros different from Lisp ones.
• Architecture in Elixir and the need for a more user-friendly Haskell.
Links Mentioned in Today’s Episode:
SmartLogic — https://smartlogic.io/ 
Brooklyn Zelenka on LinkedIn — https://www.linkedin.com/in/brooklynzelenka/
Fission — https://fission.codes/
Seven Languages in Seven Weeks — https://www.amazon.com/Seven-Languages-Weeks-Programming-Programmers/dp/193435659X
Chris Keathley — https://keathley.io/
Hackers and Painters — https://www.amazon.com/Hackers-Painters-Big-Ideas-Computer/dp/1449389554
Paul Graham — http://www.paulgraham.com/
 Special Guest: Brooklyn Zelenka.
</description>
      <itunes:keywords>elixir, phoenix, fission</itunes:keywords>
      <content:encoded><![CDATA[
        <p>In today’s episode we have one of our favorite recurring guests, Brooklyn Zelenka, joining us once again! Brooklyn has been on the show in both the first and second seasons to speak about Elixir and functional programming. In those conversations, it came up that this topic is far from exhausted, and since Season 3&#39;s theme is working with Elixir, we thought it would be great to have Brooklyn on for a third time. Today, Brooklyn does not speak to Elixir specifically though, but on functional programming more broadly. Fission, her company which is working on developing next-generation hostless apps, actually uses Haskel, but Brooklyn has a ton of experience across the board. She gives us some great insights into what makes the functional versus OOP paradigm great and helps us to understand some of the inner workings of both worlds, talking about abstraction, application, data orientation, and more. Interestingly, Brooklyn does employ some imperative programming in her company through the use of Typescript, but uses a functional style to get around the context switch. We spend some time toward the end of the show digging deeper into macros, and Brooklyn helps to revise understandings of them as code which writes more code as well as clarifies the term &#39;homoiconic&#39; as it relates to ASTs. Brooklyn covers a whole lot more today so hop on for a deep dive into functional programming with today&#39;s great guest.</p>

<p><strong>Key Points From This Episode:</strong></p>

<p>• Why Brooklyn uses FPE: it can be reused and reasoned about.<br>
• Two things that functions provide: abstraction and application.<br>
• Data orientation and hiding information: imperative vs functional paradigms.<br>
• Understanding imperative programming: it’s less structured and hard to reason about.<br>
• Challenges experienced imperative programmers face with functional programming.<br>
• Differences between Elixir, Erlang, Haskel, Elm, and Clojure.<br>
• Using Clojure: tradeoffs, distinctions, tooling, flexibility, and compatibility with Java.<br>
• The language Brooklyn could use if only one existed: Racket.<br>
• Bridging functional and imperative paradigms through disciplined use of style.<br>
• Segfaults in Haskell related to its compatibility with lib C.<br>
• How to use Musl instead of lib C by employing docker files.<br>
• Algebraic types and why static types aren’t hindrances in functional languages.<br>
• Preferences for tests or proofs and their role in finding types valuable.<br>
• Macros as compile-time functions that are difficult to debug.<br>
• A definition of a ‘homoiconic’: high-level syntax which represents the AST.<br>
• What makes C macros different from Lisp ones.<br>
• Architecture in Elixir and the need for a more user-friendly Haskell.</p>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
Brooklyn Zelenka on LinkedIn — <a href="https://www.linkedin.com/in/brooklynzelenka/" rel="nofollow">https://www.linkedin.com/in/brooklynzelenka/</a><br>
Fission — <a href="https://fission.codes/" rel="nofollow">https://fission.codes/</a><br>
Seven Languages in Seven Weeks — <a href="https://www.amazon.com/Seven-Languages-Weeks-Programming-Programmers/dp/193435659X" rel="nofollow">https://www.amazon.com/Seven-Languages-Weeks-Programming-Programmers/dp/193435659X</a><br>
Chris Keathley — <a href="https://keathley.io/" rel="nofollow">https://keathley.io/</a><br>
Hackers and Painters — <a href="https://www.amazon.com/Hackers-Painters-Big-Ideas-Computer/dp/1449389554" rel="nofollow">https://www.amazon.com/Hackers-Painters-Big-Ideas-Computer/dp/1449389554</a><br>
Paul Graham — <a href="http://www.paulgraham.com/" rel="nofollow">http://www.paulgraham.com/</a></p><p>Special Guest: Brooklyn Zelenka.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>In today’s episode we have one of our favorite recurring guests, Brooklyn Zelenka, joining us once again! Brooklyn has been on the show in both the first and second seasons to speak about Elixir and functional programming. In those conversations, it came up that this topic is far from exhausted, and since Season 3&#39;s theme is working with Elixir, we thought it would be great to have Brooklyn on for a third time. Today, Brooklyn does not speak to Elixir specifically though, but on functional programming more broadly. Fission, her company which is working on developing next-generation hostless apps, actually uses Haskel, but Brooklyn has a ton of experience across the board. She gives us some great insights into what makes the functional versus OOP paradigm great and helps us to understand some of the inner workings of both worlds, talking about abstraction, application, data orientation, and more. Interestingly, Brooklyn does employ some imperative programming in her company through the use of Typescript, but uses a functional style to get around the context switch. We spend some time toward the end of the show digging deeper into macros, and Brooklyn helps to revise understandings of them as code which writes more code as well as clarifies the term &#39;homoiconic&#39; as it relates to ASTs. Brooklyn covers a whole lot more today so hop on for a deep dive into functional programming with today&#39;s great guest.</p>

<p><strong>Key Points From This Episode:</strong></p>

<p>• Why Brooklyn uses FPE: it can be reused and reasoned about.<br>
• Two things that functions provide: abstraction and application.<br>
• Data orientation and hiding information: imperative vs functional paradigms.<br>
• Understanding imperative programming: it’s less structured and hard to reason about.<br>
• Challenges experienced imperative programmers face with functional programming.<br>
• Differences between Elixir, Erlang, Haskel, Elm, and Clojure.<br>
• Using Clojure: tradeoffs, distinctions, tooling, flexibility, and compatibility with Java.<br>
• The language Brooklyn could use if only one existed: Racket.<br>
• Bridging functional and imperative paradigms through disciplined use of style.<br>
• Segfaults in Haskell related to its compatibility with lib C.<br>
• How to use Musl instead of lib C by employing docker files.<br>
• Algebraic types and why static types aren’t hindrances in functional languages.<br>
• Preferences for tests or proofs and their role in finding types valuable.<br>
• Macros as compile-time functions that are difficult to debug.<br>
• A definition of a ‘homoiconic’: high-level syntax which represents the AST.<br>
• What makes C macros different from Lisp ones.<br>
• Architecture in Elixir and the need for a more user-friendly Haskell.</p>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
Brooklyn Zelenka on LinkedIn — <a href="https://www.linkedin.com/in/brooklynzelenka/" rel="nofollow">https://www.linkedin.com/in/brooklynzelenka/</a><br>
Fission — <a href="https://fission.codes/" rel="nofollow">https://fission.codes/</a><br>
Seven Languages in Seven Weeks — <a href="https://www.amazon.com/Seven-Languages-Weeks-Programming-Programmers/dp/193435659X" rel="nofollow">https://www.amazon.com/Seven-Languages-Weeks-Programming-Programmers/dp/193435659X</a><br>
Chris Keathley — <a href="https://keathley.io/" rel="nofollow">https://keathley.io/</a><br>
Hackers and Painters — <a href="https://www.amazon.com/Hackers-Painters-Big-Ideas-Computer/dp/1449389554" rel="nofollow">https://www.amazon.com/Hackers-Painters-Big-Ideas-Computer/dp/1449389554</a><br>
Paul Graham — <a href="http://www.paulgraham.com/" rel="nofollow">http://www.paulgraham.com/</a></p><p>Special Guest: Brooklyn Zelenka.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Bruce and Maggie Tate from Groxio on Training</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/s3e8-groxio</link>
      <guid isPermaLink="false">f54652e5-c7c3-4165-9c4b-0ddd2ca2d14b</guid>
      <pubDate>Thu, 16 Jan 2020 06:00:00 -0500</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/f54652e5-c7c3-4165-9c4b-0ddd2ca2d14b.mp3" length="55402558" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>3</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Groxio is a great platform that allows programmers to learn new languages easily and broaden their horizons. Our guests today are the team behind Groxio, Bruce and Maggie Tate! In our discussion, we cover the basics and the not so basics of what they do, from how they got into the Elixir world and founded Groxio to the conferences they run and the books they have published. </itunes:subtitle>
      <itunes:duration>38:04</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>Groxio is a great platform that allows programmers to learn new languages easily and broaden their horizons. Our guests today are the team behind Groxio, Bruce and Maggie Tate! In our discussion, we cover the basics and the not so basics of what they do, from how they got into the Elixir world and founded Groxio to the conferences they run and the books they have published. We also talk about the benefits of learning multiple languages and Bruce makes a strong argument for the influence that smaller coding languages have had on his Elixir skills. Maggie and Bruce open up about having a professional and personal partnership and how they manage their marriage and businesses side by side. To finish off we hear about all the exciting things to expect at the Lonestar Conference this year and how it is going to be even better than last year's!
Key Points From This Episode:
• Bruce and Maggie's background in Elixir and how they started Groxio. 
• What sets Groxio apart from similar technical education companies.  
• The inspiration that Bruce got from the Crystal and Pony languages.
• How curiosity and dopamine are linked; following new and interesting pathways. 
• Maggie and Bruce's personal and professional partnership and how they manage it. 
• The Elixir books that still need to be written and under-appreciated published ones.
• A guide to Bruce's books and which to read for particular applications. 
• Running a conference; the stressful and fun parts for Maggie and Bruce.
• Aspirations for the conferences and what to expect at this year's events. 
• Exciting speakers that will be appearing at the Lone Star Conference. 
• The controversy around the new Lone Star bat logo! 
• A few special plugs from our guests for things they are passionate about.
Links Mentioned in Today’s Episode:
SmartLogic — https://smartlogic.io/ 
Bruce and Maggie Tate — https://grox.io/about
Bruce Tate on Twitter — https://twitter.com/redrapids
Maggie Tate on Twitter — https://twitter.com/gardenertate
Groxio — https://grox.io/
Gig City Elixir — https://www.gigcityelixir.com/
Lone Star Elixir — https://lonestarelixir.com/
Crystal — https://crystal-lang.org/
Pony — https://www.ponylang.io/
Joe Armstrong — https://joearms.github.io/
Elixir in Action — https://www.amazon.com/Elixir-Action-Sa%C5%A1a-Juri-cacute/dp/161729201X
Designing Elixir Systems — https://www.amazon.com/Designing-Elixir-Systems-OTP-Self-healing/dp/1680506617/
Andrea Leopardi — https://confengine.com/user/andrea-leopardi
 Special Guests: Bruce Tate and Maggie Tate.
</description>
      <itunes:keywords>elixir, phoenix, groxio, lonestar elixir</itunes:keywords>
      <content:encoded><![CDATA[
        <p>Groxio is a great platform that allows programmers to learn new languages easily and broaden their horizons. Our guests today are the team behind Groxio, Bruce and Maggie Tate! In our discussion, we cover the basics and the not so basics of what they do, from how they got into the Elixir world and founded Groxio to the conferences they run and the books they have published. We also talk about the benefits of learning multiple languages and Bruce makes a strong argument for the influence that smaller coding languages have had on his Elixir skills. Maggie and Bruce open up about having a professional and personal partnership and how they manage their marriage and businesses side by side. To finish off we hear about all the exciting things to expect at the Lonestar Conference this year and how it is going to be even better than last year&#39;s!</p>

<p><strong>Key Points From This Episode:</strong></p>

<p>• Bruce and Maggie&#39;s background in Elixir and how they started Groxio. <br>
• What sets Groxio apart from similar technical education companies.<br><br>
• The inspiration that Bruce got from the Crystal and Pony languages.<br>
• How curiosity and dopamine are linked; following new and interesting pathways. <br>
• Maggie and Bruce&#39;s personal and professional partnership and how they manage it. <br>
• The Elixir books that still need to be written and under-appreciated published ones.<br>
• A guide to Bruce&#39;s books and which to read for particular applications. <br>
• Running a conference; the stressful and fun parts for Maggie and Bruce.<br>
• Aspirations for the conferences and what to expect at this year&#39;s events. <br>
• Exciting speakers that will be appearing at the Lone Star Conference. <br>
• The controversy around the new Lone Star bat logo! <br>
• A few special plugs from our guests for things they are passionate about.</p>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
Bruce and Maggie Tate — <a href="https://grox.io/about" rel="nofollow">https://grox.io/about</a><br>
Bruce Tate on Twitter — <a href="https://twitter.com/redrapids" rel="nofollow">https://twitter.com/redrapids</a><br>
Maggie Tate on Twitter — <a href="https://twitter.com/gardenertate" rel="nofollow">https://twitter.com/gardenertate</a><br>
Groxio — <a href="https://grox.io/" rel="nofollow">https://grox.io/</a><br>
Gig City Elixir — <a href="https://www.gigcityelixir.com/" rel="nofollow">https://www.gigcityelixir.com/</a><br>
Lone Star Elixir — <a href="https://lonestarelixir.com/" rel="nofollow">https://lonestarelixir.com/</a><br>
Crystal — <a href="https://crystal-lang.org/" rel="nofollow">https://crystal-lang.org/</a><br>
Pony — <a href="https://www.ponylang.io/" rel="nofollow">https://www.ponylang.io/</a><br>
Joe Armstrong — <a href="https://joearms.github.io/" rel="nofollow">https://joearms.github.io/</a><br>
Elixir in Action — <a href="https://www.amazon.com/Elixir-Action-Sa%C5%A1a-Juri-cacute/dp/161729201X" rel="nofollow">https://www.amazon.com/Elixir-Action-Sa%C5%A1a-Juri-cacute/dp/161729201X</a><br>
Designing Elixir Systems — <a href="https://www.amazon.com/Designing-Elixir-Systems-OTP-Self-healing/dp/1680506617/" rel="nofollow">https://www.amazon.com/Designing-Elixir-Systems-OTP-Self-healing/dp/1680506617/</a><br>
Andrea Leopardi — <a href="https://confengine.com/user/andrea-leopardi" rel="nofollow">https://confengine.com/user/andrea-leopardi</a></p><p>Special Guests: Bruce Tate and Maggie Tate.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Groxio is a great platform that allows programmers to learn new languages easily and broaden their horizons. Our guests today are the team behind Groxio, Bruce and Maggie Tate! In our discussion, we cover the basics and the not so basics of what they do, from how they got into the Elixir world and founded Groxio to the conferences they run and the books they have published. We also talk about the benefits of learning multiple languages and Bruce makes a strong argument for the influence that smaller coding languages have had on his Elixir skills. Maggie and Bruce open up about having a professional and personal partnership and how they manage their marriage and businesses side by side. To finish off we hear about all the exciting things to expect at the Lonestar Conference this year and how it is going to be even better than last year&#39;s!</p>

<p><strong>Key Points From This Episode:</strong></p>

<p>• Bruce and Maggie&#39;s background in Elixir and how they started Groxio. <br>
• What sets Groxio apart from similar technical education companies.<br><br>
• The inspiration that Bruce got from the Crystal and Pony languages.<br>
• How curiosity and dopamine are linked; following new and interesting pathways. <br>
• Maggie and Bruce&#39;s personal and professional partnership and how they manage it. <br>
• The Elixir books that still need to be written and under-appreciated published ones.<br>
• A guide to Bruce&#39;s books and which to read for particular applications. <br>
• Running a conference; the stressful and fun parts for Maggie and Bruce.<br>
• Aspirations for the conferences and what to expect at this year&#39;s events. <br>
• Exciting speakers that will be appearing at the Lone Star Conference. <br>
• The controversy around the new Lone Star bat logo! <br>
• A few special plugs from our guests for things they are passionate about.</p>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
Bruce and Maggie Tate — <a href="https://grox.io/about" rel="nofollow">https://grox.io/about</a><br>
Bruce Tate on Twitter — <a href="https://twitter.com/redrapids" rel="nofollow">https://twitter.com/redrapids</a><br>
Maggie Tate on Twitter — <a href="https://twitter.com/gardenertate" rel="nofollow">https://twitter.com/gardenertate</a><br>
Groxio — <a href="https://grox.io/" rel="nofollow">https://grox.io/</a><br>
Gig City Elixir — <a href="https://www.gigcityelixir.com/" rel="nofollow">https://www.gigcityelixir.com/</a><br>
Lone Star Elixir — <a href="https://lonestarelixir.com/" rel="nofollow">https://lonestarelixir.com/</a><br>
Crystal — <a href="https://crystal-lang.org/" rel="nofollow">https://crystal-lang.org/</a><br>
Pony — <a href="https://www.ponylang.io/" rel="nofollow">https://www.ponylang.io/</a><br>
Joe Armstrong — <a href="https://joearms.github.io/" rel="nofollow">https://joearms.github.io/</a><br>
Elixir in Action — <a href="https://www.amazon.com/Elixir-Action-Sa%C5%A1a-Juri-cacute/dp/161729201X" rel="nofollow">https://www.amazon.com/Elixir-Action-Sa%C5%A1a-Juri-cacute/dp/161729201X</a><br>
Designing Elixir Systems — <a href="https://www.amazon.com/Designing-Elixir-Systems-OTP-Self-healing/dp/1680506617/" rel="nofollow">https://www.amazon.com/Designing-Elixir-Systems-OTP-Self-healing/dp/1680506617/</a><br>
Andrea Leopardi — <a href="https://confengine.com/user/andrea-leopardi" rel="nofollow">https://confengine.com/user/andrea-leopardi</a></p><p>Special Guests: Bruce Tate and Maggie Tate.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Dan Ivovich from SmartLogic on Hiring and Training</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/s3e7-ivovich</link>
      <guid isPermaLink="false">ea443f10-25a6-4570-9fe8-20e7f6624671</guid>
      <pubDate>Thu, 09 Jan 2020 06:00:00 -0500</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/ea443f10-25a6-4570-9fe8-20e7f6624671.mp3" length="33205850" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>3</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>On today's show, we are joined by Dan Ivovich from our team here at SmartLogic! Dan is the Director of Development Operations and has already been a guest and cohost a few times on the show. Today we are talking about hiring and training and his experience with these tasks at the company and especially concerning Elixir. </itunes:subtitle>
      <itunes:duration>22:39</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>On today's show, we are joined by Dan Ivovich from our team here at SmartLogic! Dan is the Director of Development Operations and has already been a guest and cohost a few times on the show. Today we are talking about hiring and training and his experience with these tasks at the company and especially concerning Elixir. We discuss the challenges Dan has faced in recruiting and the ways in which SmartLogic has lined up resumes and possible candidates through events and meetups. Dan explains some of the difficulties that are common for programmers transitioning into Elixir and how the company approaches the tasks of onboarding and ongoing support. We also get into Dan's favorite resources and tools for staying abreast of Elixir and his recommendations for practices to learn fast as a newcomer before he explains how he thinks about continual learning and expanding his own skillset. The conversation finishes with some thoughts and reflections on functional programming from our guest, so make sure to tune in for all of that and more!
Key Points From This Episode:
Dan's role at SmartLogic and how he leads the team. 
Recruiting new employees; collecting resumes and attending events. 
Challenges posed by recruiting good Elixir programmers and who to look for.  
Sticking points for people transitioning into Elixir from other languages. 
The stack at SmartLogic and the number of projects based in Elixir. 
Onboarding at the company; skills that are transferable to Elixir. 
Professional development and ongoing support for team members. 
Dan's favorite tools and resources for learning Elixir. 
Continual learning and Dan's strategies for growing his skillset.
A simple definition of functional programming and Dan's early experiences with it. 
Links Mentioned in Today’s Episode:
SmartLogic — https://smartlogic.io/ 
Dan Ivovich — https://www.danivovich.com/
Dan Ivovich on Twitter — https://twitter.com/danivovich
ElixirConf — https://elixirconf.com/events
Java — https://www.java.com/
Ruby — https://www.ruby-lang.org/
Python — https://www.python.org/
Rails — https://rubyonrails.org/
Rust — https://www.rust-lang.org/
GO — https://golang.org/
Twitch — https://www.twitch.tv/
Bruce Tate — https://codesync.global/speaker/bruce-tate/
Scala — https://www.scala-lang.org/ Special Guest: Dan Ivovich.
</description>
      <itunes:keywords></itunes:keywords>
      <content:encoded><![CDATA[
        <p>On today&#39;s show, we are joined by Dan Ivovich from our team here at SmartLogic! Dan is the Director of Development Operations and has already been a guest and cohost a few times on the show. Today we are talking about hiring and training and his experience with these tasks at the company and especially concerning Elixir. We discuss the challenges Dan has faced in recruiting and the ways in which SmartLogic has lined up resumes and possible candidates through events and meetups. Dan explains some of the difficulties that are common for programmers transitioning into Elixir and how the company approaches the tasks of onboarding and ongoing support. We also get into Dan&#39;s favorite resources and tools for staying abreast of Elixir and his recommendations for practices to learn fast as a newcomer before he explains how he thinks about continual learning and expanding his own skillset. The conversation finishes with some thoughts and reflections on functional programming from our guest, so make sure to tune in for all of that and more!</p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>Dan&#39;s role at SmartLogic and how he leads the team. </li>
<li>Recruiting new employees; collecting resumes and attending events. </li>
<li>Challenges posed by recruiting good Elixir programmers and who to look for.<br></li>
<li>Sticking points for people transitioning into Elixir from other languages. </li>
<li>The stack at SmartLogic and the number of projects based in Elixir. </li>
<li>Onboarding at the company; skills that are transferable to Elixir. </li>
<li>Professional development and ongoing support for team members. </li>
<li>Dan&#39;s favorite tools and resources for learning Elixir. </li>
<li>Continual learning and Dan&#39;s strategies for growing his skillset.</li>
<li>A simple definition of functional programming and Dan&#39;s early experiences with it. </li>
</ul>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
Dan Ivovich — <a href="https://www.danivovich.com/" rel="nofollow">https://www.danivovich.com/</a><br>
Dan Ivovich on Twitter — <a href="https://twitter.com/danivovich" rel="nofollow">https://twitter.com/danivovich</a><br>
ElixirConf — <a href="https://elixirconf.com/events" rel="nofollow">https://elixirconf.com/events</a><br>
Java — <a href="https://www.java.com/" rel="nofollow">https://www.java.com/</a><br>
Ruby — <a href="https://www.ruby-lang.org/" rel="nofollow">https://www.ruby-lang.org/</a><br>
Python — <a href="https://www.python.org/" rel="nofollow">https://www.python.org/</a><br>
Rails — <a href="https://rubyonrails.org/" rel="nofollow">https://rubyonrails.org/</a><br>
Rust — <a href="https://www.rust-lang.org/" rel="nofollow">https://www.rust-lang.org/</a><br>
GO — <a href="https://golang.org/" rel="nofollow">https://golang.org/</a><br>
Twitch — <a href="https://www.twitch.tv/" rel="nofollow">https://www.twitch.tv/</a><br>
Bruce Tate — <a href="https://codesync.global/speaker/bruce-tate/" rel="nofollow">https://codesync.global/speaker/bruce-tate/</a><br>
Scala — <a href="https://www.scala-lang.org/" rel="nofollow">https://www.scala-lang.org/</a></p><p>Special Guest: Dan Ivovich.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>On today&#39;s show, we are joined by Dan Ivovich from our team here at SmartLogic! Dan is the Director of Development Operations and has already been a guest and cohost a few times on the show. Today we are talking about hiring and training and his experience with these tasks at the company and especially concerning Elixir. We discuss the challenges Dan has faced in recruiting and the ways in which SmartLogic has lined up resumes and possible candidates through events and meetups. Dan explains some of the difficulties that are common for programmers transitioning into Elixir and how the company approaches the tasks of onboarding and ongoing support. We also get into Dan&#39;s favorite resources and tools for staying abreast of Elixir and his recommendations for practices to learn fast as a newcomer before he explains how he thinks about continual learning and expanding his own skillset. The conversation finishes with some thoughts and reflections on functional programming from our guest, so make sure to tune in for all of that and more!</p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>Dan&#39;s role at SmartLogic and how he leads the team. </li>
<li>Recruiting new employees; collecting resumes and attending events. </li>
<li>Challenges posed by recruiting good Elixir programmers and who to look for.<br></li>
<li>Sticking points for people transitioning into Elixir from other languages. </li>
<li>The stack at SmartLogic and the number of projects based in Elixir. </li>
<li>Onboarding at the company; skills that are transferable to Elixir. </li>
<li>Professional development and ongoing support for team members. </li>
<li>Dan&#39;s favorite tools and resources for learning Elixir. </li>
<li>Continual learning and Dan&#39;s strategies for growing his skillset.</li>
<li>A simple definition of functional programming and Dan&#39;s early experiences with it. </li>
</ul>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
Dan Ivovich — <a href="https://www.danivovich.com/" rel="nofollow">https://www.danivovich.com/</a><br>
Dan Ivovich on Twitter — <a href="https://twitter.com/danivovich" rel="nofollow">https://twitter.com/danivovich</a><br>
ElixirConf — <a href="https://elixirconf.com/events" rel="nofollow">https://elixirconf.com/events</a><br>
Java — <a href="https://www.java.com/" rel="nofollow">https://www.java.com/</a><br>
Ruby — <a href="https://www.ruby-lang.org/" rel="nofollow">https://www.ruby-lang.org/</a><br>
Python — <a href="https://www.python.org/" rel="nofollow">https://www.python.org/</a><br>
Rails — <a href="https://rubyonrails.org/" rel="nofollow">https://rubyonrails.org/</a><br>
Rust — <a href="https://www.rust-lang.org/" rel="nofollow">https://www.rust-lang.org/</a><br>
GO — <a href="https://golang.org/" rel="nofollow">https://golang.org/</a><br>
Twitch — <a href="https://www.twitch.tv/" rel="nofollow">https://www.twitch.tv/</a><br>
Bruce Tate — <a href="https://codesync.global/speaker/bruce-tate/" rel="nofollow">https://codesync.global/speaker/bruce-tate/</a><br>
Scala — <a href="https://www.scala-lang.org/" rel="nofollow">https://www.scala-lang.org/</a></p><p>Special Guest: Dan Ivovich.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Eric Meadows Jönsson on Hex and Working with Elixir</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/s3e6-jonsson</link>
      <guid isPermaLink="false">ef0d105d-13f1-4803-8837-341f56782510</guid>
      <pubDate>Thu, 02 Jan 2020 06:00:00 -0500</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/ef0d105d-13f1-4803-8837-341f56782510.mp3" length="54101602" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>3</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>We are happy to be joined in this episode by Eric Meadows Jönsson, creator of the hexpm package manager, and an amazing resource who works tirelessly to build the Elixir community. Eric presently works at Brex and was part of the core team at Forza previously. In keeping with our current topic of all things working with Elixir, Eric takes a deep dive into the work he is doing to optimize various interfaces at Brex. </itunes:subtitle>
      <itunes:duration>37:10</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>We are happy to be joined in this episode by Eric Meadows Jönsson, creator of the hexpm package manager, and an amazing resource who works tirelessly to build the Elixir community. Eric presently works at Brex and was part of the core team at Forza previously. In keeping with our current topic of all things working with Elixir, Eric takes a deep dive into the work he is doing to optimize various interfaces at Brex. He gives us the rundown on the static compile-time checking project he is working on, talking about his aims to build in different warnings and what we can expect from the new release in that regard. You’ll also hear about Eric’s journey learning Elixir and how he had to change his OOP mindset when he got introduced to functional programming at university. He shares the story behind hexpm and Mint, his thoughts about the future of Hex, and some of the processes around accessing the private repositories on its website. We also hear more about Eric’s hiring procedure while working at Forza, how he teaches functional programming to students at ElixirConf, and some of the major performance bottlenecks he experiences using Hex. Tap into the incredible resource that is Eric and hear more about how you can link with him online to learn further in the future by tuning in!
Key Points From This Episode:
Jose Valim, the Ecto library, and Eric’s journey with Elixir since 2012 at a coding camp.
Early-stage static compile-time checks that Eric is adding to the compiler at Brex.
Whether the static compile-time checks Eric is adding constitute a type system or not.
Static compile-time checks in the current system such as undefined function warnings.
Features of the new static compile-time check release: refactored checks, etc.
Currently, these checks happen at compile-time, or when Elixir compiles into the byte code.
Whether these checks will move into BEAM: currently it’s in Elixir and at an early stage.
The Erlang compiler already does type inference during compilation. 
Eric’s Erlang proficiency and why he had to brush up on it through using Elixir.
What makes Eric helpful with Hex: his debugging skills and availability to answer questions.
How Eric got started with Hex adding an intake for Git packages.
The story behind Hex regarding ties to Elixir and Devinus from Pool Boy.
Todd’s perspective on Eric as a smart and nice mentor who sleeps very little.
Changes that Eric sees happening in Elixir.
Hex will no longer support older Elixir versions so that it can enable better maintenance.
Another change will be a refactoring of the resolution version algorithm.
Security-related updates that Todd has been working on.
Private versus public repositories on the hex.pm website.
Hiring challenges at Forza and how Eric found the right team out of scarce people.
Eric looks for people who love being programmers and have a passion for learning.
Tactics Eric uses to train functional programming such as hosting ElixirConf workshops.
Important fundamentals in functional programming: using data structures to model data, etc.
Differences between functional and object-oriented programming: data vs classes.
The role of types in Eric coming to understand functional programming better.
Performance bottlenecks in Hex such as dependency resolution.
How every package manager/resolver compromises, exemplified by NPM and Rebar3.
Origins of Mint: wanting http2 support for Hex, and more.
Links Mentioned in Today’s Episode:
SmartLogic — https://smartlogic.io/ 
Eric Meadows Jönsson on GitHub – https://github.com/ericmj
Eric Meadows Jönsson on Hexpm — https://hex.pm/users/ericmj
Brex — https://brex.com/
Todd Resudek on LinkedIn — https://www.linkedin.com/in/toddresudek
Justus Eapen on LinkedIn — https://www.linkedin.com/in/justuseapen/
Eric Oestreich on LinkedIn — https://www.linkedin.com/in/eric-oestreich-8b55aab/
hexpm on GitHub — https://github.com/hexpm
Google Summer of Code — https://summerofcode.withgoogle.com/
Jose Valim on GitHib — https://github.com/josevalim
Pool Boy — https://github.com/devinus/poolboy
Devin Alexander Torres — https://github.com/devinus
Voitech — https://www.voitech.biz/
Hex — https://hex.pm/
hexpm specifications — https://github.com/hexpm/specifications
Slack — https://slack.com
IRC —https://hexchat.github.io/
Forza — https://www.forzafootball.com/women
ElixirConf — https://elixirconf.com/events
Chalmers University — https://www.chalmers.se/en/Pages/default.aspx
Fastly — https://www.fastly.com/
NPM — https://www.npmjs.com/
Rebar 3 — https://github.com/erlang/rebar3
Mint — https://www.mint-lang.com/
Ruby Gems — https://rubygems.org/
Andrea Leopardi on GitHub — https://github.com/whatyouhide?tab=overview&amp;org=ForzaElixir
 Special Guest: Todd Resudek.
</description>
      <itunes:keywords>hex, elixir, mint</itunes:keywords>
      <content:encoded><![CDATA[
        <p>We are happy to be joined in this episode by Eric Meadows Jönsson, creator of the hexpm package manager, and an amazing resource who works tirelessly to build the Elixir community. Eric presently works at Brex and was part of the core team at Forza previously. In keeping with our current topic of all things working with Elixir, Eric takes a deep dive into the work he is doing to optimize various interfaces at Brex. He gives us the rundown on the static compile-time checking project he is working on, talking about his aims to build in different warnings and what we can expect from the new release in that regard. You’ll also hear about Eric’s journey learning Elixir and how he had to change his OOP mindset when he got introduced to functional programming at university. He shares the story behind hexpm and Mint, his thoughts about the future of Hex, and some of the processes around accessing the private repositories on its website. We also hear more about Eric’s hiring procedure while working at Forza, how he teaches functional programming to students at ElixirConf, and some of the major performance bottlenecks he experiences using Hex. Tap into the incredible resource that is Eric and hear more about how you can link with him online to learn further in the future by tuning in!</p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>Jose Valim, the Ecto library, and Eric’s journey with Elixir since 2012 at a coding camp.</li>
<li>Early-stage static compile-time checks that Eric is adding to the compiler at Brex.</li>
<li>Whether the static compile-time checks Eric is adding constitute a type system or not.</li>
<li>Static compile-time checks in the current system such as undefined function warnings.</li>
<li>Features of the new static compile-time check release: refactored checks, etc.</li>
<li>Currently, these checks happen at compile-time, or when Elixir compiles into the byte code.</li>
<li>Whether these checks will move into BEAM: currently it’s in Elixir and at an early stage.</li>
<li>The Erlang compiler already does type inference during compilation. </li>
<li>Eric’s Erlang proficiency and why he had to brush up on it through using Elixir.</li>
<li>What makes Eric helpful with Hex: his debugging skills and availability to answer questions.</li>
<li>How Eric got started with Hex adding an intake for Git packages.</li>
<li>The story behind Hex regarding ties to Elixir and Devinus from Pool Boy.</li>
<li>Todd’s perspective on Eric as a smart and nice mentor who sleeps very little.</li>
<li>Changes that Eric sees happening in Elixir.</li>
<li>Hex will no longer support older Elixir versions so that it can enable better maintenance.</li>
<li>Another change will be a refactoring of the resolution version algorithm.</li>
<li>Security-related updates that Todd has been working on.</li>
<li>Private versus public repositories on the hex.pm website.</li>
<li>Hiring challenges at Forza and how Eric found the right team out of scarce people.</li>
<li>Eric looks for people who love being programmers and have a passion for learning.</li>
<li>Tactics Eric uses to train functional programming such as hosting ElixirConf workshops.</li>
<li>Important fundamentals in functional programming: using data structures to model data, etc.</li>
<li>Differences between functional and object-oriented programming: data vs classes.</li>
<li>The role of types in Eric coming to understand functional programming better.</li>
<li>Performance bottlenecks in Hex such as dependency resolution.</li>
<li>How every package manager/resolver compromises, exemplified by NPM and Rebar3.</li>
<li>Origins of Mint: wanting http2 support for Hex, and more.</li>
</ul>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
Eric Meadows Jönsson on GitHub – <a href="https://github.com/ericmj" rel="nofollow">https://github.com/ericmj</a><br>
Eric Meadows Jönsson on Hexpm — <a href="https://hex.pm/users/ericmj" rel="nofollow">https://hex.pm/users/ericmj</a><br>
Brex — <a href="https://brex.com/" rel="nofollow">https://brex.com/</a><br>
Todd Resudek on LinkedIn — <a href="https://www.linkedin.com/in/toddresudek" rel="nofollow">https://www.linkedin.com/in/toddresudek</a><br>
Justus Eapen on LinkedIn — <a href="https://www.linkedin.com/in/justuseapen/" rel="nofollow">https://www.linkedin.com/in/justuseapen/</a><br>
Eric Oestreich on LinkedIn — <a href="https://www.linkedin.com/in/eric-oestreich-8b55aab/" rel="nofollow">https://www.linkedin.com/in/eric-oestreich-8b55aab/</a><br>
hexpm on GitHub — <a href="https://github.com/hexpm" rel="nofollow">https://github.com/hexpm</a><br>
Google Summer of Code — <a href="https://summerofcode.withgoogle.com/" rel="nofollow">https://summerofcode.withgoogle.com/</a><br>
Jose Valim on GitHib — <a href="https://github.com/josevalim" rel="nofollow">https://github.com/josevalim</a><br>
Pool Boy — <a href="https://github.com/devinus/poolboy" rel="nofollow">https://github.com/devinus/poolboy</a><br>
Devin Alexander Torres — <a href="https://github.com/devinus" rel="nofollow">https://github.com/devinus</a><br>
Voitech — <a href="https://www.voitech.biz/" rel="nofollow">https://www.voitech.biz/</a><br>
Hex — <a href="https://hex.pm/" rel="nofollow">https://hex.pm/</a><br>
hexpm specifications — <a href="https://github.com/hexpm/specifications" rel="nofollow">https://github.com/hexpm/specifications</a><br>
Slack — <a href="https://slack.com" rel="nofollow">https://slack.com</a><br>
IRC —<a href="https://hexchat.github.io/" rel="nofollow">https://hexchat.github.io/</a><br>
Forza — <a href="https://www.forzafootball.com/women" rel="nofollow">https://www.forzafootball.com/women</a><br>
ElixirConf — <a href="https://elixirconf.com/events" rel="nofollow">https://elixirconf.com/events</a><br>
Chalmers University — <a href="https://www.chalmers.se/en/Pages/default.aspx" rel="nofollow">https://www.chalmers.se/en/Pages/default.aspx</a><br>
Fastly — <a href="https://www.fastly.com/" rel="nofollow">https://www.fastly.com/</a><br>
NPM — <a href="https://www.npmjs.com/" rel="nofollow">https://www.npmjs.com/</a><br>
Rebar 3 — <a href="https://github.com/erlang/rebar3" rel="nofollow">https://github.com/erlang/rebar3</a><br>
Mint — <a href="https://www.mint-lang.com/" rel="nofollow">https://www.mint-lang.com/</a><br>
Ruby Gems — <a href="https://rubygems.org/" rel="nofollow">https://rubygems.org/</a><br>
Andrea Leopardi on GitHub — <a href="https://github.com/whatyouhide?tab=overview&org=ForzaElixir" rel="nofollow">https://github.com/whatyouhide?tab=overview&amp;org=ForzaElixir</a></p><p>Special Guest: Todd Resudek.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>We are happy to be joined in this episode by Eric Meadows Jönsson, creator of the hexpm package manager, and an amazing resource who works tirelessly to build the Elixir community. Eric presently works at Brex and was part of the core team at Forza previously. In keeping with our current topic of all things working with Elixir, Eric takes a deep dive into the work he is doing to optimize various interfaces at Brex. He gives us the rundown on the static compile-time checking project he is working on, talking about his aims to build in different warnings and what we can expect from the new release in that regard. You’ll also hear about Eric’s journey learning Elixir and how he had to change his OOP mindset when he got introduced to functional programming at university. He shares the story behind hexpm and Mint, his thoughts about the future of Hex, and some of the processes around accessing the private repositories on its website. We also hear more about Eric’s hiring procedure while working at Forza, how he teaches functional programming to students at ElixirConf, and some of the major performance bottlenecks he experiences using Hex. Tap into the incredible resource that is Eric and hear more about how you can link with him online to learn further in the future by tuning in!</p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>Jose Valim, the Ecto library, and Eric’s journey with Elixir since 2012 at a coding camp.</li>
<li>Early-stage static compile-time checks that Eric is adding to the compiler at Brex.</li>
<li>Whether the static compile-time checks Eric is adding constitute a type system or not.</li>
<li>Static compile-time checks in the current system such as undefined function warnings.</li>
<li>Features of the new static compile-time check release: refactored checks, etc.</li>
<li>Currently, these checks happen at compile-time, or when Elixir compiles into the byte code.</li>
<li>Whether these checks will move into BEAM: currently it’s in Elixir and at an early stage.</li>
<li>The Erlang compiler already does type inference during compilation. </li>
<li>Eric’s Erlang proficiency and why he had to brush up on it through using Elixir.</li>
<li>What makes Eric helpful with Hex: his debugging skills and availability to answer questions.</li>
<li>How Eric got started with Hex adding an intake for Git packages.</li>
<li>The story behind Hex regarding ties to Elixir and Devinus from Pool Boy.</li>
<li>Todd’s perspective on Eric as a smart and nice mentor who sleeps very little.</li>
<li>Changes that Eric sees happening in Elixir.</li>
<li>Hex will no longer support older Elixir versions so that it can enable better maintenance.</li>
<li>Another change will be a refactoring of the resolution version algorithm.</li>
<li>Security-related updates that Todd has been working on.</li>
<li>Private versus public repositories on the hex.pm website.</li>
<li>Hiring challenges at Forza and how Eric found the right team out of scarce people.</li>
<li>Eric looks for people who love being programmers and have a passion for learning.</li>
<li>Tactics Eric uses to train functional programming such as hosting ElixirConf workshops.</li>
<li>Important fundamentals in functional programming: using data structures to model data, etc.</li>
<li>Differences between functional and object-oriented programming: data vs classes.</li>
<li>The role of types in Eric coming to understand functional programming better.</li>
<li>Performance bottlenecks in Hex such as dependency resolution.</li>
<li>How every package manager/resolver compromises, exemplified by NPM and Rebar3.</li>
<li>Origins of Mint: wanting http2 support for Hex, and more.</li>
</ul>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
Eric Meadows Jönsson on GitHub – <a href="https://github.com/ericmj" rel="nofollow">https://github.com/ericmj</a><br>
Eric Meadows Jönsson on Hexpm — <a href="https://hex.pm/users/ericmj" rel="nofollow">https://hex.pm/users/ericmj</a><br>
Brex — <a href="https://brex.com/" rel="nofollow">https://brex.com/</a><br>
Todd Resudek on LinkedIn — <a href="https://www.linkedin.com/in/toddresudek" rel="nofollow">https://www.linkedin.com/in/toddresudek</a><br>
Justus Eapen on LinkedIn — <a href="https://www.linkedin.com/in/justuseapen/" rel="nofollow">https://www.linkedin.com/in/justuseapen/</a><br>
Eric Oestreich on LinkedIn — <a href="https://www.linkedin.com/in/eric-oestreich-8b55aab/" rel="nofollow">https://www.linkedin.com/in/eric-oestreich-8b55aab/</a><br>
hexpm on GitHub — <a href="https://github.com/hexpm" rel="nofollow">https://github.com/hexpm</a><br>
Google Summer of Code — <a href="https://summerofcode.withgoogle.com/" rel="nofollow">https://summerofcode.withgoogle.com/</a><br>
Jose Valim on GitHib — <a href="https://github.com/josevalim" rel="nofollow">https://github.com/josevalim</a><br>
Pool Boy — <a href="https://github.com/devinus/poolboy" rel="nofollow">https://github.com/devinus/poolboy</a><br>
Devin Alexander Torres — <a href="https://github.com/devinus" rel="nofollow">https://github.com/devinus</a><br>
Voitech — <a href="https://www.voitech.biz/" rel="nofollow">https://www.voitech.biz/</a><br>
Hex — <a href="https://hex.pm/" rel="nofollow">https://hex.pm/</a><br>
hexpm specifications — <a href="https://github.com/hexpm/specifications" rel="nofollow">https://github.com/hexpm/specifications</a><br>
Slack — <a href="https://slack.com" rel="nofollow">https://slack.com</a><br>
IRC —<a href="https://hexchat.github.io/" rel="nofollow">https://hexchat.github.io/</a><br>
Forza — <a href="https://www.forzafootball.com/women" rel="nofollow">https://www.forzafootball.com/women</a><br>
ElixirConf — <a href="https://elixirconf.com/events" rel="nofollow">https://elixirconf.com/events</a><br>
Chalmers University — <a href="https://www.chalmers.se/en/Pages/default.aspx" rel="nofollow">https://www.chalmers.se/en/Pages/default.aspx</a><br>
Fastly — <a href="https://www.fastly.com/" rel="nofollow">https://www.fastly.com/</a><br>
NPM — <a href="https://www.npmjs.com/" rel="nofollow">https://www.npmjs.com/</a><br>
Rebar 3 — <a href="https://github.com/erlang/rebar3" rel="nofollow">https://github.com/erlang/rebar3</a><br>
Mint — <a href="https://www.mint-lang.com/" rel="nofollow">https://www.mint-lang.com/</a><br>
Ruby Gems — <a href="https://rubygems.org/" rel="nofollow">https://rubygems.org/</a><br>
Andrea Leopardi on GitHub — <a href="https://github.com/whatyouhide?tab=overview&org=ForzaElixir" rel="nofollow">https://github.com/whatyouhide?tab=overview&amp;org=ForzaElixir</a></p><p>Special Guest: Todd Resudek.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Chris Keathley on Performance and Functional Programming</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/s3e5-keathley</link>
      <guid isPermaLink="false">b26cdd89-0d68-4466-9714-44c278932651</guid>
      <pubDate>Thu, 19 Dec 2019 06:00:00 -0500</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/b26cdd89-0d68-4466-9714-44c278932651.mp3" length="52191819" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>3</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Our guest on the show today is blogger, software cowboy, and podcast host Chris Keathley. Chris is a senior engineer at Bleacher Report, co-host of Elixir Outlaws, and writer of an assemblage of open-source software. He joins us today to speak about his new projects, his journey with functional programming, and what it is like to run Bleacher Report’s infrastructure on Elixir.</itunes:subtitle>
      <itunes:duration>35:26</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>Our guest on the show today is blogger, software cowboy, and podcast host Chris Keathley. Chris is a senior engineer at Bleacher Report, co-host of Elixir Outlaws, and writer of an assemblage of open-source software. He joins us today to speak about his new projects, his journey with functional programming, and what it is like to run Bleacher Report’s infrastructure on Elixir. Chris gives us the lowdown on Norm, a data validating interface he recently completed, weighing in on how it is different from Dialyzer and what it can offer as far as scalability. We hear more about how Chris got introduced to Elixir through Haskell, why he wishes he learned Clojure sooner, and why Ruby on Rails isn’t going anywhere soon. 
Chris also gets into the tradeoffs these languages make to correlate with Erlang. He argues that Elixir can only be more widely adopted if more people build cool things in it, and then lays out some of its power in supporting Bleacher Report’s user interface. We pick Chris’s brain about what his company is trying to optimize at the moment and hear about their preference for capacity over speed, and their techniques for failing gracefully during traffic spikes. Chris tells us how much he loves Elixir due to its use of ETS and other functionality which allows Bleacher Report to keep running even above capacity. Finally, we hear about some of the observability practices that Bleacher Report uses when deploying new systems and predicting future spikes. Plug in for a great conversation and hear why you should get building with Elixir now!
Key Points From This Episode:
Chris’s explanation of Norm, his new software that describes data moving through a system.
Chris’s introduction to functional programming through learning Haskell, Clojure, and Elixir.
What makes a great functional language: immutable data and first class functions.
Things that make Clojure great, such as its thought out, holistic design.
Characteristics of Cons lists versus RRB trees, and what makes the latter better.
An acknowledgment of the necessity of the tradeoffs Elixir makes to interact with Erlang.
A little bit about the language Chris wrote to do the admin of code challenges in.
Why Ruby (on Rails) will not be replaced by Elixir due to commoditization that surrounds it.
An argument that Elixir can only be more widely adopted if more people build with it.
Why any language can build any program thus comparisons between them are arbitrary.
Where Chris sets the bar as to when something is performant.
Chris’s preference for high user capacity capability over speed of delivery at Bleacher Report.
Optimization projects at Bleacher Report such as using few boxes and handling traffic spikes.
Things Chris loves about Elixir such as its ability to deliver more from its boxes.
Elixir’s use of ETS and how Chris coded a complex problem in half a day using it.
How Chris detects spikes using time series, StatsD, and other observability tools.
Links Mentioned in Today’s Episode:
SmartLogic — https://smartlogic.io/ 
Chris Keathley on GitHub — https://github.com/keathley
Chris Keathley Blog — https://keathley.io/
ElixirConf 2019, Contracts for Building Reliable Systems presented by Chris Keathley — https://www.youtube.com/watch?v=tpo3JUyVIjQ
The Big Elixir 2019 - Keynote: Adoption - Brian Cardarella — https://www.youtube.com/watch?v=ghpIiQKRfQ4
Bleacher Report — https://bleacherreport.com/
Elixir Outlaws Podcast — https://elixiroutlaws.com/
Norm — https://github.com/keathley/norm
Dialyzer — http://erlang.org/doc/man/dialyzer.html
Haskell — https://www.haskell.org/
Clojure — https://clojure.org/
Erlang — https://www.erlang.org/
Chris Okasaki — https://github.com/chrisokasaki
Discord — https://discordapp.com/company
StatsD — https://www.datadoghq.com/blog/statsd/
Prometheus — https://prometheus.io/
Opentracing — https://opentracing.io/ Special Guest: Chris Keathley.
</description>
      <itunes:keywords>elixir, phoenix</itunes:keywords>
      <content:encoded><![CDATA[
        <p>Our guest on the show today is blogger, software cowboy, and podcast host Chris Keathley. Chris is a senior engineer at Bleacher Report, co-host of Elixir Outlaws, and writer of an assemblage of open-source software. He joins us today to speak about his new projects, his journey with functional programming, and what it is like to run Bleacher Report’s infrastructure on Elixir. Chris gives us the lowdown on Norm, a data validating interface he recently completed, weighing in on how it is different from Dialyzer and what it can offer as far as scalability. We hear more about how Chris got introduced to Elixir through Haskell, why he wishes he learned Clojure sooner, and why Ruby on Rails isn’t going anywhere soon. </p>

<p>Chris also gets into the tradeoffs these languages make to correlate with Erlang. He argues that Elixir can only be more widely adopted if more people build cool things in it, and then lays out some of its power in supporting Bleacher Report’s user interface. We pick Chris’s brain about what his company is trying to optimize at the moment and hear about their preference for capacity over speed, and their techniques for failing gracefully during traffic spikes. Chris tells us how much he loves Elixir due to its use of ETS and other functionality which allows Bleacher Report to keep running even above capacity. Finally, we hear about some of the observability practices that Bleacher Report uses when deploying new systems and predicting future spikes. Plug in for a great conversation and hear why you should get building with Elixir now!</p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>Chris’s explanation of Norm, his new software that describes data moving through a system.</li>
<li>Chris’s introduction to functional programming through learning Haskell, Clojure, and Elixir.</li>
<li>What makes a great functional language: immutable data and first class functions.</li>
<li>Things that make Clojure great, such as its thought out, holistic design.</li>
<li>Characteristics of Cons lists versus RRB trees, and what makes the latter better.</li>
<li>An acknowledgment of the necessity of the tradeoffs Elixir makes to interact with Erlang.</li>
<li>A little bit about the language Chris wrote to do the admin of code challenges in.</li>
<li>Why Ruby (on Rails) will not be replaced by Elixir due to commoditization that surrounds it.</li>
<li>An argument that Elixir can only be more widely adopted if more people build with it.</li>
<li>Why any language can build any program thus comparisons between them are arbitrary.</li>
<li>Where Chris sets the bar as to when something is performant.</li>
<li>Chris’s preference for high user capacity capability over speed of delivery at Bleacher Report.</li>
<li>Optimization projects at Bleacher Report such as using few boxes and handling traffic spikes.</li>
<li>Things Chris loves about Elixir such as its ability to deliver more from its boxes.</li>
<li>Elixir’s use of ETS and how Chris coded a complex problem in half a day using it.</li>
<li>How Chris detects spikes using time series, StatsD, and other observability tools.</li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
Chris Keathley on GitHub — <a href="https://github.com/keathley" rel="nofollow">https://github.com/keathley</a><br>
Chris Keathley Blog — <a href="https://keathley.io/" rel="nofollow">https://keathley.io/</a><br>
ElixirConf 2019, Contracts for Building Reliable Systems presented by Chris Keathley — <a href="https://www.youtube.com/watch?v=tpo3JUyVIjQ" rel="nofollow">https://www.youtube.com/watch?v=tpo3JUyVIjQ</a><br>
The Big Elixir 2019 - Keynote: Adoption - Brian Cardarella — <a href="https://www.youtube.com/watch?v=ghpIiQKRfQ4" rel="nofollow">https://www.youtube.com/watch?v=ghpIiQKRfQ4</a><br>
Bleacher Report — <a href="https://bleacherreport.com/" rel="nofollow">https://bleacherreport.com/</a><br>
Elixir Outlaws Podcast — <a href="https://elixiroutlaws.com/" rel="nofollow">https://elixiroutlaws.com/</a><br>
Norm — <a href="https://github.com/keathley/norm" rel="nofollow">https://github.com/keathley/norm</a><br>
Dialyzer — <a href="http://erlang.org/doc/man/dialyzer.html" rel="nofollow">http://erlang.org/doc/man/dialyzer.html</a><br>
Haskell — <a href="https://www.haskell.org/" rel="nofollow">https://www.haskell.org/</a><br>
Clojure — <a href="https://clojure.org/" rel="nofollow">https://clojure.org/</a><br>
Erlang — <a href="https://www.erlang.org/" rel="nofollow">https://www.erlang.org/</a><br>
Chris Okasaki — <a href="https://github.com/chrisokasaki" rel="nofollow">https://github.com/chrisokasaki</a><br>
Discord — <a href="https://discordapp.com/company" rel="nofollow">https://discordapp.com/company</a><br>
StatsD — <a href="https://www.datadoghq.com/blog/statsd/" rel="nofollow">https://www.datadoghq.com/blog/statsd/</a><br>
Prometheus — <a href="https://prometheus.io/" rel="nofollow">https://prometheus.io/</a><br>
Opentracing — <a href="https://opentracing.io/" rel="nofollow">https://opentracing.io/</a></p><p>Special Guest: Chris Keathley.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Our guest on the show today is blogger, software cowboy, and podcast host Chris Keathley. Chris is a senior engineer at Bleacher Report, co-host of Elixir Outlaws, and writer of an assemblage of open-source software. He joins us today to speak about his new projects, his journey with functional programming, and what it is like to run Bleacher Report’s infrastructure on Elixir. Chris gives us the lowdown on Norm, a data validating interface he recently completed, weighing in on how it is different from Dialyzer and what it can offer as far as scalability. We hear more about how Chris got introduced to Elixir through Haskell, why he wishes he learned Clojure sooner, and why Ruby on Rails isn’t going anywhere soon. </p>

<p>Chris also gets into the tradeoffs these languages make to correlate with Erlang. He argues that Elixir can only be more widely adopted if more people build cool things in it, and then lays out some of its power in supporting Bleacher Report’s user interface. We pick Chris’s brain about what his company is trying to optimize at the moment and hear about their preference for capacity over speed, and their techniques for failing gracefully during traffic spikes. Chris tells us how much he loves Elixir due to its use of ETS and other functionality which allows Bleacher Report to keep running even above capacity. Finally, we hear about some of the observability practices that Bleacher Report uses when deploying new systems and predicting future spikes. Plug in for a great conversation and hear why you should get building with Elixir now!</p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>Chris’s explanation of Norm, his new software that describes data moving through a system.</li>
<li>Chris’s introduction to functional programming through learning Haskell, Clojure, and Elixir.</li>
<li>What makes a great functional language: immutable data and first class functions.</li>
<li>Things that make Clojure great, such as its thought out, holistic design.</li>
<li>Characteristics of Cons lists versus RRB trees, and what makes the latter better.</li>
<li>An acknowledgment of the necessity of the tradeoffs Elixir makes to interact with Erlang.</li>
<li>A little bit about the language Chris wrote to do the admin of code challenges in.</li>
<li>Why Ruby (on Rails) will not be replaced by Elixir due to commoditization that surrounds it.</li>
<li>An argument that Elixir can only be more widely adopted if more people build with it.</li>
<li>Why any language can build any program thus comparisons between them are arbitrary.</li>
<li>Where Chris sets the bar as to when something is performant.</li>
<li>Chris’s preference for high user capacity capability over speed of delivery at Bleacher Report.</li>
<li>Optimization projects at Bleacher Report such as using few boxes and handling traffic spikes.</li>
<li>Things Chris loves about Elixir such as its ability to deliver more from its boxes.</li>
<li>Elixir’s use of ETS and how Chris coded a complex problem in half a day using it.</li>
<li>How Chris detects spikes using time series, StatsD, and other observability tools.</li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
Chris Keathley on GitHub — <a href="https://github.com/keathley" rel="nofollow">https://github.com/keathley</a><br>
Chris Keathley Blog — <a href="https://keathley.io/" rel="nofollow">https://keathley.io/</a><br>
ElixirConf 2019, Contracts for Building Reliable Systems presented by Chris Keathley — <a href="https://www.youtube.com/watch?v=tpo3JUyVIjQ" rel="nofollow">https://www.youtube.com/watch?v=tpo3JUyVIjQ</a><br>
The Big Elixir 2019 - Keynote: Adoption - Brian Cardarella — <a href="https://www.youtube.com/watch?v=ghpIiQKRfQ4" rel="nofollow">https://www.youtube.com/watch?v=ghpIiQKRfQ4</a><br>
Bleacher Report — <a href="https://bleacherreport.com/" rel="nofollow">https://bleacherreport.com/</a><br>
Elixir Outlaws Podcast — <a href="https://elixiroutlaws.com/" rel="nofollow">https://elixiroutlaws.com/</a><br>
Norm — <a href="https://github.com/keathley/norm" rel="nofollow">https://github.com/keathley/norm</a><br>
Dialyzer — <a href="http://erlang.org/doc/man/dialyzer.html" rel="nofollow">http://erlang.org/doc/man/dialyzer.html</a><br>
Haskell — <a href="https://www.haskell.org/" rel="nofollow">https://www.haskell.org/</a><br>
Clojure — <a href="https://clojure.org/" rel="nofollow">https://clojure.org/</a><br>
Erlang — <a href="https://www.erlang.org/" rel="nofollow">https://www.erlang.org/</a><br>
Chris Okasaki — <a href="https://github.com/chrisokasaki" rel="nofollow">https://github.com/chrisokasaki</a><br>
Discord — <a href="https://discordapp.com/company" rel="nofollow">https://discordapp.com/company</a><br>
StatsD — <a href="https://www.datadoghq.com/blog/statsd/" rel="nofollow">https://www.datadoghq.com/blog/statsd/</a><br>
Prometheus — <a href="https://prometheus.io/" rel="nofollow">https://prometheus.io/</a><br>
Opentracing — <a href="https://opentracing.io/" rel="nofollow">https://opentracing.io/</a></p><p>Special Guest: Chris Keathley.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Justin Schneck &amp; Frank Hunleth on Nerves and Performance – Working with Elixir</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/s3e4-schneck-hunleth-nerves</link>
      <guid isPermaLink="false">2be72d78-cfcc-46e2-a0a5-753fc8a0c280</guid>
      <pubDate>Thu, 12 Dec 2019 06:00:00 -0500</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/2be72d78-cfcc-46e2-a0a5-753fc8a0c280.mp3" length="57000054" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>3</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>On today’s show, we welcome Justin Schneck and Frank Hunleth, luminaries from the Nerves team! We take a dive into the world of Nerves with them, covering themes of performance, problem-solving, transitioning to hardware, and breakthroughs in the field. We begin with a conversation on how Elixir handles performance issues on the range of devices they support and Frank gets into how the team solved an early boot time discrepancy between a PC and a Raspberry Pi board. Other big themes for today are ironing out the kinks in the system registry model and merging Erlang and into hard real-time. After squeezing some information out of the guys about their use of ugly code hacks we get into some visionary decisions as well as things the team wished they could have done differently at Elixir (see the release of the new networking stack). Finally, we end off with what Frank and Justin are excited about as far as developments in the Nerves community, so be sure to plug into this one!</itunes:subtitle>
      <itunes:duration>38:47</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>On today’s show, we welcome Justin Schneck and Frank Hunleth, luminaries from the Nerves team! We take a dive into the world of Nerves with them, covering themes of performance, problem-solving, transitioning to hardware, and breakthroughs in the field. We begin with a conversation on how Elixir handles performance issues on the range of devices they support and Frank gets into how the team solved an early boot time discrepancy between a PC and a Raspberry Pi board. Other big themes for today are ironing out the kinks in the system registry model and merging Erlang and into hard real-time. After squeezing some information out of the guys about their use of ugly code hacks we get into some visionary decisions as well as things the team wished they could have done differently at Elixir (see the release of the new networking stack). Finally, we end off with what Frank and Justin are excited about as far as developments in the Nerves community, so be sure to plug into this one!
**Key Points From This Episode:
What Justin did in Tokyo, from soaking in hot springs to debugging in Kanji.
An explanation of The Erlang Ecosystem Foundation, an embedded systems working group.
The use of the VintageNet library for setting up multi-hold nerve networks.
How Elixir handles performance issues on the range of devices they support.
A breakdown of troubleshooting processes as far as acceleration with FPGAs.
Issues with dependencies that occur when starting a network node on a Nerves device.
How Elixir is trying to evolve past the system registry model.
Identifying the challenge of reconfiguring early boot time which Elixir is facing.
How Elixir solved a load time discrepancy between a PC and the Raspberry Pi board.
Which situations require hardware when Elixir is too slow, such as video encoding.
Japanese research into GPU, FPGA and SIMD optimization involving wrapping code blocks.
Merging Erlang which is soft real-time into hard real-time.
Examples of ugly but fast code hacks in Elixir.
Hacks and the pitfalls of system registry such as returning to a prompt when an app crashes.
Things Elixir would have done differently in working with Nerves if could they rewind time.
Why releasing a new networking stack means Elixir could have done things differently.
Lessons Justin and Frank learned moving from OTP to functional programming at Elixir.
Exciting new developments and releases in the Nerves community.
Links Mentioned in Today’s Episode:
Nerves Project — https://nerves-project.org/
SmartLogic — https://smartlogic.io/ 
ElixirConf US — https://elixirconf.com/events
The Erlang Ecosystem Foundation — https://erlef.org/
GRiSP — https://www.grisp.org/
Vintage Net — https://github.com/nerves-networking/vintage_net
Joe Armstrong — https://joearms.github.io/
Erlang — https://www.erlang.org/
Linux — https://www.linux.org/ Special Guest: Frank Hunleth.
</description>
      <itunes:keywords>elixir, nerves, erlang</itunes:keywords>
      <content:encoded><![CDATA[
        <p>On today’s show, we welcome Justin Schneck and Frank Hunleth, luminaries from the Nerves team! We take a dive into the world of Nerves with them, covering themes of performance, problem-solving, transitioning to hardware, and breakthroughs in the field. We begin with a conversation on how Elixir handles performance issues on the range of devices they support and Frank gets into how the team solved an early boot time discrepancy between a PC and a Raspberry Pi board. Other big themes for today are ironing out the kinks in the system registry model and merging Erlang and into hard real-time. After squeezing some information out of the guys about their use of ugly code hacks we get into some visionary decisions as well as things the team wished they could have done differently at Elixir (see the release of the new networking stack). Finally, we end off with what Frank and Justin are excited about as far as developments in the Nerves community, so be sure to plug into this one!</p>

<p>**Key Points From This Episode:</p>

<ul>
<li>What Justin did in Tokyo, from soaking in hot springs to debugging in Kanji.</li>
<li>An explanation of The Erlang Ecosystem Foundation, an embedded systems working group.</li>
<li>The use of the VintageNet library for setting up multi-hold nerve networks.</li>
<li>How Elixir handles performance issues on the range of devices they support.</li>
<li>A breakdown of troubleshooting processes as far as acceleration with FPGAs.</li>
<li>Issues with dependencies that occur when starting a network node on a Nerves device.</li>
<li>How Elixir is trying to evolve past the system registry model.</li>
<li>Identifying the challenge of reconfiguring early boot time which Elixir is facing.</li>
<li>How Elixir solved a load time discrepancy between a PC and the Raspberry Pi board.</li>
<li>Which situations require hardware when Elixir is too slow, such as video encoding.</li>
<li>Japanese research into GPU, FPGA and SIMD optimization involving wrapping code blocks.</li>
<li>Merging Erlang which is soft real-time into hard real-time.</li>
<li>Examples of ugly but fast code hacks in Elixir.</li>
<li>Hacks and the pitfalls of system registry such as returning to a prompt when an app crashes.</li>
<li>Things Elixir would have done differently in working with Nerves if could they rewind time.</li>
<li>Why releasing a new networking stack means Elixir could have done things differently.</li>
<li>Lessons Justin and Frank learned moving from OTP to functional programming at Elixir.</li>
<li>Exciting new developments and releases in the Nerves community.</li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>Nerves Project — <a href="https://nerves-project.org/" rel="nofollow">https://nerves-project.org/</a><br>
SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
ElixirConf US — <a href="https://elixirconf.com/events" rel="nofollow">https://elixirconf.com/events</a><br>
The Erlang Ecosystem Foundation — <a href="https://erlef.org/" rel="nofollow">https://erlef.org/</a><br>
GRiSP — <a href="https://www.grisp.org/" rel="nofollow">https://www.grisp.org/</a><br>
Vintage Net — <a href="https://github.com/nerves-networking/vintage_net" rel="nofollow">https://github.com/nerves-networking/vintage_net</a><br>
Joe Armstrong — <a href="https://joearms.github.io/" rel="nofollow">https://joearms.github.io/</a><br>
Erlang — <a href="https://www.erlang.org/" rel="nofollow">https://www.erlang.org/</a><br>
Linux — <a href="https://www.linux.org/" rel="nofollow">https://www.linux.org/</a></p><p>Special Guest: Frank Hunleth.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>On today’s show, we welcome Justin Schneck and Frank Hunleth, luminaries from the Nerves team! We take a dive into the world of Nerves with them, covering themes of performance, problem-solving, transitioning to hardware, and breakthroughs in the field. We begin with a conversation on how Elixir handles performance issues on the range of devices they support and Frank gets into how the team solved an early boot time discrepancy between a PC and a Raspberry Pi board. Other big themes for today are ironing out the kinks in the system registry model and merging Erlang and into hard real-time. After squeezing some information out of the guys about their use of ugly code hacks we get into some visionary decisions as well as things the team wished they could have done differently at Elixir (see the release of the new networking stack). Finally, we end off with what Frank and Justin are excited about as far as developments in the Nerves community, so be sure to plug into this one!</p>

<p>**Key Points From This Episode:</p>

<ul>
<li>What Justin did in Tokyo, from soaking in hot springs to debugging in Kanji.</li>
<li>An explanation of The Erlang Ecosystem Foundation, an embedded systems working group.</li>
<li>The use of the VintageNet library for setting up multi-hold nerve networks.</li>
<li>How Elixir handles performance issues on the range of devices they support.</li>
<li>A breakdown of troubleshooting processes as far as acceleration with FPGAs.</li>
<li>Issues with dependencies that occur when starting a network node on a Nerves device.</li>
<li>How Elixir is trying to evolve past the system registry model.</li>
<li>Identifying the challenge of reconfiguring early boot time which Elixir is facing.</li>
<li>How Elixir solved a load time discrepancy between a PC and the Raspberry Pi board.</li>
<li>Which situations require hardware when Elixir is too slow, such as video encoding.</li>
<li>Japanese research into GPU, FPGA and SIMD optimization involving wrapping code blocks.</li>
<li>Merging Erlang which is soft real-time into hard real-time.</li>
<li>Examples of ugly but fast code hacks in Elixir.</li>
<li>Hacks and the pitfalls of system registry such as returning to a prompt when an app crashes.</li>
<li>Things Elixir would have done differently in working with Nerves if could they rewind time.</li>
<li>Why releasing a new networking stack means Elixir could have done things differently.</li>
<li>Lessons Justin and Frank learned moving from OTP to functional programming at Elixir.</li>
<li>Exciting new developments and releases in the Nerves community.</li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>Nerves Project — <a href="https://nerves-project.org/" rel="nofollow">https://nerves-project.org/</a><br>
SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
ElixirConf US — <a href="https://elixirconf.com/events" rel="nofollow">https://elixirconf.com/events</a><br>
The Erlang Ecosystem Foundation — <a href="https://erlef.org/" rel="nofollow">https://erlef.org/</a><br>
GRiSP — <a href="https://www.grisp.org/" rel="nofollow">https://www.grisp.org/</a><br>
Vintage Net — <a href="https://github.com/nerves-networking/vintage_net" rel="nofollow">https://github.com/nerves-networking/vintage_net</a><br>
Joe Armstrong — <a href="https://joearms.github.io/" rel="nofollow">https://joearms.github.io/</a><br>
Erlang — <a href="https://www.erlang.org/" rel="nofollow">https://www.erlang.org/</a><br>
Linux — <a href="https://www.linux.org/" rel="nofollow">https://www.linux.org/</a></p><p>Special Guest: Frank Hunleth.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Brad Traylor of Podium on Training &amp; Hiring – Working with Elixir</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/s3e3-brad-traylor</link>
      <guid isPermaLink="false">f816f14f-9675-4d38-a622-24dd6eb29cd1</guid>
      <pubDate>Thu, 05 Dec 2019 06:00:00 -0500</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/f816f14f-9675-4d38-a622-24dd6eb29cd1.mp3" length="40543140" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>3</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Our theme this season is working with Elixir, and joining in the conversation today is Brad Traylor from Podium. Brad shares his expertise in hiring and training for Podium, a position he is passionate about since it gives him the opportunity to work on the people and tech side of things. We begin by hearing a bit of Brad’s background, when and how he was first introduced to Elixir and the standout qualities that attracted him to Podium. He discusses the hiring process, including what he looks for in an engineer, why they don’t recruit much but rather work with referrals, the step-by-step of onboarding new devs and the resources he recommends to anyone in the industry.</itunes:subtitle>
      <itunes:duration>27:21</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>Our theme this season is working with Elixir, and joining in the conversation today is Brad Traylor from Podium. Brad shares his expertise in hiring and training for Podium, a position he is passionate about since it gives him the opportunity to work on the people and tech side of things. We begin by hearing a bit of Brad’s background, when and how he was first introduced to Elixir and the standout qualities that attracted him to Podium. He discusses the hiring process, including what he looks for in an engineer, why they don’t recruit much but rather work with referrals, the step-by-step of onboarding new devs and the resources he recommends to anyone in the industry. Another great talk with a stand-up guy — be sure to tune in! 
Key Points From This Episode:
When Brad was first exposed to Elixir and how he became the engineering manager. 
Searching for rocket ship startups and what specifically drew him to Podium. 
Having a desire to work with the people and the tech side of the industry. 
The growth trajectory of Podium from a management perspective. 
Hiring predominantly from referrals rather than recruiting developers. 
The biggest challenge with hiring Elixir devs, including the scarcity of good ones! 
Two things Brad looks for when hiring engineers: the drive to learn and a cultural fit. 
The benefit of hiring younger developers. 
Thoughts on training different languages and adding them to Podium’s tech stack.
An overview of the typical onboarding process for a new engineer.
Elixir 101 and other ways they keep training and refining the skills of developers.  
Resources that Brad has recently learned and those he always recommends to devs. 
**Links Mentioned in Today’s Episode:
Brad Traylor on LinkedIn — https://www.linkedin.com/in/bradtraylor
Brad Traylor on Twitter — https://twitter.com/btjordan23
Podium — https://www.podium.com
SmartLogic — https://smartlogic.io/ 
Elixir — https://elixir-lang.org
University of Michigan — https://umich.edu
Java — https://www.java.com/en/
Python — https://www.python.org
Rust — https://www.rust-lang.org
Ruby — https://www.ruby-lang.org/en/
TypeScript — https://www.typescriptlang.org
Pragmatic Institute — https://www.pragmaticinstitute.com/courses
The Manager’s Path — https://www.amazon.com/Managers-Path-Leaders-Navigating-Growth-ebook/dp/B06XP3GJ7F
Camile Fournier — https://twitter.com/skamille
 Special Guest: Brad Traylor.
</description>
      <itunes:keywords>elixir, phoenix</itunes:keywords>
      <content:encoded><![CDATA[
        <p>Our theme this season is working with Elixir, and joining in the conversation today is Brad Traylor from Podium. Brad shares his expertise in hiring and training for Podium, a position he is passionate about since it gives him the opportunity to work on the people and tech side of things. We begin by hearing a bit of Brad’s background, when and how he was first introduced to Elixir and the standout qualities that attracted him to Podium. He discusses the hiring process, including what he looks for in an engineer, why they don’t recruit much but rather work with referrals, the step-by-step of onboarding new devs and the resources he recommends to anyone in the industry. Another great talk with a stand-up guy — be sure to tune in! </p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>When Brad was first exposed to Elixir and how he became the engineering manager. </li>
<li>Searching for rocket ship startups and what specifically drew him to Podium. </li>
<li>Having a desire to work with the people and the tech side of the industry. </li>
<li>The growth trajectory of Podium from a management perspective. </li>
<li>Hiring predominantly from referrals rather than recruiting developers. </li>
<li>The biggest challenge with hiring Elixir devs, including the scarcity of good ones! </li>
<li>Two things Brad looks for when hiring engineers: the drive to learn and a cultural fit. </li>
<li>The benefit of hiring younger developers. </li>
<li>Thoughts on training different languages and adding them to Podium’s tech stack.</li>
<li>An overview of the typical onboarding process for a new engineer.</li>
<li>Elixir 101 and other ways they keep training and refining the skills of developers.<br></li>
<li>Resources that Brad has recently learned and those he always recommends to devs. </li>
</ul>

<p>**Links Mentioned in Today’s Episode:</p>

<p>Brad Traylor on LinkedIn — <a href="https://www.linkedin.com/in/bradtraylor" rel="nofollow">https://www.linkedin.com/in/bradtraylor</a><br>
Brad Traylor on Twitter — <a href="https://twitter.com/btjordan23" rel="nofollow">https://twitter.com/btjordan23</a><br>
Podium — <a href="https://www.podium.com" rel="nofollow">https://www.podium.com</a><br>
SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
Elixir — <a href="https://elixir-lang.org" rel="nofollow">https://elixir-lang.org</a><br>
University of Michigan — <a href="https://umich.edu" rel="nofollow">https://umich.edu</a><br>
Java — <a href="https://www.java.com/en/" rel="nofollow">https://www.java.com/en/</a><br>
Python — <a href="https://www.python.org" rel="nofollow">https://www.python.org</a><br>
Rust — <a href="https://www.rust-lang.org" rel="nofollow">https://www.rust-lang.org</a><br>
Ruby — <a href="https://www.ruby-lang.org/en/" rel="nofollow">https://www.ruby-lang.org/en/</a><br>
TypeScript — <a href="https://www.typescriptlang.org" rel="nofollow">https://www.typescriptlang.org</a><br>
Pragmatic Institute — <a href="https://www.pragmaticinstitute.com/courses" rel="nofollow">https://www.pragmaticinstitute.com/courses</a><br>
The Manager’s Path — <a href="https://www.amazon.com/Managers-Path-Leaders-Navigating-Growth-ebook/dp/B06XP3GJ7F" rel="nofollow">https://www.amazon.com/Managers-Path-Leaders-Navigating-Growth-ebook/dp/B06XP3GJ7F</a><br>
Camile Fournier — <a href="https://twitter.com/skamille" rel="nofollow">https://twitter.com/skamille</a></p><p>Special Guest: Brad Traylor.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Our theme this season is working with Elixir, and joining in the conversation today is Brad Traylor from Podium. Brad shares his expertise in hiring and training for Podium, a position he is passionate about since it gives him the opportunity to work on the people and tech side of things. We begin by hearing a bit of Brad’s background, when and how he was first introduced to Elixir and the standout qualities that attracted him to Podium. He discusses the hiring process, including what he looks for in an engineer, why they don’t recruit much but rather work with referrals, the step-by-step of onboarding new devs and the resources he recommends to anyone in the industry. Another great talk with a stand-up guy — be sure to tune in! </p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>When Brad was first exposed to Elixir and how he became the engineering manager. </li>
<li>Searching for rocket ship startups and what specifically drew him to Podium. </li>
<li>Having a desire to work with the people and the tech side of the industry. </li>
<li>The growth trajectory of Podium from a management perspective. </li>
<li>Hiring predominantly from referrals rather than recruiting developers. </li>
<li>The biggest challenge with hiring Elixir devs, including the scarcity of good ones! </li>
<li>Two things Brad looks for when hiring engineers: the drive to learn and a cultural fit. </li>
<li>The benefit of hiring younger developers. </li>
<li>Thoughts on training different languages and adding them to Podium’s tech stack.</li>
<li>An overview of the typical onboarding process for a new engineer.</li>
<li>Elixir 101 and other ways they keep training and refining the skills of developers.<br></li>
<li>Resources that Brad has recently learned and those he always recommends to devs. </li>
</ul>

<p>**Links Mentioned in Today’s Episode:</p>

<p>Brad Traylor on LinkedIn — <a href="https://www.linkedin.com/in/bradtraylor" rel="nofollow">https://www.linkedin.com/in/bradtraylor</a><br>
Brad Traylor on Twitter — <a href="https://twitter.com/btjordan23" rel="nofollow">https://twitter.com/btjordan23</a><br>
Podium — <a href="https://www.podium.com" rel="nofollow">https://www.podium.com</a><br>
SmartLogic — <a href="https://smartlogic.io/" rel="nofollow">https://smartlogic.io/</a> <br>
Elixir — <a href="https://elixir-lang.org" rel="nofollow">https://elixir-lang.org</a><br>
University of Michigan — <a href="https://umich.edu" rel="nofollow">https://umich.edu</a><br>
Java — <a href="https://www.java.com/en/" rel="nofollow">https://www.java.com/en/</a><br>
Python — <a href="https://www.python.org" rel="nofollow">https://www.python.org</a><br>
Rust — <a href="https://www.rust-lang.org" rel="nofollow">https://www.rust-lang.org</a><br>
Ruby — <a href="https://www.ruby-lang.org/en/" rel="nofollow">https://www.ruby-lang.org/en/</a><br>
TypeScript — <a href="https://www.typescriptlang.org" rel="nofollow">https://www.typescriptlang.org</a><br>
Pragmatic Institute — <a href="https://www.pragmaticinstitute.com/courses" rel="nofollow">https://www.pragmaticinstitute.com/courses</a><br>
The Manager’s Path — <a href="https://www.amazon.com/Managers-Path-Leaders-Navigating-Growth-ebook/dp/B06XP3GJ7F" rel="nofollow">https://www.amazon.com/Managers-Path-Leaders-Navigating-Growth-ebook/dp/B06XP3GJ7F</a><br>
Camile Fournier — <a href="https://twitter.com/skamille" rel="nofollow">https://twitter.com/skamille</a></p><p>Special Guest: Brad Traylor.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>José Valim, Creator of Elixir</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/s3-e2-jose-valim</link>
      <guid isPermaLink="false">13faacd6-6639-4fe7-a552-5f58e3dc2f3d</guid>
      <pubDate>Tue, 26 Nov 2019 06:00:00 -0500</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/13faacd6-6639-4fe7-a552-5f58e3dc2f3d.mp3" length="64040420" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>3</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Today on Elixir Wizards we are joined by none other than José Valim, the inventor of Elixir! Coming from the Ruby on Rails world, José found his way to functional programming and we hear all about the evolution of his philosophy and thought process around the time of the creation of the language. He gives us some great insight into why functional programming is so appealing to him and the problems he wanted to solve by creating Elixir. We chat about other languages and his use of Erlang, Elixir's three biggest influences and some important characters in the story. José also shares a bit of personal, behind the scenes stuff about his schedule and how he tries to stay as productive as possible. We finish off the chat, talking about performance and the measures José has taken in this regard. For all this and more from a true Elixir wizard, be sure to tune in!</itunes:subtitle>
      <itunes:duration>43:40</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/episodes/1/13faacd6-6639-4fe7-a552-5f58e3dc2f3d/cover.jpg?v=1" />
      <description>Today on Elixir Wizards we are joined by none other than José Valim, the inventor of Elixir! Coming from the Ruby on Rails world, José found his way to functional programming and we hear all about the evolution of his philosophy and thought process around the time of the creation of the language. He gives us some great insight into why functional programming is so appealing to him and the problems he wanted to solve by creating Elixir. We chat about other languages and his use of Erlang, Elixir's three biggest influences and some important characters in the story. José also shares a bit of personal, behind the scenes stuff about his schedule and how he tries to stay as productive as possible. We finish off the chat, talking about performance and the measures José has taken in this regard. For all this and more from a true Elixir wizard, be sure to tune in!
Key Points From This Episode:
José's thoughts on our recent podcast name-change!
The first steps for José in the process of writing a language.
Reason for José's decision to step out of the Ruby on Rails world. 
The 'aha' moment that José had when moving into functional programming. 
Some of the inspiration for Elixir from other languages.
A few of the people that have mentored and inspired José in his career. 
The research and development phase for Elixir and José strategy for this. 
José's work habits, his typical day and the influence of his kids on his flow. 
Why José still considers himself an Elixir programmer despite his proximity. 
Elixir and machine learning; why the two are not more closely linked. 
Steps in the measurement process for José and Elixir. 
The time that José has spent on the performance side of the language. 
Sacrifices and substitution in optimizing Elixir's performance. 
Some of the things on the horizon that are exciting José. 
Links Mentioned in Today’s Episode:
SmartLogic (https://www.smartlogic.com)
José Valim (https://github.com/josevalim)
Plataformatec (http://plataformatec)
Harry Potter (https://www.wizardingworld.com/)
Erlang (https://www.erlang.org/)
Ruby (https://www.ruby-lang.org/en/)
Clojure (https://clojure.org/)
ElixirConf (https://elixirconf.com/events) Special Guest: José Valim.
</description>
      <itunes:keywords>elixir</itunes:keywords>
      <content:encoded><![CDATA[
        <p>Today on Elixir Wizards we are joined by none other than José Valim, the inventor of Elixir! Coming from the Ruby on Rails world, José found his way to functional programming and we hear all about the evolution of his philosophy and thought process around the time of the creation of the language. He gives us some great insight into why functional programming is so appealing to him and the problems he wanted to solve by creating Elixir. We chat about other languages and his use of Erlang, Elixir&#39;s three biggest influences and some important characters in the story. José also shares a bit of personal, behind the scenes stuff about his schedule and how he tries to stay as productive as possible. We finish off the chat, talking about performance and the measures José has taken in this regard. For all this and more from a true Elixir wizard, be sure to tune in!</p>

<p>Key Points From This Episode:</p>

<ul>
<li>José&#39;s thoughts on our recent podcast name-change!</li>
<li>The first steps for José in the process of writing a language.</li>
<li>Reason for José&#39;s decision to step out of the Ruby on Rails world. </li>
<li>The &#39;aha&#39; moment that José had when moving into functional programming. </li>
<li>Some of the inspiration for Elixir from other languages.</li>
<li>A few of the people that have mentored and inspired José in his career. </li>
<li>The research and development phase for Elixir and José strategy for this. </li>
<li>José&#39;s work habits, his typical day and the influence of his kids on his flow. </li>
<li>Why José still considers himself an Elixir programmer despite his proximity. </li>
<li>Elixir and machine learning; why the two are not more closely linked. </li>
<li>Steps in the measurement process for José and Elixir. </li>
<li>The time that José has spent on the performance side of the language. </li>
<li>Sacrifices and substitution in optimizing Elixir&#39;s performance. </li>
<li>Some of the things on the horizon that are exciting José. </li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p><a href="https://www.smartlogic.com" rel="nofollow">SmartLogic</a><br>
<a href="https://github.com/josevalim" rel="nofollow">José Valim</a><br>
<a href="http://plataformatec" rel="nofollow">Plataformatec</a><br>
<a href="https://www.wizardingworld.com/" rel="nofollow">Harry Potter</a><br>
<a href="https://www.erlang.org/" rel="nofollow">Erlang</a><br>
<a href="https://www.ruby-lang.org/en/" rel="nofollow">Ruby</a><br>
<a href="https://clojure.org/" rel="nofollow">Clojure</a><br>
<a href="https://elixirconf.com/events" rel="nofollow">ElixirConf</a></p><p>Special Guest: José Valim.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Today on Elixir Wizards we are joined by none other than José Valim, the inventor of Elixir! Coming from the Ruby on Rails world, José found his way to functional programming and we hear all about the evolution of his philosophy and thought process around the time of the creation of the language. He gives us some great insight into why functional programming is so appealing to him and the problems he wanted to solve by creating Elixir. We chat about other languages and his use of Erlang, Elixir&#39;s three biggest influences and some important characters in the story. José also shares a bit of personal, behind the scenes stuff about his schedule and how he tries to stay as productive as possible. We finish off the chat, talking about performance and the measures José has taken in this regard. For all this and more from a true Elixir wizard, be sure to tune in!</p>

<p>Key Points From This Episode:</p>

<ul>
<li>José&#39;s thoughts on our recent podcast name-change!</li>
<li>The first steps for José in the process of writing a language.</li>
<li>Reason for José&#39;s decision to step out of the Ruby on Rails world. </li>
<li>The &#39;aha&#39; moment that José had when moving into functional programming. </li>
<li>Some of the inspiration for Elixir from other languages.</li>
<li>A few of the people that have mentored and inspired José in his career. </li>
<li>The research and development phase for Elixir and José strategy for this. </li>
<li>José&#39;s work habits, his typical day and the influence of his kids on his flow. </li>
<li>Why José still considers himself an Elixir programmer despite his proximity. </li>
<li>Elixir and machine learning; why the two are not more closely linked. </li>
<li>Steps in the measurement process for José and Elixir. </li>
<li>The time that José has spent on the performance side of the language. </li>
<li>Sacrifices and substitution in optimizing Elixir&#39;s performance. </li>
<li>Some of the things on the horizon that are exciting José. </li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p><a href="https://www.smartlogic.com" rel="nofollow">SmartLogic</a><br>
<a href="https://github.com/josevalim" rel="nofollow">José Valim</a><br>
<a href="http://plataformatec" rel="nofollow">Plataformatec</a><br>
<a href="https://www.wizardingworld.com/" rel="nofollow">Harry Potter</a><br>
<a href="https://www.erlang.org/" rel="nofollow">Erlang</a><br>
<a href="https://www.ruby-lang.org/en/" rel="nofollow">Ruby</a><br>
<a href="https://clojure.org/" rel="nofollow">Clojure</a><br>
<a href="https://elixirconf.com/events" rel="nofollow">ElixirConf</a></p><p>Special Guest: José Valim.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Dr Jim Freeze on Hiring, Training, and Functional Programming – Working with Elixir</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/s3e1-dr-freeze</link>
      <guid isPermaLink="false">7f21096c-8f00-4f06-9b4a-a0a8b554e28b</guid>
      <pubDate>Thu, 21 Nov 2019 06:00:00 -0500</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/7f21096c-8f00-4f06-9b4a-a0a8b554e28b.mp3" length="38112382" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>3</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Welcome to Elixir Wizards, today we are joined by Dr. Jim Freeze to talk about his passion for and history in Elixir and functional programming. Dr. Freeze is one of the organizers of one of our favorite things in the world, Elixir Conf! He shares his story of coming to functional programming and his early days with Elixir, what he sees as the most important aspects of the conference before diving into what is on offer for those that attend. We talk about how employers can get Elixir newcomers up to speed on the language and the most effective ways Dr. Freeze stays abreast of developments in the field. Our guest also recommends a few resources for those wanting an introduction to Elixir and makes a great argument for the usefulness of a functional approach to programming. For all this and a whole bunch more, join us today!</itunes:subtitle>
      <itunes:duration>25:40</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/episodes/7/7f21096c-8f00-4f06-9b4a-a0a8b554e28b/cover.jpg?v=1" />
      <description>Welcome to Elixir Wizards, today we are joined by Dr. Jim Freeze to talk about his passion for and history in Elixir and functional programming. Dr. Freeze is one of the organizers of one of our favorite things in the world, Elixir Conf! He shares his story of coming to functional programming and his early days with Elixir, what he sees as the most important aspects of the conference before diving into what is on offer for those that attend. We talk about how employers can get Elixir newcomers up to speed on the language and the most effective ways Dr. Freeze stays abreast of developments in the field. Our guest also recommends a few resources for those wanting an introduction to Elixir and makes a great argument for the usefulness of a functional approach to programming. For all this and a whole bunch more, join us today!
Key Points From This Episode:
How Dr. Freeze got started with Elixir and his programming background.
A little bit about the early days of Elixir Conf and what the first events were like.  
The particulars of Dr. Freeze's doctorate and his title. 
Education, networking and how Elixir Conf fits into the developer hiring game. 
The training that is offered at the conference and the philosophy to serving attendees. 
Dr. Freeze's recommendations for employers bringing newbies up to speed with Elixir. 
How our guest continues his learning and stays focused on what is necessary.
Useful resources and materials for Elixir, according to Dr. Freeze.
Contemplating functional programming and its key components. 
Why to consider functional programming coming from an object-based background.
The biggest hurdles in moving over to functional programming and Elixir. 
Following the data and how much the simplicity of this directive can help. 
Dr. Freeze's favorite thing in the functional world!
Links Mentioned in Today’s Episode:
SmartLogic (https://www.smartlogic.com) 
Dr. Jim Freeze on Twitter (https://twitter.com/jimfreeze)
ElixirConf (https://elixirconf.com/events) 
Sophie DeBenedetto (http://sophiedebenedetto.nyc/)
Elixir Radar (https://elixirnation.io/references/elixir-radar-weekly-newsletter-on-elixir)
Phoenix In Action (https://www.amazon.com/Phoenix-Action-Geoffrey-Lessel/dp/1617295043)
Geoffrey Lessel (http://www.apple.com)
Saša Jurić (https://codesync.global/speaker/sasa-juric/)
Sandi Metz (https://www.sandimetz.com) Special Guest: Dr. Jim Freeze.
</description>
      <itunes:keywords>elixirconf, functional programming, elixir</itunes:keywords>
      <content:encoded><![CDATA[
        <p>Welcome to Elixir Wizards, today we are joined by Dr. Jim Freeze to talk about his passion for and history in Elixir and functional programming. Dr. Freeze is one of the organizers of one of our favorite things in the world, Elixir Conf! He shares his story of coming to functional programming and his early days with Elixir, what he sees as the most important aspects of the conference before diving into what is on offer for those that attend. We talk about how employers can get Elixir newcomers up to speed on the language and the most effective ways Dr. Freeze stays abreast of developments in the field. Our guest also recommends a few resources for those wanting an introduction to Elixir and makes a great argument for the usefulness of a functional approach to programming. For all this and a whole bunch more, join us today!</p>

<p>Key Points From This Episode:</p>

<ul>
<li>How Dr. Freeze got started with Elixir and his programming background.</li>
<li>A little bit about the early days of Elixir Conf and what the first events were like.<br></li>
<li>The particulars of Dr. Freeze&#39;s doctorate and his title. </li>
<li>Education, networking and how Elixir Conf fits into the developer hiring game. </li>
<li>The training that is offered at the conference and the philosophy to serving attendees. </li>
<li>Dr. Freeze&#39;s recommendations for employers bringing newbies up to speed with Elixir. </li>
<li>How our guest continues his learning and stays focused on what is necessary.</li>
<li>Useful resources and materials for Elixir, according to Dr. Freeze.</li>
<li>Contemplating functional programming and its key components. </li>
<li>Why to consider functional programming coming from an object-based background.</li>
<li>The biggest hurdles in moving over to functional programming and Elixir. </li>
<li>Following the data and how much the simplicity of this directive can help. </li>
<li>Dr. Freeze&#39;s favorite thing in the functional world!</li>
</ul>

<p>Links Mentioned in Today’s Episode:<br>
<a href="https://www.smartlogic.com" rel="nofollow">SmartLogic</a> <br>
<a href="https://twitter.com/jimfreeze" rel="nofollow">Dr. Jim Freeze on Twitter</a><br>
<a href="https://elixirconf.com/events" rel="nofollow">ElixirConf</a> <br>
<a href="http://sophiedebenedetto.nyc/" rel="nofollow">Sophie DeBenedetto</a><br>
<a href="https://elixirnation.io/references/elixir-radar-weekly-newsletter-on-elixir" rel="nofollow">Elixir Radar</a><br>
<a href="https://www.amazon.com/Phoenix-Action-Geoffrey-Lessel/dp/1617295043" rel="nofollow">Phoenix In Action</a><br>
<a href="http://www.apple.com" rel="nofollow">Geoffrey Lessel</a><br>
<a href="https://codesync.global/speaker/sasa-juric/" rel="nofollow">Saša Jurić</a><br>
<a href="https://www.sandimetz.com" rel="nofollow">Sandi Metz</a></p><p>Special Guest: Dr. Jim Freeze.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Welcome to Elixir Wizards, today we are joined by Dr. Jim Freeze to talk about his passion for and history in Elixir and functional programming. Dr. Freeze is one of the organizers of one of our favorite things in the world, Elixir Conf! He shares his story of coming to functional programming and his early days with Elixir, what he sees as the most important aspects of the conference before diving into what is on offer for those that attend. We talk about how employers can get Elixir newcomers up to speed on the language and the most effective ways Dr. Freeze stays abreast of developments in the field. Our guest also recommends a few resources for those wanting an introduction to Elixir and makes a great argument for the usefulness of a functional approach to programming. For all this and a whole bunch more, join us today!</p>

<p>Key Points From This Episode:</p>

<ul>
<li>How Dr. Freeze got started with Elixir and his programming background.</li>
<li>A little bit about the early days of Elixir Conf and what the first events were like.<br></li>
<li>The particulars of Dr. Freeze&#39;s doctorate and his title. </li>
<li>Education, networking and how Elixir Conf fits into the developer hiring game. </li>
<li>The training that is offered at the conference and the philosophy to serving attendees. </li>
<li>Dr. Freeze&#39;s recommendations for employers bringing newbies up to speed with Elixir. </li>
<li>How our guest continues his learning and stays focused on what is necessary.</li>
<li>Useful resources and materials for Elixir, according to Dr. Freeze.</li>
<li>Contemplating functional programming and its key components. </li>
<li>Why to consider functional programming coming from an object-based background.</li>
<li>The biggest hurdles in moving over to functional programming and Elixir. </li>
<li>Following the data and how much the simplicity of this directive can help. </li>
<li>Dr. Freeze&#39;s favorite thing in the functional world!</li>
</ul>

<p>Links Mentioned in Today’s Episode:<br>
<a href="https://www.smartlogic.com" rel="nofollow">SmartLogic</a> <br>
<a href="https://twitter.com/jimfreeze" rel="nofollow">Dr. Jim Freeze on Twitter</a><br>
<a href="https://elixirconf.com/events" rel="nofollow">ElixirConf</a> <br>
<a href="http://sophiedebenedetto.nyc/" rel="nofollow">Sophie DeBenedetto</a><br>
<a href="https://elixirnation.io/references/elixir-radar-weekly-newsletter-on-elixir" rel="nofollow">Elixir Radar</a><br>
<a href="https://www.amazon.com/Phoenix-Action-Geoffrey-Lessel/dp/1617295043" rel="nofollow">Phoenix In Action</a><br>
<a href="http://www.apple.com" rel="nofollow">Geoffrey Lessel</a><br>
<a href="https://codesync.global/speaker/sasa-juric/" rel="nofollow">Saša Jurić</a><br>
<a href="https://www.sandimetz.com" rel="nofollow">Sandi Metz</a></p><p>Special Guest: Dr. Jim Freeze.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Season Two Wrap</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/season-two-wrap</link>
      <guid isPermaLink="false">e472382c-8b12-4b39-9e07-365dbdb8d77d</guid>
      <pubDate>Thu, 03 Oct 2019 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/e472382c-8b12-4b39-9e07-365dbdb8d77d.mp3" length="17799716" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>2</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Welcome to the last episode of Season 2 of the podcast! We are taking this opportunity to recap what we covered in the season and talk about what we liked and what we didn't like so much. We do not have a guest for today's show so it is just Eric and Justus doing some reflection. We do want to take this opportunity to thank all of our guests that have appeared on this season and shared their expertise with us, we definitely feel we learned a lot during this time! In Season 3 we will be focussing on functional programming, performance and teaching Elixir, so make sure to keep an eye out for when that drops in the future!</itunes:subtitle>
      <itunes:duration>11:53</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>Welcome to the last episode of Season 2 of the podcast! We are taking this opportunity to recap what we covered in the season and talk about what we liked and what we didn't like so much. We do not have a guest for today's show so it is just Eric and Justus doing some reflection. We do want to take this opportunity to thank all of our guests that have appeared on this season and shared their expertise with us, we definitely feel we learned a lot during this time! In Season 3 we will be focussing on functional programming, performance and teaching Elixir, so make sure to keep an eye out for when that drops in the future!
Key Points From This Episode:
The possibility of longer episodes for next season 
Reflections on ElixirConf and the time we spent there this year. 
The upcoming conference in New Orleans that Eric is keynoting.  
Thoughts on the future of the podcast and the promise of Season 3. 
Reach out! We want to hear from you! 
And much more! 
Links Mentioned in Today’s Episode:
SmartLogic — https://www.smartlogic.io
Brooklyn Zelenka — https://github.com/expede
Bryan Joseph — https://github.com/bryanjos
Paul Schoenfelder — https://github.com/bitwalker
Meryl Dakin— https://github.com/meryldakin
René Föhring— https://twitter.com/rrrene
Michal Muskala — https://michal.muskala.eu/
Todd Resudek — https://www.linkedin.com/in/toddresudek/
Shanti Chellaram— https://github.com/shantiii
Sophie DeBenedetto — http://sophiedebenedetto.nyc/
Dave Lucia — https://www.linkedin.com/in/david-lucia-a395441b
ElixirConf — https://elixirconf.com/2019
The Big Elixir — https://www.thebigelixir.com/
Le Petit Theatre — http://www.lepetittheatre.com
Lone Star Elixir — https://www.lonestarelixir.com
The Empire Strikes Back — https://www.rottentomatoes.com/m/empirestrikesback
</description>
      <itunes:keywords></itunes:keywords>
      <content:encoded><![CDATA[
        <p>Welcome to the last episode of Season 2 of the podcast! We are taking this opportunity to recap what we covered in the season and talk about what we liked and what we didn&#39;t like so much. We do not have a guest for today&#39;s show so it is just Eric and Justus doing some reflection. We do want to take this opportunity to thank all of our guests that have appeared on this season and shared their expertise with us, we definitely feel we learned a lot during this time! In Season 3 we will be focussing on functional programming, performance and teaching Elixir, so make sure to keep an eye out for when that drops in the future!</p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>The possibility of longer episodes for next season </li>
<li>Reflections on ElixirConf and the time we spent there this year. </li>
<li>The upcoming conference in New Orleans that Eric is keynoting.<br></li>
<li>Thoughts on the future of the podcast and the promise of Season 3. </li>
<li>Reach out! We want to hear from you! </li>
<li>And much more! </li>
</ul>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>SmartLogic — <a href="https://www.smartlogic.io" rel="nofollow">https://www.smartlogic.io</a><br>
Brooklyn Zelenka — <a href="https://github.com/expede" rel="nofollow">https://github.com/expede</a><br>
Bryan Joseph — <a href="https://github.com/bryanjos" rel="nofollow">https://github.com/bryanjos</a><br>
Paul Schoenfelder — <a href="https://github.com/bitwalker" rel="nofollow">https://github.com/bitwalker</a><br>
Meryl Dakin— <a href="https://github.com/meryldakin" rel="nofollow">https://github.com/meryldakin</a><br>
René Föhring— <a href="https://twitter.com/rrrene" rel="nofollow">https://twitter.com/rrrene</a><br>
Michal Muskala — <a href="https://michal.muskala.eu/" rel="nofollow">https://michal.muskala.eu/</a><br>
Todd Resudek — <a href="https://www.linkedin.com/in/toddresudek/" rel="nofollow">https://www.linkedin.com/in/toddresudek/</a><br>
Shanti Chellaram— <a href="https://github.com/shantiii" rel="nofollow">https://github.com/shantiii</a><br>
Sophie DeBenedetto — <a href="http://sophiedebenedetto.nyc/" rel="nofollow">http://sophiedebenedetto.nyc/</a><br>
Dave Lucia — <a href="https://www.linkedin.com/in/david-lucia-a395441b" rel="nofollow">https://www.linkedin.com/in/david-lucia-a395441b</a><br>
ElixirConf — <a href="https://elixirconf.com/2019" rel="nofollow">https://elixirconf.com/2019</a><br>
The Big Elixir — <a href="https://www.thebigelixir.com/" rel="nofollow">https://www.thebigelixir.com/</a><br>
Le Petit Theatre — <a href="http://www.lepetittheatre.com" rel="nofollow">http://www.lepetittheatre.com</a><br>
Lone Star Elixir — <a href="https://www.lonestarelixir.com" rel="nofollow">https://www.lonestarelixir.com</a><br>
The Empire Strikes Back — <a href="https://www.rottentomatoes.com/m/empire_strikes_back" rel="nofollow">https://www.rottentomatoes.com/m/empire_strikes_back</a></p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Welcome to the last episode of Season 2 of the podcast! We are taking this opportunity to recap what we covered in the season and talk about what we liked and what we didn&#39;t like so much. We do not have a guest for today&#39;s show so it is just Eric and Justus doing some reflection. We do want to take this opportunity to thank all of our guests that have appeared on this season and shared their expertise with us, we definitely feel we learned a lot during this time! In Season 3 we will be focussing on functional programming, performance and teaching Elixir, so make sure to keep an eye out for when that drops in the future!</p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>The possibility of longer episodes for next season </li>
<li>Reflections on ElixirConf and the time we spent there this year. </li>
<li>The upcoming conference in New Orleans that Eric is keynoting.<br></li>
<li>Thoughts on the future of the podcast and the promise of Season 3. </li>
<li>Reach out! We want to hear from you! </li>
<li>And much more! </li>
</ul>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>SmartLogic — <a href="https://www.smartlogic.io" rel="nofollow">https://www.smartlogic.io</a><br>
Brooklyn Zelenka — <a href="https://github.com/expede" rel="nofollow">https://github.com/expede</a><br>
Bryan Joseph — <a href="https://github.com/bryanjos" rel="nofollow">https://github.com/bryanjos</a><br>
Paul Schoenfelder — <a href="https://github.com/bitwalker" rel="nofollow">https://github.com/bitwalker</a><br>
Meryl Dakin— <a href="https://github.com/meryldakin" rel="nofollow">https://github.com/meryldakin</a><br>
René Föhring— <a href="https://twitter.com/rrrene" rel="nofollow">https://twitter.com/rrrene</a><br>
Michal Muskala — <a href="https://michal.muskala.eu/" rel="nofollow">https://michal.muskala.eu/</a><br>
Todd Resudek — <a href="https://www.linkedin.com/in/toddresudek/" rel="nofollow">https://www.linkedin.com/in/toddresudek/</a><br>
Shanti Chellaram— <a href="https://github.com/shantiii" rel="nofollow">https://github.com/shantiii</a><br>
Sophie DeBenedetto — <a href="http://sophiedebenedetto.nyc/" rel="nofollow">http://sophiedebenedetto.nyc/</a><br>
Dave Lucia — <a href="https://www.linkedin.com/in/david-lucia-a395441b" rel="nofollow">https://www.linkedin.com/in/david-lucia-a395441b</a><br>
ElixirConf — <a href="https://elixirconf.com/2019" rel="nofollow">https://elixirconf.com/2019</a><br>
The Big Elixir — <a href="https://www.thebigelixir.com/" rel="nofollow">https://www.thebigelixir.com/</a><br>
Le Petit Theatre — <a href="http://www.lepetittheatre.com" rel="nofollow">http://www.lepetittheatre.com</a><br>
Lone Star Elixir — <a href="https://www.lonestarelixir.com" rel="nofollow">https://www.lonestarelixir.com</a><br>
The Empire Strikes Back — <a href="https://www.rottentomatoes.com/m/empire_strikes_back" rel="nofollow">https://www.rottentomatoes.com/m/empire_strikes_back</a></p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Dave Lucia on Rustler – Elixir Internals</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/season-two-lucia</link>
      <guid isPermaLink="false">1f938053-676b-4137-ad82-f104ebda9488</guid>
      <pubDate>Thu, 26 Sep 2019 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/1f938053-676b-4137-ad82-f104ebda9488.mp3" length="31895775" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>2</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Our guest today on the show is Dave Lucia, who is currently the Vice President of Engineering at SimpleBet. He is here as part of Elixir Internals series, to talk to us and all our listeners about Rustler and the contribution he made to the library! According to our guest, Rustler acts as a bridge between Rust and Elixir and allows users to employ the power of Rust within Elixir and a great example of this can be found in Dave's work at SimpleBet. He explains some of this application and the functionality and improvement it offers and the big difference the machine learning models make to this work.</itunes:subtitle>
      <itunes:duration>32:31</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>Our guest today on the show is Dave Lucia, who is currently the Vice President of Engineering at SimpleBet. He is here as part of Elixir Internals series, to talk to us and all our listeners about Rustler and the contribution he made to the library! According to our guest, Rustler acts as a bridge between Rust and Elixir and allows users to employ the power of Rust within Elixir and a great example of this can be found in Dave's work at SimpleBet. He explains some of this application and the functionality and improvement it offers and the big difference the machine learning models make to this work. Dave also gives us some background to his work and career, previous employment and early explorations of open-source software. He also shares some great tips for problem-solving and learning and improving at programming in Rust. We unpack some of the biggest challenges that faced the creation of Rustler, notable differences between Rust and Elixir and the technical components of the library that the team created. For all this and then some, join us for this great episode!
Key Points From This Episode:
More about our guest and his current work at SimpleBet. 
How Dave got started with Elixir while at Bloomberg.
The interesting and beautiful way in which The Outline used Elixir. 
Dave's early forays and experiences with open source software. 
Problem finding and solving; Dave's tips to those wanting to improve. 
Dave's employers' contribution and allowance for open source projects.  
Introducing Rustler and what users can do with it! 
The biggest challenges of using multiple languages in the backend. 
How Rustler works; the core, the code generator and more.
The most important differences between Rust and Elixir.
Dave's best advice and resources for learning and mastering Rust.
And much more! 
Links Mentioned in Today’s Episode:
SmartLogic — https://www.smartlogic.io
Dave Lucia — https://www.linkedin.com/in/david-lucia-a395441b
Rustler — https://github.com/rusterlium/rustler
SimpleBet — https://simplebet.io
Dave Lucia on Twitter — https://twitter.com/davydog187
Dave Lucia Email — dave@simplebet.io
Elixir — https://elixir-lang.org
Python — https://www.python.org
JavaScript — https://www.javascript.com
Rust — https://www.rust-lang.org
Bloomberg — https://www.bloomberg.com
Slack — https://slack.com
Vox Media — https://www.voxmedia.com
The Outline — https://theoutline.com
The Rust Programming Language — https://www.amazon.com/Rust-Programming-Language-Steve-Klabnik/dp/1593278284
Rust Playground — https://play.rust-lang.org
Elm Compiler — https://github.com/elm/compiler
 Special Guest: Dave Lucia.
</description>
      <itunes:keywords>elixir, rustler, rust, elm, simplebet</itunes:keywords>
      <content:encoded><![CDATA[
        <p>Our guest today on the show is Dave Lucia, who is currently the Vice President of Engineering at SimpleBet. He is here as part of Elixir Internals series, to talk to us and all our listeners about Rustler and the contribution he made to the library! According to our guest, Rustler acts as a bridge between Rust and Elixir and allows users to employ the power of Rust within Elixir and a great example of this can be found in Dave&#39;s work at SimpleBet. He explains some of this application and the functionality and improvement it offers and the big difference the machine learning models make to this work. Dave also gives us some background to his work and career, previous employment and early explorations of open-source software. He also shares some great tips for problem-solving and learning and improving at programming in Rust. We unpack some of the biggest challenges that faced the creation of Rustler, notable differences between Rust and Elixir and the technical components of the library that the team created. For all this and then some, join us for this great episode!</p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>More about our guest and his current work at SimpleBet. </li>
<li>How Dave got started with Elixir while at Bloomberg.</li>
<li>The interesting and beautiful way in which The Outline used Elixir. </li>
<li>Dave&#39;s early forays and experiences with open source software. </li>
<li>Problem finding and solving; Dave&#39;s tips to those wanting to improve. </li>
<li>Dave&#39;s employers&#39; contribution and allowance for open source projects.<br></li>
<li>Introducing Rustler and what users can do with it! </li>
<li>The biggest challenges of using multiple languages in the backend. </li>
<li>How Rustler works; the core, the code generator and more.</li>
<li>The most important differences between Rust and Elixir.</li>
<li>Dave&#39;s best advice and resources for learning and mastering Rust.</li>
<li>And much more! </li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>SmartLogic — <a href="https://www.smartlogic.io" rel="nofollow">https://www.smartlogic.io</a><br>
Dave Lucia — <a href="https://www.linkedin.com/in/david-lucia-a395441b" rel="nofollow">https://www.linkedin.com/in/david-lucia-a395441b</a><br>
Rustler — <a href="https://github.com/rusterlium/rustler" rel="nofollow">https://github.com/rusterlium/rustler</a><br>
SimpleBet — <a href="https://simplebet.io" rel="nofollow">https://simplebet.io</a><br>
Dave Lucia on Twitter — <a href="https://twitter.com/davydog187" rel="nofollow">https://twitter.com/davydog187</a><br>
Dave Lucia Email — <a href="mailto:dave@simplebet.io" rel="nofollow">dave@simplebet.io</a><br>
Elixir — <a href="https://elixir-lang.org" rel="nofollow">https://elixir-lang.org</a><br>
Python — <a href="https://www.python.org" rel="nofollow">https://www.python.org</a><br>
JavaScript — <a href="https://www.javascript.com" rel="nofollow">https://www.javascript.com</a><br>
Rust — <a href="https://www.rust-lang.org" rel="nofollow">https://www.rust-lang.org</a><br>
Bloomberg — <a href="https://www.bloomberg.com" rel="nofollow">https://www.bloomberg.com</a><br>
Slack — <a href="https://slack.com" rel="nofollow">https://slack.com</a><br>
Vox Media — <a href="https://www.voxmedia.com" rel="nofollow">https://www.voxmedia.com</a><br>
The Outline — <a href="https://theoutline.com" rel="nofollow">https://theoutline.com</a><br>
The Rust Programming Language — <a href="https://www.amazon.com/Rust-Programming-Language-Steve-Klabnik/dp/1593278284" rel="nofollow">https://www.amazon.com/Rust-Programming-Language-Steve-Klabnik/dp/1593278284</a><br>
Rust Playground — <a href="https://play.rust-lang.org" rel="nofollow">https://play.rust-lang.org</a><br>
Elm Compiler — <a href="https://github.com/elm/compiler" rel="nofollow">https://github.com/elm/compiler</a></p><p>Special Guest: Dave Lucia.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Our guest today on the show is Dave Lucia, who is currently the Vice President of Engineering at SimpleBet. He is here as part of Elixir Internals series, to talk to us and all our listeners about Rustler and the contribution he made to the library! According to our guest, Rustler acts as a bridge between Rust and Elixir and allows users to employ the power of Rust within Elixir and a great example of this can be found in Dave&#39;s work at SimpleBet. He explains some of this application and the functionality and improvement it offers and the big difference the machine learning models make to this work. Dave also gives us some background to his work and career, previous employment and early explorations of open-source software. He also shares some great tips for problem-solving and learning and improving at programming in Rust. We unpack some of the biggest challenges that faced the creation of Rustler, notable differences between Rust and Elixir and the technical components of the library that the team created. For all this and then some, join us for this great episode!</p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>More about our guest and his current work at SimpleBet. </li>
<li>How Dave got started with Elixir while at Bloomberg.</li>
<li>The interesting and beautiful way in which The Outline used Elixir. </li>
<li>Dave&#39;s early forays and experiences with open source software. </li>
<li>Problem finding and solving; Dave&#39;s tips to those wanting to improve. </li>
<li>Dave&#39;s employers&#39; contribution and allowance for open source projects.<br></li>
<li>Introducing Rustler and what users can do with it! </li>
<li>The biggest challenges of using multiple languages in the backend. </li>
<li>How Rustler works; the core, the code generator and more.</li>
<li>The most important differences between Rust and Elixir.</li>
<li>Dave&#39;s best advice and resources for learning and mastering Rust.</li>
<li>And much more! </li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>SmartLogic — <a href="https://www.smartlogic.io" rel="nofollow">https://www.smartlogic.io</a><br>
Dave Lucia — <a href="https://www.linkedin.com/in/david-lucia-a395441b" rel="nofollow">https://www.linkedin.com/in/david-lucia-a395441b</a><br>
Rustler — <a href="https://github.com/rusterlium/rustler" rel="nofollow">https://github.com/rusterlium/rustler</a><br>
SimpleBet — <a href="https://simplebet.io" rel="nofollow">https://simplebet.io</a><br>
Dave Lucia on Twitter — <a href="https://twitter.com/davydog187" rel="nofollow">https://twitter.com/davydog187</a><br>
Dave Lucia Email — <a href="mailto:dave@simplebet.io" rel="nofollow">dave@simplebet.io</a><br>
Elixir — <a href="https://elixir-lang.org" rel="nofollow">https://elixir-lang.org</a><br>
Python — <a href="https://www.python.org" rel="nofollow">https://www.python.org</a><br>
JavaScript — <a href="https://www.javascript.com" rel="nofollow">https://www.javascript.com</a><br>
Rust — <a href="https://www.rust-lang.org" rel="nofollow">https://www.rust-lang.org</a><br>
Bloomberg — <a href="https://www.bloomberg.com" rel="nofollow">https://www.bloomberg.com</a><br>
Slack — <a href="https://slack.com" rel="nofollow">https://slack.com</a><br>
Vox Media — <a href="https://www.voxmedia.com" rel="nofollow">https://www.voxmedia.com</a><br>
The Outline — <a href="https://theoutline.com" rel="nofollow">https://theoutline.com</a><br>
The Rust Programming Language — <a href="https://www.amazon.com/Rust-Programming-Language-Steve-Klabnik/dp/1593278284" rel="nofollow">https://www.amazon.com/Rust-Programming-Language-Steve-Klabnik/dp/1593278284</a><br>
Rust Playground — <a href="https://play.rust-lang.org" rel="nofollow">https://play.rust-lang.org</a><br>
Elm Compiler — <a href="https://github.com/elm/compiler" rel="nofollow">https://github.com/elm/compiler</a></p><p>Special Guest: Dave Lucia.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Eric Oestrich on ExVenture – Elixir Internals</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/season-two-oestrich</link>
      <guid isPermaLink="false">0a947a18-82f2-4b2e-8c0c-69696c5980d9</guid>
      <pubDate>Thu, 19 Sep 2019 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/0a947a18-82f2-4b2e-8c0c-69696c5980d9.mp3" length="28927986" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>2</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>This season on Smart Software Season 2, we are focused on the inner workings of Elixir and the inner workings of popular Elixir libraries, or Elixir internals. Today, I have the pleasure of interviewing my colleague, Eric Oestrich who's responsible for the wildly successful Elixir MUD framework ExVenture.</itunes:subtitle>
      <itunes:duration>29:26</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>This season on Smart Software Season 2, we are focused on the inner workings of Elixir and the inner workings of popular Elixir libraries, or Elixir internals. Today, I have the pleasure of interviewing my colleague, Eric Oestrich who's responsible for the wildly successful Elixir MUD framework ExVenture.
ExVenture - https://exventure.org/
MUDs - https://en.wikipedia.org/wiki/MUD
Ecto - https://github.com/elixir-ecto/ecto
Eric's Going Multi-Node presentation at ElixirConf - https://www.youtube.com/watch?v=lCUKQnkjajo
The Big Elixir - https://www.thebigelixir.com/
Eric's Prometheus presentation at Lonestar Elixir - https://www.youtube.com/watch?v=ETUD9SaRCjY
Prometheus - https://prometheus.io/
Go - https://golang.org/
Celluloid - https://celluloid.io/
Phoenix - https://phoenixframework.org/
Grapevine - https://grapevine.haus/
Gossip - https://mudcoders.com/gossip-the-mud-chat-network-3156cf24edf/
Learn more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) 
</description>
      <itunes:keywords>exventure</itunes:keywords>
      <content:encoded><![CDATA[
        <p>This season on Smart Software Season 2, we are focused on the inner workings of Elixir and the inner workings of popular Elixir libraries, or Elixir internals. Today, I have the pleasure of interviewing my colleague, Eric Oestrich who&#39;s responsible for the wildly successful Elixir MUD framework ExVenture.</p>

<p>ExVenture - <a href="https://exventure.org/" rel="nofollow">https://exventure.org/</a><br>
MUDs - <a href="https://en.wikipedia.org/wiki/MUD" rel="nofollow">https://en.wikipedia.org/wiki/MUD</a><br>
Ecto - <a href="https://github.com/elixir-ecto/ecto" rel="nofollow">https://github.com/elixir-ecto/ecto</a><br>
Eric&#39;s Going Multi-Node presentation at ElixirConf - <a href="https://www.youtube.com/watch?v=lCUKQnkjajo" rel="nofollow">https://www.youtube.com/watch?v=lCUKQnkjajo</a><br>
The Big Elixir - <a href="https://www.thebigelixir.com/" rel="nofollow">https://www.thebigelixir.com/</a><br>
Eric&#39;s Prometheus presentation at Lonestar Elixir - <a href="https://www.youtube.com/watch?v=ETUD9SaRCjY" rel="nofollow">https://www.youtube.com/watch?v=ETUD9SaRCjY</a><br>
Prometheus - <a href="https://prometheus.io/" rel="nofollow">https://prometheus.io/</a><br>
Go - <a href="https://golang.org/" rel="nofollow">https://golang.org/</a><br>
Celluloid - <a href="https://celluloid.io/" rel="nofollow">https://celluloid.io/</a><br>
Phoenix - <a href="https://phoenixframework.org/" rel="nofollow">https://phoenixframework.org/</a><br>
Grapevine - <a href="https://grapevine.haus/" rel="nofollow">https://grapevine.haus/</a><br>
Gossip - <a href="https://mudcoders.com/gossip-the-mud-chat-network-3156cf24edf/" rel="nofollow">https://mudcoders.com/gossip-the-mud-chat-network-3156cf24edf/</a></p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>This season on Smart Software Season 2, we are focused on the inner workings of Elixir and the inner workings of popular Elixir libraries, or Elixir internals. Today, I have the pleasure of interviewing my colleague, Eric Oestrich who&#39;s responsible for the wildly successful Elixir MUD framework ExVenture.</p>

<p>ExVenture - <a href="https://exventure.org/" rel="nofollow">https://exventure.org/</a><br>
MUDs - <a href="https://en.wikipedia.org/wiki/MUD" rel="nofollow">https://en.wikipedia.org/wiki/MUD</a><br>
Ecto - <a href="https://github.com/elixir-ecto/ecto" rel="nofollow">https://github.com/elixir-ecto/ecto</a><br>
Eric&#39;s Going Multi-Node presentation at ElixirConf - <a href="https://www.youtube.com/watch?v=lCUKQnkjajo" rel="nofollow">https://www.youtube.com/watch?v=lCUKQnkjajo</a><br>
The Big Elixir - <a href="https://www.thebigelixir.com/" rel="nofollow">https://www.thebigelixir.com/</a><br>
Eric&#39;s Prometheus presentation at Lonestar Elixir - <a href="https://www.youtube.com/watch?v=ETUD9SaRCjY" rel="nofollow">https://www.youtube.com/watch?v=ETUD9SaRCjY</a><br>
Prometheus - <a href="https://prometheus.io/" rel="nofollow">https://prometheus.io/</a><br>
Go - <a href="https://golang.org/" rel="nofollow">https://golang.org/</a><br>
Celluloid - <a href="https://celluloid.io/" rel="nofollow">https://celluloid.io/</a><br>
Phoenix - <a href="https://phoenixframework.org/" rel="nofollow">https://phoenixframework.org/</a><br>
Grapevine - <a href="https://grapevine.haus/" rel="nofollow">https://grapevine.haus/</a><br>
Gossip - <a href="https://mudcoders.com/gossip-the-mud-chat-network-3156cf24edf/" rel="nofollow">https://mudcoders.com/gossip-the-mud-chat-network-3156cf24edf/</a></p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Sophie DeBenedetto on Excrypt and Railway – Elixir Internals</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/season-two-debenedetto</link>
      <guid isPermaLink="false">7b360fac-dde4-44a4-b637-762e19a0274b</guid>
      <pubDate>Thu, 12 Sep 2019 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/7b360fac-dde4-44a4-b637-762e19a0274b.mp3" length="44881230" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>2</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Welcome to another episode of the podcast everybody! As we continue our journey into Elixir internals in Season 2, we welcome Sophie DeBenedetto to tell us about the two libraries she and the Flatiron School created! We talk about Encrypt and Railway and a bunch of other great stuff from the world of Elixir and open source and Sophie shares so much about why she is particularly excited about things at the moment.</itunes:subtitle>
      <itunes:duration>30:42</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>Welcome to another episode of the podcast everybody! As we continue our journey into Elixir internals in Season 2, we welcome Sophie DeBenedetto to tell us about the two libraries she and the Flatiron School created! We talk about Encrypt and Railway and a bunch of other great stuff from the world of Elixir and open source and Sophie shares so much about why she is particularly excited about things at the moment. She talks about the maturation of the Elixir community and her first and most important open-source experiences before diving into her hopes for the future of these platforms. We also discuss the ins and out of the two libraries and our guest does a fantastic job of explaining their functions and the reasons they were built. Sophie shares the major challenges that faced her and the team in creating them and a whole lot more, so make sure to tune in today for all this great information!
Key Points From This Episode:
A brief introduction to Sophie's career, the Flatiron School and her Elixir work.
Sophie's first experiences with open source, contributing to the Elixir School. 
Flatiron's support of open source and their attitude towards the growth of engineers. 
Why Elixir and Ruby are such important languages to Sophie and Flatiron. 
Sophie's wishes for Elixir and what she wants to see more of in the community. 
Introducing Encrypt and Excrypt for Elixir and why Flatiron chose to build them.
The hardest parts of building the library, the challenges of encryption.
Elixir's built-in option parser; convenience and accessing data easily.
The Railway hex package and what it enables users to do. 
Breaking down the functions of RabbitMQ for Erlang. 
The two things that Sophie is most excited about in the Elixir space right now!
And much more! 
Links Mentioned in Today’s Episode:
Sophie DeBenedetto — http://sophiedebenedetto.nyc/
Flatiron School — http://sophiedebenedetto.nyc/
Elixir School — https://elixirschool.com/en/
Encrypt — https://github.com/flatiron-labs/encrypt
Escript — https://hexdocs.pm/mix/master/Mix.Tasks.Escript.Build.html
Ruby — https://www.ruby-lang.org/en/
Kafka — https://kafka.apache.org
Ecto — https://hexdocs.pm/ecto/Ecto.html
Erlang — https://www.erlang.org
RabbitMQ — https://www.rabbitmq.com
Phoenix — https://phoenixframework.org
LiveView — https://dockyard.com/blog/2018/12/12/phoenix-liveview-interactive-real-time-apps-no-need-to-write-javascript
Elixir Conf — https://elixirconf.com/2019 Special Guest: Sophie DeBenedetto.
</description>
      <itunes:keywords></itunes:keywords>
      <content:encoded><![CDATA[
        <p>Welcome to another episode of the podcast everybody! As we continue our journey into Elixir internals in Season 2, we welcome Sophie DeBenedetto to tell us about the two libraries she and the Flatiron School created! We talk about Encrypt and Railway and a bunch of other great stuff from the world of Elixir and open source and Sophie shares so much about why she is particularly excited about things at the moment. She talks about the maturation of the Elixir community and her first and most important open-source experiences before diving into her hopes for the future of these platforms. We also discuss the ins and out of the two libraries and our guest does a fantastic job of explaining their functions and the reasons they were built. Sophie shares the major challenges that faced her and the team in creating them and a whole lot more, so make sure to tune in today for all this great information!</p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>A brief introduction to Sophie&#39;s career, the Flatiron School and her Elixir work.</li>
<li>Sophie&#39;s first experiences with open source, contributing to the Elixir School. </li>
<li>Flatiron&#39;s support of open source and their attitude towards the growth of engineers. </li>
<li>Why Elixir and Ruby are such important languages to Sophie and Flatiron. </li>
<li>Sophie&#39;s wishes for Elixir and what she wants to see more of in the community. </li>
<li>Introducing Encrypt and Excrypt for Elixir and why Flatiron chose to build them.</li>
<li>The hardest parts of building the library, the challenges of encryption.</li>
<li>Elixir&#39;s built-in option parser; convenience and accessing data easily.</li>
<li>The Railway hex package and what it enables users to do. </li>
<li>Breaking down the functions of RabbitMQ for Erlang. </li>
<li>The two things that Sophie is most excited about in the Elixir space right now!</li>
<li>And much more! </li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>Sophie DeBenedetto — <a href="http://sophiedebenedetto.nyc/" rel="nofollow">http://sophiedebenedetto.nyc/</a><br>
Flatiron School — <a href="http://sophiedebenedetto.nyc/" rel="nofollow">http://sophiedebenedetto.nyc/</a><br>
Elixir School — <a href="https://elixirschool.com/en/" rel="nofollow">https://elixirschool.com/en/</a><br>
Encrypt — <a href="https://github.com/flatiron-labs/encrypt" rel="nofollow">https://github.com/flatiron-labs/encrypt</a><br>
Escript — <a href="https://hexdocs.pm/mix/master/Mix.Tasks.Escript.Build.html" rel="nofollow">https://hexdocs.pm/mix/master/Mix.Tasks.Escript.Build.html</a><br>
Ruby — <a href="https://www.ruby-lang.org/en/" rel="nofollow">https://www.ruby-lang.org/en/</a><br>
Kafka — <a href="https://kafka.apache.org" rel="nofollow">https://kafka.apache.org</a><br>
Ecto — <a href="https://hexdocs.pm/ecto/Ecto.html" rel="nofollow">https://hexdocs.pm/ecto/Ecto.html</a><br>
Erlang — <a href="https://www.erlang.org" rel="nofollow">https://www.erlang.org</a><br>
RabbitMQ — <a href="https://www.rabbitmq.com" rel="nofollow">https://www.rabbitmq.com</a><br>
Phoenix — <a href="https://phoenixframework.org" rel="nofollow">https://phoenixframework.org</a><br>
LiveView — <a href="https://dockyard.com/blog/2018/12/12/phoenix-liveview-interactive-real-time-apps-no-need-to-write-javascript" rel="nofollow">https://dockyard.com/blog/2018/12/12/phoenix-liveview-interactive-real-time-apps-no-need-to-write-javascript</a><br>
Elixir Conf — <a href="https://elixirconf.com/2019" rel="nofollow">https://elixirconf.com/2019</a></p><p>Special Guest: Sophie DeBenedetto.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Welcome to another episode of the podcast everybody! As we continue our journey into Elixir internals in Season 2, we welcome Sophie DeBenedetto to tell us about the two libraries she and the Flatiron School created! We talk about Encrypt and Railway and a bunch of other great stuff from the world of Elixir and open source and Sophie shares so much about why she is particularly excited about things at the moment. She talks about the maturation of the Elixir community and her first and most important open-source experiences before diving into her hopes for the future of these platforms. We also discuss the ins and out of the two libraries and our guest does a fantastic job of explaining their functions and the reasons they were built. Sophie shares the major challenges that faced her and the team in creating them and a whole lot more, so make sure to tune in today for all this great information!</p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>A brief introduction to Sophie&#39;s career, the Flatiron School and her Elixir work.</li>
<li>Sophie&#39;s first experiences with open source, contributing to the Elixir School. </li>
<li>Flatiron&#39;s support of open source and their attitude towards the growth of engineers. </li>
<li>Why Elixir and Ruby are such important languages to Sophie and Flatiron. </li>
<li>Sophie&#39;s wishes for Elixir and what she wants to see more of in the community. </li>
<li>Introducing Encrypt and Excrypt for Elixir and why Flatiron chose to build them.</li>
<li>The hardest parts of building the library, the challenges of encryption.</li>
<li>Elixir&#39;s built-in option parser; convenience and accessing data easily.</li>
<li>The Railway hex package and what it enables users to do. </li>
<li>Breaking down the functions of RabbitMQ for Erlang. </li>
<li>The two things that Sophie is most excited about in the Elixir space right now!</li>
<li>And much more! </li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>Sophie DeBenedetto — <a href="http://sophiedebenedetto.nyc/" rel="nofollow">http://sophiedebenedetto.nyc/</a><br>
Flatiron School — <a href="http://sophiedebenedetto.nyc/" rel="nofollow">http://sophiedebenedetto.nyc/</a><br>
Elixir School — <a href="https://elixirschool.com/en/" rel="nofollow">https://elixirschool.com/en/</a><br>
Encrypt — <a href="https://github.com/flatiron-labs/encrypt" rel="nofollow">https://github.com/flatiron-labs/encrypt</a><br>
Escript — <a href="https://hexdocs.pm/mix/master/Mix.Tasks.Escript.Build.html" rel="nofollow">https://hexdocs.pm/mix/master/Mix.Tasks.Escript.Build.html</a><br>
Ruby — <a href="https://www.ruby-lang.org/en/" rel="nofollow">https://www.ruby-lang.org/en/</a><br>
Kafka — <a href="https://kafka.apache.org" rel="nofollow">https://kafka.apache.org</a><br>
Ecto — <a href="https://hexdocs.pm/ecto/Ecto.html" rel="nofollow">https://hexdocs.pm/ecto/Ecto.html</a><br>
Erlang — <a href="https://www.erlang.org" rel="nofollow">https://www.erlang.org</a><br>
RabbitMQ — <a href="https://www.rabbitmq.com" rel="nofollow">https://www.rabbitmq.com</a><br>
Phoenix — <a href="https://phoenixframework.org" rel="nofollow">https://phoenixframework.org</a><br>
LiveView — <a href="https://dockyard.com/blog/2018/12/12/phoenix-liveview-interactive-real-time-apps-no-need-to-write-javascript" rel="nofollow">https://dockyard.com/blog/2018/12/12/phoenix-liveview-interactive-real-time-apps-no-need-to-write-javascript</a><br>
Elixir Conf — <a href="https://elixirconf.com/2019" rel="nofollow">https://elixirconf.com/2019</a></p><p>Special Guest: Sophie DeBenedetto.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Shanti Chellaram on Pri-Queue and raft_erl – Elixir Internals</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/season-two-chellaram</link>
      <guid isPermaLink="false">ec6a1593-38d7-48b0-8494-9dd83f8f6cff</guid>
      <pubDate>Thu, 05 Sep 2019 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/ec6a1593-38d7-48b0-8494-9dd83f8f6cff.mp3" length="42367214" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>2</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Today on the show we welcome Shanti Chellaram to talk about a couple of Erlang libraries she has created! We hear from her about Pri-Queue and raft_erl, and her motivation behind making them and some of the things we wishes she did differently! Shanti shares some of her background, early coding experiences, affinity for open source and her current work situation. From there we look at Pri-Queue, the problem it addresses and what a priority queue is.</itunes:subtitle>
      <itunes:duration>28:57</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>Today on the show we welcome Shanti Chellaram to talk about a couple of Erlang libraries she has created! We hear from her about Pri-Queue and rafterl, and her motivation behind making them and some of the things we wishes she did differently! Shanti shares some of her background, early coding experiences, affinity for open source and her current work situation. From there we look at Pri-Queue, the problem it addresses and what a priority queue is. A highlight of the show is Shanti giving the best explanation of a bootstrapped skew binomial heap we have heard before explaining some of the main issues she faced in creating Pri-Queue. We then turn to rafterl, how she got started with it and her hopes for its future. Throughout the conversation Shanti shares her philosophy towards open source and coding going forward as well as offering advice for newcomers to Erlang. Make you you join us for this fantastic episode!
Key Points From This Episode:
A little bit about Shanti's background and current employment.
Shanti's early experiences and what got her into open source software. 
Some coding decisions that Shanti would make differently in retrospect. 
The problem that Pri-Queue solves; the dearth of data efficient libraries. 
What is a priority queue? Ordering your data with scores.
Shanti explains a bootstrapped skew binomial heap!
Some of the hurdles that Shanti faced in writing Pri-Queue. 
How Shanti got started on her other library, raft_erl. 
The three Raft protocols and how much of it is implemented in the library. 
Shanti's next goals for raft_erl; bug free and widely used.
The importance of distributed systems and Shanti's philosophy looking to the future.
Advice for someone just starting out in Elixir!
And much more! 
Links Mentioned in Today’s Episode:
SmartLogic — https://www.smartlogic.io/
Shanti Chellaram Linkedin— https://www.linkedin.com/in/shanti-chellaram-495444187
Shanti Chellaram on Twitter — https://twitter.com/theccoder
Shanti Chellaram on github — https://github.com/shantiii
Erlang — https://www.erlang.org/
Elixir — https://elixir-lang.org/
Pri-Queue — https://github.com/okeuday/pqueue
rafterl — https://github.com/shantiii/rafterl
MailChimp — https://mailchimp.com
Teachers Pay Teachers — https://www.teacherspayteachers.com/
Purely Functional Data Structures — https://www.amazon.com/Purely-Functional-Structures-Chris-Okasaki-ebook/dp/B00AKE1V04
Rust — https://www.rust-lang.org/
Raft — https://raft.github.io/
Raspberry Pi — https://www.raspberrypi.org/
ElixirConf — https://elixirconf.com/2019
Partisan — https://partisan.cloud/
 Special Guests: Dan Ivovich and Shanti Chellaram.
</description>
      <itunes:keywords></itunes:keywords>
      <content:encoded><![CDATA[
        <p>Today on the show we welcome Shanti Chellaram to talk about a couple of Erlang libraries she has created! We hear from her about Pri-Queue and raft_erl, and her motivation behind making them and some of the things we wishes she did differently! Shanti shares some of her background, early coding experiences, affinity for open source and her current work situation. From there we look at Pri-Queue, the problem it addresses and what a priority queue is. A highlight of the show is Shanti giving the best explanation of a bootstrapped skew binomial heap we have heard before explaining some of the main issues she faced in creating Pri-Queue. We then turn to raft_erl, how she got started with it and her hopes for its future. Throughout the conversation Shanti shares her philosophy towards open source and coding going forward as well as offering advice for newcomers to Erlang. Make you you join us for this fantastic episode!</p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>A little bit about Shanti&#39;s background and current employment.</li>
<li>Shanti&#39;s early experiences and what got her into open source software. </li>
<li>Some coding decisions that Shanti would make differently in retrospect. </li>
<li>The problem that Pri-Queue solves; the dearth of data efficient libraries. </li>
<li>What is a priority queue? Ordering your data with scores.</li>
<li>Shanti explains a bootstrapped skew binomial heap!</li>
<li>Some of the hurdles that Shanti faced in writing Pri-Queue. </li>
<li>How Shanti got started on her other library, raft_erl. </li>
<li>The three Raft protocols and how much of it is implemented in the library. </li>
<li>Shanti&#39;s next goals for raft_erl; bug free and widely used.</li>
<li>The importance of distributed systems and Shanti&#39;s philosophy looking to the future.</li>
<li>Advice for someone just starting out in Elixir!</li>
<li>And much more! </li>
</ul>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>SmartLogic — <a href="https://www.smartlogic.io/" rel="nofollow">https://www.smartlogic.io/</a><br>
Shanti Chellaram Linkedin— <a href="https://www.linkedin.com/in/shanti-chellaram-495444187" rel="nofollow">https://www.linkedin.com/in/shanti-chellaram-495444187</a><br>
Shanti Chellaram on Twitter — <a href="https://twitter.com/theccoder" rel="nofollow">https://twitter.com/theccoder</a><br>
Shanti Chellaram on github — <a href="https://github.com/shantiii" rel="nofollow">https://github.com/shantiii</a><br>
Erlang — <a href="https://www.erlang.org/" rel="nofollow">https://www.erlang.org/</a><br>
Elixir — <a href="https://elixir-lang.org/" rel="nofollow">https://elixir-lang.org/</a><br>
Pri-Queue — <a href="https://github.com/okeuday/pqueue" rel="nofollow">https://github.com/okeuday/pqueue</a><br>
raft_erl — <a href="https://github.com/shantiii/raft_erl" rel="nofollow">https://github.com/shantiii/raft_erl</a><br>
MailChimp — <a href="https://mailchimp.com" rel="nofollow">https://mailchimp.com</a><br>
Teachers Pay Teachers — <a href="https://www.teacherspayteachers.com/" rel="nofollow">https://www.teacherspayteachers.com/</a><br>
Purely Functional Data Structures — <a href="https://www.amazon.com/Purely-Functional-Structures-Chris-Okasaki-ebook/dp/B00AKE1V04" rel="nofollow">https://www.amazon.com/Purely-Functional-Structures-Chris-Okasaki-ebook/dp/B00AKE1V04</a><br>
Rust — <a href="https://www.rust-lang.org/" rel="nofollow">https://www.rust-lang.org/</a><br>
Raft — <a href="https://raft.github.io/" rel="nofollow">https://raft.github.io/</a><br>
Raspberry Pi — <a href="https://www.raspberrypi.org/" rel="nofollow">https://www.raspberrypi.org/</a><br>
ElixirConf — <a href="https://elixirconf.com/2019" rel="nofollow">https://elixirconf.com/2019</a><br>
Partisan — <a href="https://partisan.cloud/" rel="nofollow">https://partisan.cloud/</a></p><p>Special Guests: Dan Ivovich and Shanti Chellaram.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Today on the show we welcome Shanti Chellaram to talk about a couple of Erlang libraries she has created! We hear from her about Pri-Queue and raft_erl, and her motivation behind making them and some of the things we wishes she did differently! Shanti shares some of her background, early coding experiences, affinity for open source and her current work situation. From there we look at Pri-Queue, the problem it addresses and what a priority queue is. A highlight of the show is Shanti giving the best explanation of a bootstrapped skew binomial heap we have heard before explaining some of the main issues she faced in creating Pri-Queue. We then turn to raft_erl, how she got started with it and her hopes for its future. Throughout the conversation Shanti shares her philosophy towards open source and coding going forward as well as offering advice for newcomers to Erlang. Make you you join us for this fantastic episode!</p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>A little bit about Shanti&#39;s background and current employment.</li>
<li>Shanti&#39;s early experiences and what got her into open source software. </li>
<li>Some coding decisions that Shanti would make differently in retrospect. </li>
<li>The problem that Pri-Queue solves; the dearth of data efficient libraries. </li>
<li>What is a priority queue? Ordering your data with scores.</li>
<li>Shanti explains a bootstrapped skew binomial heap!</li>
<li>Some of the hurdles that Shanti faced in writing Pri-Queue. </li>
<li>How Shanti got started on her other library, raft_erl. </li>
<li>The three Raft protocols and how much of it is implemented in the library. </li>
<li>Shanti&#39;s next goals for raft_erl; bug free and widely used.</li>
<li>The importance of distributed systems and Shanti&#39;s philosophy looking to the future.</li>
<li>Advice for someone just starting out in Elixir!</li>
<li>And much more! </li>
</ul>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>SmartLogic — <a href="https://www.smartlogic.io/" rel="nofollow">https://www.smartlogic.io/</a><br>
Shanti Chellaram Linkedin— <a href="https://www.linkedin.com/in/shanti-chellaram-495444187" rel="nofollow">https://www.linkedin.com/in/shanti-chellaram-495444187</a><br>
Shanti Chellaram on Twitter — <a href="https://twitter.com/theccoder" rel="nofollow">https://twitter.com/theccoder</a><br>
Shanti Chellaram on github — <a href="https://github.com/shantiii" rel="nofollow">https://github.com/shantiii</a><br>
Erlang — <a href="https://www.erlang.org/" rel="nofollow">https://www.erlang.org/</a><br>
Elixir — <a href="https://elixir-lang.org/" rel="nofollow">https://elixir-lang.org/</a><br>
Pri-Queue — <a href="https://github.com/okeuday/pqueue" rel="nofollow">https://github.com/okeuday/pqueue</a><br>
raft_erl — <a href="https://github.com/shantiii/raft_erl" rel="nofollow">https://github.com/shantiii/raft_erl</a><br>
MailChimp — <a href="https://mailchimp.com" rel="nofollow">https://mailchimp.com</a><br>
Teachers Pay Teachers — <a href="https://www.teacherspayteachers.com/" rel="nofollow">https://www.teacherspayteachers.com/</a><br>
Purely Functional Data Structures — <a href="https://www.amazon.com/Purely-Functional-Structures-Chris-Okasaki-ebook/dp/B00AKE1V04" rel="nofollow">https://www.amazon.com/Purely-Functional-Structures-Chris-Okasaki-ebook/dp/B00AKE1V04</a><br>
Rust — <a href="https://www.rust-lang.org/" rel="nofollow">https://www.rust-lang.org/</a><br>
Raft — <a href="https://raft.github.io/" rel="nofollow">https://raft.github.io/</a><br>
Raspberry Pi — <a href="https://www.raspberrypi.org/" rel="nofollow">https://www.raspberrypi.org/</a><br>
ElixirConf — <a href="https://elixirconf.com/2019" rel="nofollow">https://elixirconf.com/2019</a><br>
Partisan — <a href="https://partisan.cloud/" rel="nofollow">https://partisan.cloud/</a></p><p>Special Guests: Dan Ivovich and Shanti Chellaram.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Michał Muskała on Ecto and jason – Elixir Internals</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/season-two-muskala</link>
      <guid isPermaLink="false">d20c39c5-2b6c-44a9-96ff-0dff754dd08f</guid>
      <pubDate>Thu, 29 Aug 2019 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/d20c39c5-2b6c-44a9-96ff-0dff754dd08f.mp3" length="40305170" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>2</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Today on the show we are joined by Michal Muskala, who is currently a freelance software engineer and he is here to talk to us about his work on the Ecto and jason libraries. With Ecto we continue our journey into Elixir and Michal explain how he became involved in the project and the work he did on it. He explains a little of its inner workings, issues and what excited him about it initially. We then turn to jason, a widely popular library that Michal created for parsing JSON. Michal unpacks its particulars, differentiating for us between the driver and adapter and the lessons he learned working on them. The last bit of our conversation is spent talking about open source and Michal's commitment to its philosophy. We discuss making time to work on projects, buy in from employers and and why getting involved can be scary yet is so important! For all this and more, join us for this great episode!</itunes:subtitle>
      <itunes:duration>27:31</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>Today on the show we are joined by Michal Muskala, who is currently a freelance software engineer and he is here to talk to us about his work on the Ecto and jason libraries. With Ecto we continue our journey into Elixir and Michal explain how he became involved in the project and the work he did on it. He explains a little of its inner workings, issues and what excited him about it initially. We then turn to jason, a widely popular library that Michal created for parsing JSON. Michal unpacks its particulars, differentiating for us between the driver and adapter and the lessons he learned working on them. The last bit of our conversation is spent talking about open source and Michal's commitment to its philosophy. We discuss making time to work on projects, buy in from employers and and why getting involved can be scary yet is so important! For all this and more, join us for this great episode!
Key Points From This Episode:
A little bit about Michal's work background and how he got started on Elixir. 
The parts of Ecto that Michal worked on at Google Summer of Code.
Differentiating between the driver and the adapter; communicating with the database.
Structuring the code and what Michal would do differently now. 
Creating jason, the default JSON parser and the impetus behind it. 
Understanding lexing and tokenizing; largely the same thing with different names.
Macros on jason and forcing the VM to use optimizations in particular cases. 
Performance on jason; how Michal achieved the speeds he did.
Michal's path to open source software and what followed his work in MongoDB. 
Finding time to work on open source projects while employed.   
BEAM, alternative implementations and why they are important. 
Michal's call to action for our listeners! 
And much more! 
Links Mentioned in Today’s Episode:
SmartLogic — https://www.smartlogic.io/
Elixir — https://elixir-lang.org/
Michal Muskala — https://michal.muskala.eu/
Michal Muskala on Twitter — https://twitter.com/michalmuskala?lang=en
Ecto — https://hexdocs.pm/ecto/Ecto.html
jason — https://github.com/michalmuskala/jason 
Google Summer of Code — https://summerofcode.withgoogle.com/
MondoDB — https://www.mongodb.com/
Erlang — https://www.erlang.org/
Binary Optimization in Erlang Documentation — https://rhye.org/post/erlang-binary-matching-performance/ (Please verify link)
BEAM  — https://blog.stenmans.org/theBeamBook/
Erjang — https://jaxenter.com/introducing-erjang-erlang-for-the-jvm-108005.html
Atom VM — http://atomvm.sourceforge.net/ Special Guest: Michał Muskała.
</description>
      <itunes:keywords>elixir, erlang, ecto, jason</itunes:keywords>
      <content:encoded><![CDATA[
        <p>Today on the show we are joined by Michal Muskala, who is currently a freelance software engineer and he is here to talk to us about his work on the Ecto and jason libraries. With Ecto we continue our journey into Elixir and Michal explain how he became involved in the project and the work he did on it. He explains a little of its inner workings, issues and what excited him about it initially. We then turn to jason, a widely popular library that Michal created for parsing JSON. Michal unpacks its particulars, differentiating for us between the driver and adapter and the lessons he learned working on them. The last bit of our conversation is spent talking about open source and Michal&#39;s commitment to its philosophy. We discuss making time to work on projects, buy in from employers and and why getting involved can be scary yet is so important! For all this and more, join us for this great episode!</p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>A little bit about Michal&#39;s work background and how he got started on Elixir. </li>
<li>The parts of Ecto that Michal worked on at Google Summer of Code.</li>
<li>Differentiating between the driver and the adapter; communicating with the database.</li>
<li>Structuring the code and what Michal would do differently now. </li>
<li>Creating jason, the default JSON parser and the impetus behind it. </li>
<li>Understanding lexing and tokenizing; largely the same thing with different names.</li>
<li>Macros on jason and forcing the VM to use optimizations in particular cases. </li>
<li>Performance on jason; how Michal achieved the speeds he did.</li>
<li>Michal&#39;s path to open source software and what followed his work in MongoDB. </li>
<li>Finding time to work on open source projects while employed.<br></li>
<li>BEAM, alternative implementations and why they are important. </li>
<li>Michal&#39;s call to action for our listeners! </li>
<li>And much more! </li>
</ul>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>SmartLogic — <a href="https://www.smartlogic.io/" rel="nofollow">https://www.smartlogic.io/</a><br>
Elixir — <a href="https://elixir-lang.org/" rel="nofollow">https://elixir-lang.org/</a><br>
Michal Muskala — <a href="https://michal.muskala.eu/" rel="nofollow">https://michal.muskala.eu/</a><br>
Michal Muskala on Twitter — <a href="https://twitter.com/michalmuskala?lang=en" rel="nofollow">https://twitter.com/michalmuskala?lang=en</a><br>
Ecto — <a href="https://hexdocs.pm/ecto/Ecto.html" rel="nofollow">https://hexdocs.pm/ecto/Ecto.html</a><br>
jason — <a href="https://github.com/michalmuskala/jason" rel="nofollow">https://github.com/michalmuskala/jason</a> <br>
Google Summer of Code — <a href="https://summerofcode.withgoogle.com/" rel="nofollow">https://summerofcode.withgoogle.com/</a><br>
MondoDB — <a href="https://www.mongodb.com/" rel="nofollow">https://www.mongodb.com/</a><br>
Erlang — <a href="https://www.erlang.org/" rel="nofollow">https://www.erlang.org/</a><br>
Binary Optimization in Erlang Documentation — <a href="https://rhye.org/post/erlang-binary-matching-performance/" rel="nofollow">https://rhye.org/post/erlang-binary-matching-performance/</a> (Please verify link)<br>
BEAM  — <a href="https://blog.stenmans.org/theBeamBook/" rel="nofollow">https://blog.stenmans.org/theBeamBook/</a><br>
Erjang — <a href="https://jaxenter.com/introducing-erjang-erlang-for-the-jvm-108005.html" rel="nofollow">https://jaxenter.com/introducing-erjang-erlang-for-the-jvm-108005.html</a><br>
Atom VM — <a href="http://atomvm.sourceforge.net/" rel="nofollow">http://atomvm.sourceforge.net/</a></p><p>Special Guest: Michał Muskała.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Today on the show we are joined by Michal Muskala, who is currently a freelance software engineer and he is here to talk to us about his work on the Ecto and jason libraries. With Ecto we continue our journey into Elixir and Michal explain how he became involved in the project and the work he did on it. He explains a little of its inner workings, issues and what excited him about it initially. We then turn to jason, a widely popular library that Michal created for parsing JSON. Michal unpacks its particulars, differentiating for us between the driver and adapter and the lessons he learned working on them. The last bit of our conversation is spent talking about open source and Michal&#39;s commitment to its philosophy. We discuss making time to work on projects, buy in from employers and and why getting involved can be scary yet is so important! For all this and more, join us for this great episode!</p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>A little bit about Michal&#39;s work background and how he got started on Elixir. </li>
<li>The parts of Ecto that Michal worked on at Google Summer of Code.</li>
<li>Differentiating between the driver and the adapter; communicating with the database.</li>
<li>Structuring the code and what Michal would do differently now. </li>
<li>Creating jason, the default JSON parser and the impetus behind it. </li>
<li>Understanding lexing and tokenizing; largely the same thing with different names.</li>
<li>Macros on jason and forcing the VM to use optimizations in particular cases. </li>
<li>Performance on jason; how Michal achieved the speeds he did.</li>
<li>Michal&#39;s path to open source software and what followed his work in MongoDB. </li>
<li>Finding time to work on open source projects while employed.<br></li>
<li>BEAM, alternative implementations and why they are important. </li>
<li>Michal&#39;s call to action for our listeners! </li>
<li>And much more! </li>
</ul>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>SmartLogic — <a href="https://www.smartlogic.io/" rel="nofollow">https://www.smartlogic.io/</a><br>
Elixir — <a href="https://elixir-lang.org/" rel="nofollow">https://elixir-lang.org/</a><br>
Michal Muskala — <a href="https://michal.muskala.eu/" rel="nofollow">https://michal.muskala.eu/</a><br>
Michal Muskala on Twitter — <a href="https://twitter.com/michalmuskala?lang=en" rel="nofollow">https://twitter.com/michalmuskala?lang=en</a><br>
Ecto — <a href="https://hexdocs.pm/ecto/Ecto.html" rel="nofollow">https://hexdocs.pm/ecto/Ecto.html</a><br>
jason — <a href="https://github.com/michalmuskala/jason" rel="nofollow">https://github.com/michalmuskala/jason</a> <br>
Google Summer of Code — <a href="https://summerofcode.withgoogle.com/" rel="nofollow">https://summerofcode.withgoogle.com/</a><br>
MondoDB — <a href="https://www.mongodb.com/" rel="nofollow">https://www.mongodb.com/</a><br>
Erlang — <a href="https://www.erlang.org/" rel="nofollow">https://www.erlang.org/</a><br>
Binary Optimization in Erlang Documentation — <a href="https://rhye.org/post/erlang-binary-matching-performance/" rel="nofollow">https://rhye.org/post/erlang-binary-matching-performance/</a> (Please verify link)<br>
BEAM  — <a href="https://blog.stenmans.org/theBeamBook/" rel="nofollow">https://blog.stenmans.org/theBeamBook/</a><br>
Erjang — <a href="https://jaxenter.com/introducing-erjang-erlang-for-the-jvm-108005.html" rel="nofollow">https://jaxenter.com/introducing-erjang-erlang-for-the-jvm-108005.html</a><br>
Atom VM — <a href="http://atomvm.sourceforge.net/" rel="nofollow">http://atomvm.sourceforge.net/</a></p><p>Special Guest: Michał Muskała.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Todd Resudek on Hex – Elixir Internals</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/season-two-resudek</link>
      <guid isPermaLink="false">2ebfdc2e-d967-4324-bcbe-de67bccb57e6</guid>
      <pubDate>Thu, 22 Aug 2019 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/2ebfdc2e-d967-4324-bcbe-de67bccb57e6.mp3" length="33324417" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>2</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Today on the show we get stuck into the inner workings of Hex 1.0 and are happy to be joined by returning guest, Todd Resudek. As you might already know, Todd is the Senior Software Engineer at Weedmaps, a regular speaker on the conference scene, and one of the three core team members at Hex. With the total downloads sitting at 641 million, the Hex community is growing rapidly and shows no signs of slowing down. In this episode, we discover what makes the Hex packages some of the most popular packages out there today, as well as the new and improved features currently in the pipeline. In addition, we find out how Todd first got involved with the Hex team and how the team makes decisions and problem solves.</itunes:subtitle>
      <itunes:duration>34:00</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>Today on the show we get stuck into the inner workings of Hex 1.0 and are happy to be joined by returning guest, Todd Resudek. As you might already know, Todd is the Senior Software Engineer at Weedmaps, a regular speaker on the conference scene, and one of the three core team members at Hex. With the total downloads sitting at 641 million, the Hex community is growing rapidly and shows no signs of slowing down. In this episode, we discover what makes the Hex packages some of the most popular packages out there today, as well as the new and improved features currently in the pipeline. In addition, we find out how Todd first got involved with the Hex team and how the team makes decisions and problem solves. 
Key Points From This Episode:
Transferring a new library into an old ecosystem.
Todd’s challenges learning Elixir and Hex.
Learn more about the functions of Alphabetify.
An introduction to the uses of ETS storage.
Contributing to Open Source while working at Weedmaps.
Discover how Todd got involved with the Hex team.
Learn more about the different faces of Hex.
Find out how decisions are made within the Hex team.
Just how busy is the Hex community right now?
The top five underground features of Hex.
Discover the latest features now available on Hex.
Find out what new Hex features are in the pipeline.
And much more!
Links Mentioned in Today’s Episode:
Todd Resudek — https://www.linkedin.com/in/toddresudek/
Weedmaps — https://weedmaps.com/
Hex — https://hex.pm/
rebar3 — https://www.rebar3.org/
Alphabetify — https://hex.pm/packages/alphabetify
ETS — https://elixirschool.com/en/lessons/specifics/ets/
Elixir Mix Podcast — https://devchat.tv/elixir-mix/
Voitek — https://voitekk.com/
Erlef Erlang Ecosystem Foundation — https://erlef.org/
Crates — https://crates.io/crates/hex
Smart Software with SmartLogic — https://podcast.smartlogic.io/
Nerves MeetUp on Twitter — https://twitter.com/nervesmeetup
The Big Elixir — https://www.thebigelixir.com/
 Special Guest: Todd Resudek.
</description>
      <itunes:keywords></itunes:keywords>
      <content:encoded><![CDATA[
        <p>Today on the show we get stuck into the inner workings of Hex 1.0 and are happy to be joined by returning guest, Todd Resudek. As you might already know, Todd is the Senior Software Engineer at Weedmaps, a regular speaker on the conference scene, and one of the three core team members at Hex. With the total downloads sitting at 641 million, the Hex community is growing rapidly and shows no signs of slowing down. In this episode, we discover what makes the Hex packages some of the most popular packages out there today, as well as the new and improved features currently in the pipeline. In addition, we find out how Todd first got involved with the Hex team and how the team makes decisions and problem solves. </p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>Transferring a new library into an old ecosystem.</li>
<li>Todd’s challenges learning Elixir and Hex.</li>
<li>Learn more about the functions of Alphabetify.</li>
<li>An introduction to the uses of ETS storage.</li>
<li>Contributing to Open Source while working at Weedmaps.</li>
<li>Discover how Todd got involved with the Hex team.</li>
<li>Learn more about the different faces of Hex.</li>
<li>Find out how decisions are made within the Hex team.</li>
<li>Just how busy is the Hex community right now?</li>
<li>The top five underground features of Hex.</li>
<li>Discover the latest features now available on Hex.</li>
<li>Find out what new Hex features are in the pipeline.</li>
<li>And much more!</li>
</ul>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>Todd Resudek — <a href="https://www.linkedin.com/in/toddresudek/" rel="nofollow">https://www.linkedin.com/in/toddresudek/</a><br>
Weedmaps — <a href="https://weedmaps.com/" rel="nofollow">https://weedmaps.com/</a><br>
Hex — <a href="https://hex.pm/" rel="nofollow">https://hex.pm/</a><br>
rebar3 — <a href="https://www.rebar3.org/" rel="nofollow">https://www.rebar3.org/</a><br>
Alphabetify — <a href="https://hex.pm/packages/alphabetify" rel="nofollow">https://hex.pm/packages/alphabetify</a><br>
ETS — <a href="https://elixirschool.com/en/lessons/specifics/ets/" rel="nofollow">https://elixirschool.com/en/lessons/specifics/ets/</a><br>
Elixir Mix Podcast — <a href="https://devchat.tv/elixir-mix/" rel="nofollow">https://devchat.tv/elixir-mix/</a><br>
Voitek — <a href="https://voitekk.com/" rel="nofollow">https://voitekk.com/</a><br>
Erlef Erlang Ecosystem Foundation — <a href="https://erlef.org/" rel="nofollow">https://erlef.org/</a><br>
Crates — <a href="https://crates.io/crates/hex" rel="nofollow">https://crates.io/crates/hex</a><br>
Smart Software with SmartLogic — <a href="https://podcast.smartlogic.io/" rel="nofollow">https://podcast.smartlogic.io/</a><br>
Nerves MeetUp on Twitter — <a href="https://twitter.com/nervesmeetup" rel="nofollow">https://twitter.com/nervesmeetup</a><br>
The Big Elixir — <a href="https://www.thebigelixir.com/" rel="nofollow">https://www.thebigelixir.com/</a></p><p>Special Guest: Todd Resudek.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Today on the show we get stuck into the inner workings of Hex 1.0 and are happy to be joined by returning guest, Todd Resudek. As you might already know, Todd is the Senior Software Engineer at Weedmaps, a regular speaker on the conference scene, and one of the three core team members at Hex. With the total downloads sitting at 641 million, the Hex community is growing rapidly and shows no signs of slowing down. In this episode, we discover what makes the Hex packages some of the most popular packages out there today, as well as the new and improved features currently in the pipeline. In addition, we find out how Todd first got involved with the Hex team and how the team makes decisions and problem solves. </p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>Transferring a new library into an old ecosystem.</li>
<li>Todd’s challenges learning Elixir and Hex.</li>
<li>Learn more about the functions of Alphabetify.</li>
<li>An introduction to the uses of ETS storage.</li>
<li>Contributing to Open Source while working at Weedmaps.</li>
<li>Discover how Todd got involved with the Hex team.</li>
<li>Learn more about the different faces of Hex.</li>
<li>Find out how decisions are made within the Hex team.</li>
<li>Just how busy is the Hex community right now?</li>
<li>The top five underground features of Hex.</li>
<li>Discover the latest features now available on Hex.</li>
<li>Find out what new Hex features are in the pipeline.</li>
<li>And much more!</li>
</ul>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>Todd Resudek — <a href="https://www.linkedin.com/in/toddresudek/" rel="nofollow">https://www.linkedin.com/in/toddresudek/</a><br>
Weedmaps — <a href="https://weedmaps.com/" rel="nofollow">https://weedmaps.com/</a><br>
Hex — <a href="https://hex.pm/" rel="nofollow">https://hex.pm/</a><br>
rebar3 — <a href="https://www.rebar3.org/" rel="nofollow">https://www.rebar3.org/</a><br>
Alphabetify — <a href="https://hex.pm/packages/alphabetify" rel="nofollow">https://hex.pm/packages/alphabetify</a><br>
ETS — <a href="https://elixirschool.com/en/lessons/specifics/ets/" rel="nofollow">https://elixirschool.com/en/lessons/specifics/ets/</a><br>
Elixir Mix Podcast — <a href="https://devchat.tv/elixir-mix/" rel="nofollow">https://devchat.tv/elixir-mix/</a><br>
Voitek — <a href="https://voitekk.com/" rel="nofollow">https://voitekk.com/</a><br>
Erlef Erlang Ecosystem Foundation — <a href="https://erlef.org/" rel="nofollow">https://erlef.org/</a><br>
Crates — <a href="https://crates.io/crates/hex" rel="nofollow">https://crates.io/crates/hex</a><br>
Smart Software with SmartLogic — <a href="https://podcast.smartlogic.io/" rel="nofollow">https://podcast.smartlogic.io/</a><br>
Nerves MeetUp on Twitter — <a href="https://twitter.com/nervesmeetup" rel="nofollow">https://twitter.com/nervesmeetup</a><br>
The Big Elixir — <a href="https://www.thebigelixir.com/" rel="nofollow">https://www.thebigelixir.com/</a></p><p>Special Guest: Todd Resudek.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Chris Keathley on Wallaby and Raft – Elixir Internals</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/season-two-keathley</link>
      <guid isPermaLink="false">37e3efb0-85b7-4dd9-bbf9-a997b01c6437</guid>
      <pubDate>Thu, 15 Aug 2019 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/37e3efb0-85b7-4dd9-bbf9-a997b01c6437.mp3" length="26369274" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>2</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>In this episode of the podcast we are joined by Chris Keathley to continue our exploration of Elixir internals as he tells us about two very popular libraries that he developed, Wallaby and Raft. We start off with some background and his initial experiences with Elixir and open source projects before diving into Wallaby and some of the biggest lessons that Chris learned during and after his work on the library.</itunes:subtitle>
      <itunes:duration>26:46</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>In this episode of the podcast we are joined by Chris Keathley to continue our exploration of Elixir internals as he tells us about two very popular libraries that he developed, Wallaby and Raft. We start off with some background and his initial experiences with Elixir and open source projects before diving into Wallaby and some of the biggest lessons that Chris learned during and after his work on the library. 
Chris does a great job of explaining concurrent tests and the Sandbox and some of the reasons he has pretty much stopped working on the front end of projects. From there we move onto another one of Chris' exciting projects, Raft! In order to introduce the library, Chris explains more about consensus algorithms, Leslie Lamport and his groundbreaking work on Paxos. Raft is, in some ways, a simplified, more accessible version of Paxos for Elixir and Chris goes on to give a brief rundown of its inner workings. For this great conversation with a great guest, join us today!
Key Points From This Episode:
Chris' background, history with Elixir and his current employment. 
How Chris got started with open source work. 
Why Chris has moved away from front end work in the last while. 
The major lessons Chris learned while building Wallaby.
How the concurrent tests work on Wallaby and the Sandbox. 
Why Chris is still excited about Raft, even though he hasn't touched it in a while.  
Explaining Raft, consensus algorithms and Paxos. 
How the Raft library actually works; building Raft systems and processes.  
Where to find and connect with Chris online!
And much more! 
Links Mentioned in Today’s Episode:
SmartLogic — https://www.smartlogic.io/
Chris Keathley — https://keathley.io/
Chris Keathley on github — https://github.com/keathley
Bleacher Report — https://bleacherreport.com/
Wallaby — https://hexdocs.pm/wallaby/Wallaby.html
Raft — https://raft.github.io/
Erlang — https://www.erlang.org/
Slack — https://slack.com/
Leslie Lamport — http://www.lamport.org/
Paxos Made Live — https://blog.acolyer.org/2015/03/05/paxos-made-live/
Elixir Outlaws Podcast — https://elixiroutlaws.com/ Special Guest: Chris Keathley.
</description>
      <itunes:keywords></itunes:keywords>
      <content:encoded><![CDATA[
        <p>In this episode of the podcast we are joined by Chris Keathley to continue our exploration of Elixir internals as he tells us about two very popular libraries that he developed, Wallaby and Raft. We start off with some background and his initial experiences with Elixir and open source projects before diving into Wallaby and some of the biggest lessons that Chris learned during and after his work on the library. </p>

<p>Chris does a great job of explaining concurrent tests and the Sandbox and some of the reasons he has pretty much stopped working on the front end of projects. From there we move onto another one of Chris&#39; exciting projects, Raft! In order to introduce the library, Chris explains more about consensus algorithms, Leslie Lamport and his groundbreaking work on Paxos. Raft is, in some ways, a simplified, more accessible version of Paxos for Elixir and Chris goes on to give a brief rundown of its inner workings. For this great conversation with a great guest, join us today!</p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>Chris&#39; background, history with Elixir and his current employment. </li>
<li>How Chris got started with open source work. </li>
<li>Why Chris has moved away from front end work in the last while. </li>
<li>The major lessons Chris learned while building Wallaby.</li>
<li>How the concurrent tests work on Wallaby and the Sandbox. </li>
<li>Why Chris is still excited about Raft, even though he hasn&#39;t touched it in a while.<br></li>
<li>Explaining Raft, consensus algorithms and Paxos. </li>
<li>How the Raft library actually works; building Raft systems and processes.<br></li>
<li>Where to find and connect with Chris online!</li>
<li>And much more! </li>
</ul>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>SmartLogic — <a href="https://www.smartlogic.io/" rel="nofollow">https://www.smartlogic.io/</a><br>
Chris Keathley — <a href="https://keathley.io/" rel="nofollow">https://keathley.io/</a><br>
Chris Keathley on github — <a href="https://github.com/keathley" rel="nofollow">https://github.com/keathley</a><br>
Bleacher Report — <a href="https://bleacherreport.com/" rel="nofollow">https://bleacherreport.com/</a><br>
Wallaby — <a href="https://hexdocs.pm/wallaby/Wallaby.html" rel="nofollow">https://hexdocs.pm/wallaby/Wallaby.html</a><br>
Raft — <a href="https://raft.github.io/" rel="nofollow">https://raft.github.io/</a><br>
Erlang — <a href="https://www.erlang.org/" rel="nofollow">https://www.erlang.org/</a><br>
Slack — <a href="https://slack.com/" rel="nofollow">https://slack.com/</a><br>
Leslie Lamport — <a href="http://www.lamport.org/" rel="nofollow">http://www.lamport.org/</a><br>
Paxos Made Live — <a href="https://blog.acolyer.org/2015/03/05/paxos-made-live/" rel="nofollow">https://blog.acolyer.org/2015/03/05/paxos-made-live/</a><br>
Elixir Outlaws Podcast — <a href="https://elixiroutlaws.com/" rel="nofollow">https://elixiroutlaws.com/</a></p><p>Special Guest: Chris Keathley.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>In this episode of the podcast we are joined by Chris Keathley to continue our exploration of Elixir internals as he tells us about two very popular libraries that he developed, Wallaby and Raft. We start off with some background and his initial experiences with Elixir and open source projects before diving into Wallaby and some of the biggest lessons that Chris learned during and after his work on the library. </p>

<p>Chris does a great job of explaining concurrent tests and the Sandbox and some of the reasons he has pretty much stopped working on the front end of projects. From there we move onto another one of Chris&#39; exciting projects, Raft! In order to introduce the library, Chris explains more about consensus algorithms, Leslie Lamport and his groundbreaking work on Paxos. Raft is, in some ways, a simplified, more accessible version of Paxos for Elixir and Chris goes on to give a brief rundown of its inner workings. For this great conversation with a great guest, join us today!</p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>Chris&#39; background, history with Elixir and his current employment. </li>
<li>How Chris got started with open source work. </li>
<li>Why Chris has moved away from front end work in the last while. </li>
<li>The major lessons Chris learned while building Wallaby.</li>
<li>How the concurrent tests work on Wallaby and the Sandbox. </li>
<li>Why Chris is still excited about Raft, even though he hasn&#39;t touched it in a while.<br></li>
<li>Explaining Raft, consensus algorithms and Paxos. </li>
<li>How the Raft library actually works; building Raft systems and processes.<br></li>
<li>Where to find and connect with Chris online!</li>
<li>And much more! </li>
</ul>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>SmartLogic — <a href="https://www.smartlogic.io/" rel="nofollow">https://www.smartlogic.io/</a><br>
Chris Keathley — <a href="https://keathley.io/" rel="nofollow">https://keathley.io/</a><br>
Chris Keathley on github — <a href="https://github.com/keathley" rel="nofollow">https://github.com/keathley</a><br>
Bleacher Report — <a href="https://bleacherreport.com/" rel="nofollow">https://bleacherreport.com/</a><br>
Wallaby — <a href="https://hexdocs.pm/wallaby/Wallaby.html" rel="nofollow">https://hexdocs.pm/wallaby/Wallaby.html</a><br>
Raft — <a href="https://raft.github.io/" rel="nofollow">https://raft.github.io/</a><br>
Erlang — <a href="https://www.erlang.org/" rel="nofollow">https://www.erlang.org/</a><br>
Slack — <a href="https://slack.com/" rel="nofollow">https://slack.com/</a><br>
Leslie Lamport — <a href="http://www.lamport.org/" rel="nofollow">http://www.lamport.org/</a><br>
Paxos Made Live — <a href="https://blog.acolyer.org/2015/03/05/paxos-made-live/" rel="nofollow">https://blog.acolyer.org/2015/03/05/paxos-made-live/</a><br>
Elixir Outlaws Podcast — <a href="https://elixiroutlaws.com/" rel="nofollow">https://elixiroutlaws.com/</a></p><p>Special Guest: Chris Keathley.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>René Föhring on Credo – Elixir Internals</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/season-two-fohring</link>
      <guid isPermaLink="false">9532d3dd-1d07-4ac9-b4c8-3f1580deff11</guid>
      <pubDate>Thu, 08 Aug 2019 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/9532d3dd-1d07-4ac9-b4c8-3f1580deff11.mp3" length="29091995" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>2</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Welcome back to the SmartLogic Podcast where we talk about the latest developments and best practices in the web and mobile software industry. In continuing with our theme of Elixir Internals, we’re having a conversation about the inner workings of one of the most popular Elixir libraries, Credo, and we are joined by the author René Föhring. René shares the story of how he was introduced to Elixir while doing his PhD and looking for a new programming language and then shares the philosophy and inspiration Credo was developed on.</itunes:subtitle>
      <itunes:duration>29:36</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>Welcome back to the SmartLogic Podcast where we talk about the latest developments and best practices in the web and mobile software industry. In continuing with our theme of Elixir Internals, we’re having a conversation about the inner workings of one of the most popular Elixir libraries, Credo, and we are joined by the author René Föhring. 
René shares the story of how he was introduced to Elixir while doing his PhD and looking for a new programming language and then shares the philosophy and inspiration Credo was developed on. Wanting Credo to be a less rule-based, authoritative code analysis tool and more user friendly, René focused on creating it to act as a type of digital mentor to the many developers out there who do not have a human mentor. He also shares about some of the launching hiccups, what he would have done differently had he been given another opportunity and some of the most important lessons that he has learned working in the open source community. Be sure to join us for all the inside info! 
Key Points from This Episode:
More about René’s job as head of product development at 5 Minds and what they do. 
What he does in his free time: open source maintenance and conference speaking. 
How he got started with Elixir and wanting to learn a new programming language.
What Credo is all about, why you’d want to use it and what makes it different.  
The inspiration behind writing Credo and wanting a more positive, less dogmatic tool.  
Starting off building on Dogma but then pivoting and going in an independent direction. 
The hiccups René experienced when first releasing Credo and what he’d do differently. 
The different checks in Credo and how they function and respond to issues. 
How Elixir 1.6 impacted the development of Credo.  
What’s new with the Credo 1.1 release?
René’s experience working with open source and the first library he contributed to.  
Important lessons he has learned by being part of the open source community. 
And much more! 
Links Mentioned in Today’s Episode:
Elixir — https://elixir-lang.org/
Credo — http://credo-ci.org/
René Föhring on Twitter — https://twitter.com/rrrene?lang=en
5 Minds IT – Solutions — https://www.5minds.de/
GitHub — https://github.com/
Ruby — https://www.ruby-lang.org/en/
Go — https://golang.org/
Cplusplus — http://www.cplusplus.com/
StyleCop — https://github.com/StyleCop/StyleCop
Dogma — https://github.com/lpil/dogma
Hex — https://hex.pm/
Learn more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) Special Guest: René Föhring.
</description>
      <itunes:keywords>elixir, credo</itunes:keywords>
      <content:encoded><![CDATA[
        <p>Welcome back to the SmartLogic Podcast where we talk about the latest developments and best practices in the web and mobile software industry. In continuing with our theme of Elixir Internals, we’re having a conversation about the inner workings of one of the most popular Elixir libraries, Credo, and we are joined by the author René Föhring. </p>

<p>René shares the story of how he was introduced to Elixir while doing his PhD and looking for a new programming language and then shares the philosophy and inspiration Credo was developed on. Wanting Credo to be a less rule-based, authoritative code analysis tool and more user friendly, René focused on creating it to act as a type of digital mentor to the many developers out there who do not have a human mentor. He also shares about some of the launching hiccups, what he would have done differently had he been given another opportunity and some of the most important lessons that he has learned working in the open source community. Be sure to join us for all the inside info! </p>

<p><strong>Key Points from This Episode:</strong></p>

<ul>
<li>More about René’s job as head of product development at 5 Minds and what they do. </li>
<li>What he does in his free time: open source maintenance and conference speaking. </li>
<li>How he got started with Elixir and wanting to learn a new programming language.</li>
<li>What Credo is all about, why you’d want to use it and what makes it different.<br></li>
<li>The inspiration behind writing Credo and wanting a more positive, less dogmatic tool.<br></li>
<li>Starting off building on Dogma but then pivoting and going in an independent direction. </li>
<li>The hiccups René experienced when first releasing Credo and what he’d do differently. </li>
<li>The different checks in Credo and how they function and respond to issues. </li>
<li>How Elixir 1.6 impacted the development of Credo.<br></li>
<li>What’s new with the Credo 1.1 release?</li>
<li>René’s experience working with open source and the first library he contributed to.<br></li>
<li>Important lessons he has learned by being part of the open source community. </li>
<li>And much more! </li>
</ul>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>Elixir — <a href="https://elixir-lang.org/" rel="nofollow">https://elixir-lang.org/</a><br>
Credo — <a href="http://credo-ci.org/" rel="nofollow">http://credo-ci.org/</a><br>
René Föhring on Twitter — <a href="https://twitter.com/rrrene?lang=en" rel="nofollow">https://twitter.com/rrrene?lang=en</a><br>
5 Minds IT – Solutions — <a href="https://www.5minds.de/" rel="nofollow">https://www.5minds.de/</a><br>
GitHub — <a href="https://github.com/" rel="nofollow">https://github.com/</a><br>
Ruby — <a href="https://www.ruby-lang.org/en/" rel="nofollow">https://www.ruby-lang.org/en/</a><br>
Go — <a href="https://golang.org/" rel="nofollow">https://golang.org/</a><br>
Cplusplus — <a href="http://www.cplusplus.com/" rel="nofollow">http://www.cplusplus.com/</a><br>
StyleCop — <a href="https://github.com/StyleCop/StyleCop" rel="nofollow">https://github.com/StyleCop/StyleCop</a><br>
Dogma — <a href="https://github.com/lpil/dogma" rel="nofollow">https://github.com/lpil/dogma</a><br>
Hex — <a href="https://hex.pm/" rel="nofollow">https://hex.pm/</a></p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: René Föhring.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Welcome back to the SmartLogic Podcast where we talk about the latest developments and best practices in the web and mobile software industry. In continuing with our theme of Elixir Internals, we’re having a conversation about the inner workings of one of the most popular Elixir libraries, Credo, and we are joined by the author René Föhring. </p>

<p>René shares the story of how he was introduced to Elixir while doing his PhD and looking for a new programming language and then shares the philosophy and inspiration Credo was developed on. Wanting Credo to be a less rule-based, authoritative code analysis tool and more user friendly, René focused on creating it to act as a type of digital mentor to the many developers out there who do not have a human mentor. He also shares about some of the launching hiccups, what he would have done differently had he been given another opportunity and some of the most important lessons that he has learned working in the open source community. Be sure to join us for all the inside info! </p>

<p><strong>Key Points from This Episode:</strong></p>

<ul>
<li>More about René’s job as head of product development at 5 Minds and what they do. </li>
<li>What he does in his free time: open source maintenance and conference speaking. </li>
<li>How he got started with Elixir and wanting to learn a new programming language.</li>
<li>What Credo is all about, why you’d want to use it and what makes it different.<br></li>
<li>The inspiration behind writing Credo and wanting a more positive, less dogmatic tool.<br></li>
<li>Starting off building on Dogma but then pivoting and going in an independent direction. </li>
<li>The hiccups René experienced when first releasing Credo and what he’d do differently. </li>
<li>The different checks in Credo and how they function and respond to issues. </li>
<li>How Elixir 1.6 impacted the development of Credo.<br></li>
<li>What’s new with the Credo 1.1 release?</li>
<li>René’s experience working with open source and the first library he contributed to.<br></li>
<li>Important lessons he has learned by being part of the open source community. </li>
<li>And much more! </li>
</ul>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>Elixir — <a href="https://elixir-lang.org/" rel="nofollow">https://elixir-lang.org/</a><br>
Credo — <a href="http://credo-ci.org/" rel="nofollow">http://credo-ci.org/</a><br>
René Föhring on Twitter — <a href="https://twitter.com/rrrene?lang=en" rel="nofollow">https://twitter.com/rrrene?lang=en</a><br>
5 Minds IT – Solutions — <a href="https://www.5minds.de/" rel="nofollow">https://www.5minds.de/</a><br>
GitHub — <a href="https://github.com/" rel="nofollow">https://github.com/</a><br>
Ruby — <a href="https://www.ruby-lang.org/en/" rel="nofollow">https://www.ruby-lang.org/en/</a><br>
Go — <a href="https://golang.org/" rel="nofollow">https://golang.org/</a><br>
Cplusplus — <a href="http://www.cplusplus.com/" rel="nofollow">http://www.cplusplus.com/</a><br>
StyleCop — <a href="https://github.com/StyleCop/StyleCop" rel="nofollow">https://github.com/StyleCop/StyleCop</a><br>
Dogma — <a href="https://github.com/lpil/dogma" rel="nofollow">https://github.com/lpil/dogma</a><br>
Hex — <a href="https://hex.pm/" rel="nofollow">https://hex.pm/</a></p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: René Föhring.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Meryl Dakin on Token Alchemist – Elixir Internals</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/season-two-dakin</link>
      <guid isPermaLink="false">3050865c-0418-42d6-ade9-9605af11fee6</guid>
      <pubDate>Thu, 01 Aug 2019 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/3050865c-0418-42d6-ade9-9605af11fee6.mp3" length="26834266" type="audio/mpeg"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>2</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Today on the show we continue our series on the inner workings of several different Elixir libraries and are happy to be joined by Meryl Dakin, Software Engineer at the Flatiron School and author of Token Alchemist. In this episode, we discover how Meryl got started with Elixir and what the process was like for her transitioning from Ruby to Elixir. We learn more about the internal functions of Token Alchemist within the school context and discuss the unique opportunities Meryl has discovered in Elixir, as well as the trickier language features that programmers are likely to experience in their learning process. Meryl also shares the challenges that Token Alchemist attempts to overcome – delving deeper into LTI, the Learn.co platform, OAuth and JSON. For all this and more, be sure to click play!</itunes:subtitle>
      <itunes:duration>27:31</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>Today on the show we continue our series on the inner workings of several different Elixir libraries and are happy to be joined by Meryl Dakin, Software Engineer at the Flatiron School and author of Token Alchemist. In this episode, we discover how Meryl got started with Elixir and what the process was like for her transitioning from Ruby to Elixir. We learn more about the internal functions of Token Alchemist within the school context and discuss the unique opportunities Meryl has discovered in Elixir, as well as the trickier language features that programmers are likely to experience in their learning process. Meryl also shares the challenges that Token Alchemist attempts to overcome – delving deeper into LTI, the Learn.co platform, OAuth and JSON. For all this and more, be sure to click play!
Key Points From This Episode:
Discover why Meryl first got started with Elixir.
Learn more about the Flatiron Bootcamp for coders.
Meryl’s experience in transitioning from Ruby to Elixir.
The opportunities for concurrency and fault tolerance in Elixir.
Discover the top three tricky language features in Elixir.
The benefits of going back to the basics of Elixir.
Find out the problems that Token Alchemist attempts to solve.
Meryl explains LTI and the Learn.co platform for students. 
Learn more about custom parameters in Token Alchemist.
The process of learning OAuth in Token Alchemist.
What to consider when using LTI in Elixir.
The benefits of resource link history ID’s in the LTI spec.
Opportunities for you with Token Alchemist.
And much more!
Links Mentioned in Today’s Episode:
We Work — https://www.wework.com/
Flatiron School — https://flatironschool.com/
Elixir — https://elixir-lang.org/
Ruby — https://www.ruby-lang.org/en/
Learn.co — https://learn.co/
Meryl on LinkedIn — https://www.linkedin.com/in/meryldakin/
Meryl on Twitter — https://twitter.com/meryldakin
Meryl on GitHub — https://github.com/meryldakin
Token Alchemist on GitHub — https://github.com/meryldakin/token_alchemist
Learn more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) Special Guest: Meryl Dakin.
</description>
      <itunes:keywords>elixir, wework, flatiron school, token alchemist</itunes:keywords>
      <content:encoded><![CDATA[
        <p>Today on the show we continue our series on the inner workings of several different Elixir libraries and are happy to be joined by Meryl Dakin, Software Engineer at the Flatiron School and author of Token Alchemist. In this episode, we discover how Meryl got started with Elixir and what the process was like for her transitioning from Ruby to Elixir. We learn more about the internal functions of Token Alchemist within the school context and discuss the unique opportunities Meryl has discovered in Elixir, as well as the trickier language features that programmers are likely to experience in their learning process. Meryl also shares the challenges that Token Alchemist attempts to overcome – delving deeper into LTI, the Learn.co platform, OAuth and JSON. For all this and more, be sure to click play!</p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>Discover why Meryl first got started with Elixir.</li>
<li>Learn more about the Flatiron Bootcamp for coders.</li>
<li>Meryl’s experience in transitioning from Ruby to Elixir.</li>
<li>The opportunities for concurrency and fault tolerance in Elixir.</li>
<li>Discover the top three tricky language features in Elixir.</li>
<li>The benefits of going back to the basics of Elixir.</li>
<li>Find out the problems that Token Alchemist attempts to solve.</li>
<li>Meryl explains LTI and the Learn.co platform for students. </li>
<li>Learn more about custom parameters in Token Alchemist.</li>
<li>The process of learning OAuth in Token Alchemist.</li>
<li>What to consider when using LTI in Elixir.</li>
<li>The benefits of resource link history ID’s in the LTI spec.</li>
<li>Opportunities for you with Token Alchemist.</li>
<li>And much more!</li>
</ul>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>We Work — <a href="https://www.wework.com/" rel="nofollow">https://www.wework.com/</a><br>
Flatiron School — <a href="https://flatironschool.com/" rel="nofollow">https://flatironschool.com/</a><br>
Elixir — <a href="https://elixir-lang.org/" rel="nofollow">https://elixir-lang.org/</a><br>
Ruby — <a href="https://www.ruby-lang.org/en/" rel="nofollow">https://www.ruby-lang.org/en/</a><br>
Learn.co — <a href="https://learn.co/" rel="nofollow">https://learn.co/</a><br>
Meryl on LinkedIn — <a href="https://www.linkedin.com/in/meryldakin/" rel="nofollow">https://www.linkedin.com/in/meryldakin/</a><br>
Meryl on Twitter — <a href="https://twitter.com/meryldakin" rel="nofollow">https://twitter.com/meryldakin</a><br>
Meryl on GitHub — <a href="https://github.com/meryldakin" rel="nofollow">https://github.com/meryldakin</a><br>
Token Alchemist on GitHub — <a href="https://github.com/meryldakin/token_alchemist" rel="nofollow">https://github.com/meryldakin/token_alchemist</a></p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Meryl Dakin.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Today on the show we continue our series on the inner workings of several different Elixir libraries and are happy to be joined by Meryl Dakin, Software Engineer at the Flatiron School and author of Token Alchemist. In this episode, we discover how Meryl got started with Elixir and what the process was like for her transitioning from Ruby to Elixir. We learn more about the internal functions of Token Alchemist within the school context and discuss the unique opportunities Meryl has discovered in Elixir, as well as the trickier language features that programmers are likely to experience in their learning process. Meryl also shares the challenges that Token Alchemist attempts to overcome – delving deeper into LTI, the Learn.co platform, OAuth and JSON. For all this and more, be sure to click play!</p>

<p><strong>Key Points From This Episode:</strong></p>

<ul>
<li>Discover why Meryl first got started with Elixir.</li>
<li>Learn more about the Flatiron Bootcamp for coders.</li>
<li>Meryl’s experience in transitioning from Ruby to Elixir.</li>
<li>The opportunities for concurrency and fault tolerance in Elixir.</li>
<li>Discover the top three tricky language features in Elixir.</li>
<li>The benefits of going back to the basics of Elixir.</li>
<li>Find out the problems that Token Alchemist attempts to solve.</li>
<li>Meryl explains LTI and the Learn.co platform for students. </li>
<li>Learn more about custom parameters in Token Alchemist.</li>
<li>The process of learning OAuth in Token Alchemist.</li>
<li>What to consider when using LTI in Elixir.</li>
<li>The benefits of resource link history ID’s in the LTI spec.</li>
<li>Opportunities for you with Token Alchemist.</li>
<li>And much more!</li>
</ul>

<p><strong>Links Mentioned in Today’s Episode:</strong></p>

<p>We Work — <a href="https://www.wework.com/" rel="nofollow">https://www.wework.com/</a><br>
Flatiron School — <a href="https://flatironschool.com/" rel="nofollow">https://flatironschool.com/</a><br>
Elixir — <a href="https://elixir-lang.org/" rel="nofollow">https://elixir-lang.org/</a><br>
Ruby — <a href="https://www.ruby-lang.org/en/" rel="nofollow">https://www.ruby-lang.org/en/</a><br>
Learn.co — <a href="https://learn.co/" rel="nofollow">https://learn.co/</a><br>
Meryl on LinkedIn — <a href="https://www.linkedin.com/in/meryldakin/" rel="nofollow">https://www.linkedin.com/in/meryldakin/</a><br>
Meryl on Twitter — <a href="https://twitter.com/meryldakin" rel="nofollow">https://twitter.com/meryldakin</a><br>
Meryl on GitHub — <a href="https://github.com/meryldakin" rel="nofollow">https://github.com/meryldakin</a><br>
Token Alchemist on GitHub — <a href="https://github.com/meryldakin/token_alchemist" rel="nofollow">https://github.com/meryldakin/token_alchemist</a></p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Meryl Dakin.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Paul Schoenfelder on Distillery – Elixir Internals</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/season-two-schoenfelder</link>
      <guid isPermaLink="false">bd39f088-71c3-4425-b78e-8fc4a5324a1c</guid>
      <pubDate>Thu, 25 Jul 2019 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/bd39f088-71c3-4425-b78e-8fc4a5324a1c.mp3" length="29233230" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>2</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Welcome back to show everyone and today in our exploration of Elixir libraries we are talking to Paul Schoenfelder! He is here to unpack Distillery, his own creation from the world of Elixir and tell us about how it works. We also discuss how Paul made the transition from bigger corporations into the startup world, his early experiences of different coding languages and the initial steps he took in writing Distillery. Paul is very honest about the unclear future of the library and he shares his hopes for it for the short term as well as clarifying its key concepts and functions. He gives great advice and directions for learning more about the resource and how you can help him and his projects out if you use them. For all this and then some, be sure to join us today for the show! </itunes:subtitle>
      <itunes:duration>29:45</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>Welcome back to show everyone and today in our exploration of Elixir libraries we are talking to Paul Schoenfelder! He is here to unpack Distillery, his own creation from the world of Elixir and tell us about how it works. We also discuss how Paul made the transition from bigger corporations into the startup world, his early experiences of different coding languages and the initial steps he took in writing Distillery. Paul is very honest about the unclear future of the library and he shares his hopes for it for the short term as well as clarifying its key concepts and functions. He gives great advice and directions for learning more about the resource and how you can help him and his projects out if you use them. For all this and then some, be sure to join us today for the show! 
 Key Points From This Episode: 
* Paul's work background, language history and the last few years working Elixir. 
* The first library that Paul contributed to and created on his own! 
* What brought about the creation of Distillery. 
* Clarifying releases, compiling, generating, deployment and more. 
* Where to learn more and find out details about the library. 
* The first steps Paul took when writing this latest version of the Distillery. 
* Looking to the future of Distillery and its current best use cases. 
* Hot upgrades and who they can be useful to when it comes to Elixir. 
* Let Paul know if you are using or want to contribute to a project of his! 
* And much more! 
Links Mentioned in Today’s Episode: 
Smartlogic — https://www.smartlogic.io/ 
Paul Schoenfelder — https://github.com/bitwalker 
Bitwalker — http://bitwalker.org/ 
Distillery — https://hex.pm/packages/distillery 
DockYard — https://dockyard.com/ 
Erlang — https://www.erlang.org/ 
Phoenix — https://phoenixframework.org/ 
Learn more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) Special Guest: Paul Schoenfelder.
</description>
      <itunes:keywords>elixir, distillery</itunes:keywords>
      <content:encoded><![CDATA[
        <p>Welcome back to show everyone and today in our exploration of Elixir libraries we are talking to Paul Schoenfelder! He is here to unpack Distillery, his own creation from the world of Elixir and tell us about how it works. We also discuss how Paul made the transition from bigger corporations into the startup world, his early experiences of different coding languages and the initial steps he took in writing Distillery. Paul is very honest about the unclear future of the library and he shares his hopes for it for the short term as well as clarifying its key concepts and functions. He gives great advice and directions for learning more about the resource and how you can help him and his projects out if you use them. For all this and then some, be sure to join us today for the show! </p>

<p>Key Points From This Episode: </p>

<ul>
<li>Paul&#39;s work background, language history and the last few years working Elixir. </li>
<li>The first library that Paul contributed to and created on his own! </li>
<li>What brought about the creation of Distillery. </li>
<li>Clarifying releases, compiling, generating, deployment and more. </li>
<li>Where to learn more and find out details about the library. </li>
<li>The first steps Paul took when writing this latest version of the Distillery. </li>
<li>Looking to the future of Distillery and its current best use cases. </li>
<li>Hot upgrades and who they can be useful to when it comes to Elixir. </li>
<li>Let Paul know if you are using or want to contribute to a project of his! </li>
<li>And much more! </li>
</ul>

<p>Links Mentioned in Today’s Episode: <br>
Smartlogic — <a href="https://www.smartlogic.io/" rel="nofollow">https://www.smartlogic.io/</a> <br>
Paul Schoenfelder — <a href="https://github.com/bitwalker" rel="nofollow">https://github.com/bitwalker</a> <br>
Bitwalker — <a href="http://bitwalker.org/" rel="nofollow">http://bitwalker.org/</a> <br>
Distillery — <a href="https://hex.pm/packages/distillery" rel="nofollow">https://hex.pm/packages/distillery</a> <br>
DockYard — <a href="https://dockyard.com/" rel="nofollow">https://dockyard.com/</a> <br>
Erlang — <a href="https://www.erlang.org/" rel="nofollow">https://www.erlang.org/</a> <br>
Phoenix — <a href="https://phoenixframework.org/" rel="nofollow">https://phoenixframework.org/</a> </p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Paul Schoenfelder.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Welcome back to show everyone and today in our exploration of Elixir libraries we are talking to Paul Schoenfelder! He is here to unpack Distillery, his own creation from the world of Elixir and tell us about how it works. We also discuss how Paul made the transition from bigger corporations into the startup world, his early experiences of different coding languages and the initial steps he took in writing Distillery. Paul is very honest about the unclear future of the library and he shares his hopes for it for the short term as well as clarifying its key concepts and functions. He gives great advice and directions for learning more about the resource and how you can help him and his projects out if you use them. For all this and then some, be sure to join us today for the show! </p>

<p>Key Points From This Episode: </p>

<ul>
<li>Paul&#39;s work background, language history and the last few years working Elixir. </li>
<li>The first library that Paul contributed to and created on his own! </li>
<li>What brought about the creation of Distillery. </li>
<li>Clarifying releases, compiling, generating, deployment and more. </li>
<li>Where to learn more and find out details about the library. </li>
<li>The first steps Paul took when writing this latest version of the Distillery. </li>
<li>Looking to the future of Distillery and its current best use cases. </li>
<li>Hot upgrades and who they can be useful to when it comes to Elixir. </li>
<li>Let Paul know if you are using or want to contribute to a project of his! </li>
<li>And much more! </li>
</ul>

<p>Links Mentioned in Today’s Episode: <br>
Smartlogic — <a href="https://www.smartlogic.io/" rel="nofollow">https://www.smartlogic.io/</a> <br>
Paul Schoenfelder — <a href="https://github.com/bitwalker" rel="nofollow">https://github.com/bitwalker</a> <br>
Bitwalker — <a href="http://bitwalker.org/" rel="nofollow">http://bitwalker.org/</a> <br>
Distillery — <a href="https://hex.pm/packages/distillery" rel="nofollow">https://hex.pm/packages/distillery</a> <br>
DockYard — <a href="https://dockyard.com/" rel="nofollow">https://dockyard.com/</a> <br>
Erlang — <a href="https://www.erlang.org/" rel="nofollow">https://www.erlang.org/</a> <br>
Phoenix — <a href="https://phoenixframework.org/" rel="nofollow">https://phoenixframework.org/</a> </p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Paul Schoenfelder.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Bryan Joseph on ElixirScript – Elixir Internals</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/season-two-joseph</link>
      <guid isPermaLink="false">ed1a46a8-a3ac-4808-b1e5-91e950b2791a</guid>
      <pubDate>Thu, 18 Jul 2019 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/ed1a46a8-a3ac-4808-b1e5-91e950b2791a.mp3" length="23649600" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>2</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Today on the show we continue our series on the inner workings and various libraries of Elixir and are very happy to welcome Bryan Joseph of Revelry to talk about his very own ElixirScript. ElixirScript is essentially an Elixir to JavaScript compiler, allowing users to run Elixir online more easily.</itunes:subtitle>
      <itunes:duration>23:56</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>Today on the show we continue our series on the inner workings and various libraries of Elixir and are very happy to welcome Bryan Joseph of Revelry to talk about his very own ElixirScript. ElixirScript is essentially an Elixir to JavaScript compiler, allowing users to run Elixir online more easily. We ask Bryan what inspired this project and about some of the major challenges that have faced it. We also talk about the role of his company, Revelry in his career and work in open source. Bryan tells us about his very own conference, The Big Elixir and why you should be traveling to New Orleans to check it out! Other topics covered include the architecture of ElixirScript, binary pattern matching, Bryan's other experiences of libraries and his hopes for ElixirScript's future. For all this and then some, be sure to listen in today!
Key Points From This Episode:
Some background on Bryan, his work and how he got started with Elixir. 
What is ElixirScript? What does it do? How Brian got the idea!
ElixirScript's architecture; the inner workings of the compiler.
The major problems and challenges that face this task with JavaScript. 
Step one in the process; the conversion of concepts.
Binary pattern matching and the implementation of strings. 
The things Bryan would do differently looking back on the product.   
Bryan's other experiences of libraries, contributions and fixes. 
Marketing, posting and getting the word out on ElixirScript.
The current state of the project and hopes for the future. 
A little bit about The Big Elixir and what sets it apart from other conferences.  
And much more! 
Links Mentioned in Today’s Episode:
Smartlogic — https://www.smartlogic.io/
ElixirScript — https://elixirscript.github.io/
Bryan Joseph — https://github.com/bryanjos
Revelry — https://revelry.co/
The Big Elixir— https://www.thebigelixir.com/
Metaprogramming Elixir — https://www.amazon.com/Metaprogramming-Elixir-Write-Less-Code/dp/1680500414
Chris McCord — http://chrismccord.com/
Erlang — https://www.erlang.org/
ElixirCon — https://www.elixirlabs.net/events/elixircon-2018
Lonestar Elixir — https://www.lonestarelixir.com/
Operation Spark — https://operationspark.org/
Flatiron — https://flatironschool.com/
Learn more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) Special Guest: Bryan Joseph.
</description>
      <itunes:keywords>elixir, elixirscript, the big elixir</itunes:keywords>
      <content:encoded><![CDATA[
        <p>Today on the show we continue our series on the inner workings and various libraries of Elixir and are very happy to welcome Bryan Joseph of Revelry to talk about his very own ElixirScript. ElixirScript is essentially an Elixir to JavaScript compiler, allowing users to run Elixir online more easily. We ask Bryan what inspired this project and about some of the major challenges that have faced it. We also talk about the role of his company, Revelry in his career and work in open source. Bryan tells us about his very own conference, The Big Elixir and why you should be traveling to New Orleans to check it out! Other topics covered include the architecture of ElixirScript, binary pattern matching, Bryan&#39;s other experiences of libraries and his hopes for ElixirScript&#39;s future. For all this and then some, be sure to listen in today!</p>

<p>Key Points From This Episode:</p>

<ul>
<li>Some background on Bryan, his work and how he got started with Elixir. </li>
<li>What is ElixirScript? What does it do? How Brian got the idea!</li>
<li>ElixirScript&#39;s architecture; the inner workings of the compiler.</li>
<li>The major problems and challenges that face this task with JavaScript. </li>
<li>Step one in the process; the conversion of concepts.</li>
<li>Binary pattern matching and the implementation of strings. </li>
<li>The things Bryan would do differently looking back on the product.<br></li>
<li>Bryan&#39;s other experiences of libraries, contributions and fixes. </li>
<li>Marketing, posting and getting the word out on ElixirScript.</li>
<li>The current state of the project and hopes for the future. </li>
<li>A little bit about The Big Elixir and what sets it apart from other conferences.<br></li>
<li>And much more! </li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>Smartlogic — <a href="https://www.smartlogic.io/" rel="nofollow">https://www.smartlogic.io/</a><br>
ElixirScript — <a href="https://elixirscript.github.io/" rel="nofollow">https://elixirscript.github.io/</a><br>
Bryan Joseph — <a href="https://github.com/bryanjos" rel="nofollow">https://github.com/bryanjos</a><br>
Revelry — <a href="https://revelry.co/" rel="nofollow">https://revelry.co/</a><br>
The Big Elixir— <a href="https://www.thebigelixir.com/" rel="nofollow">https://www.thebigelixir.com/</a><br>
Metaprogramming Elixir — <a href="https://www.amazon.com/Metaprogramming-Elixir-Write-Less-Code/dp/1680500414" rel="nofollow">https://www.amazon.com/Metaprogramming-Elixir-Write-Less-Code/dp/1680500414</a><br>
Chris McCord — <a href="http://chrismccord.com/" rel="nofollow">http://chrismccord.com/</a><br>
Erlang — <a href="https://www.erlang.org/" rel="nofollow">https://www.erlang.org/</a><br>
ElixirCon — <a href="https://www.elixirlabs.net/events/elixircon-2018" rel="nofollow">https://www.elixirlabs.net/events/elixircon-2018</a><br>
Lonestar Elixir — <a href="https://www.lonestarelixir.com/" rel="nofollow">https://www.lonestarelixir.com/</a><br>
Operation Spark — <a href="https://operationspark.org/" rel="nofollow">https://operationspark.org/</a><br>
Flatiron — <a href="https://flatironschool.com/" rel="nofollow">https://flatironschool.com/</a></p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Bryan Joseph.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Today on the show we continue our series on the inner workings and various libraries of Elixir and are very happy to welcome Bryan Joseph of Revelry to talk about his very own ElixirScript. ElixirScript is essentially an Elixir to JavaScript compiler, allowing users to run Elixir online more easily. We ask Bryan what inspired this project and about some of the major challenges that have faced it. We also talk about the role of his company, Revelry in his career and work in open source. Bryan tells us about his very own conference, The Big Elixir and why you should be traveling to New Orleans to check it out! Other topics covered include the architecture of ElixirScript, binary pattern matching, Bryan&#39;s other experiences of libraries and his hopes for ElixirScript&#39;s future. For all this and then some, be sure to listen in today!</p>

<p>Key Points From This Episode:</p>

<ul>
<li>Some background on Bryan, his work and how he got started with Elixir. </li>
<li>What is ElixirScript? What does it do? How Brian got the idea!</li>
<li>ElixirScript&#39;s architecture; the inner workings of the compiler.</li>
<li>The major problems and challenges that face this task with JavaScript. </li>
<li>Step one in the process; the conversion of concepts.</li>
<li>Binary pattern matching and the implementation of strings. </li>
<li>The things Bryan would do differently looking back on the product.<br></li>
<li>Bryan&#39;s other experiences of libraries, contributions and fixes. </li>
<li>Marketing, posting and getting the word out on ElixirScript.</li>
<li>The current state of the project and hopes for the future. </li>
<li>A little bit about The Big Elixir and what sets it apart from other conferences.<br></li>
<li>And much more! </li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>Smartlogic — <a href="https://www.smartlogic.io/" rel="nofollow">https://www.smartlogic.io/</a><br>
ElixirScript — <a href="https://elixirscript.github.io/" rel="nofollow">https://elixirscript.github.io/</a><br>
Bryan Joseph — <a href="https://github.com/bryanjos" rel="nofollow">https://github.com/bryanjos</a><br>
Revelry — <a href="https://revelry.co/" rel="nofollow">https://revelry.co/</a><br>
The Big Elixir— <a href="https://www.thebigelixir.com/" rel="nofollow">https://www.thebigelixir.com/</a><br>
Metaprogramming Elixir — <a href="https://www.amazon.com/Metaprogramming-Elixir-Write-Less-Code/dp/1680500414" rel="nofollow">https://www.amazon.com/Metaprogramming-Elixir-Write-Less-Code/dp/1680500414</a><br>
Chris McCord — <a href="http://chrismccord.com/" rel="nofollow">http://chrismccord.com/</a><br>
Erlang — <a href="https://www.erlang.org/" rel="nofollow">https://www.erlang.org/</a><br>
ElixirCon — <a href="https://www.elixirlabs.net/events/elixircon-2018" rel="nofollow">https://www.elixirlabs.net/events/elixircon-2018</a><br>
Lonestar Elixir — <a href="https://www.lonestarelixir.com/" rel="nofollow">https://www.lonestarelixir.com/</a><br>
Operation Spark — <a href="https://operationspark.org/" rel="nofollow">https://operationspark.org/</a><br>
Flatiron — <a href="https://flatironschool.com/" rel="nofollow">https://flatironschool.com/</a></p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Bryan Joseph.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Brooklyn Zelenka on Witchcraft - Elixir Internals</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/season-two-zelenka</link>
      <guid isPermaLink="false">490b7cc3-44d7-4917-9688-2450d18de62a</guid>
      <pubDate>Thu, 11 Jul 2019 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/490b7cc3-44d7-4917-9688-2450d18de62a.mp3" length="29717784" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>2</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>Hey everybody and welcome back to Season 2 of the podcast! This season we will be talking about Elixir internals, libraries and the inner workings of the language. In our first episode we are very happy to be joined by Brooklyn Zelenka to start off our journey on the subject with an exploration of her very own Witchcraft.</itunes:subtitle>
      <itunes:duration>30:15</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>Hey everybody and welcome back to Season 2 of the podcast! This season we will be talking about Elixir internals, libraries and the inner workings of the language. In our first episode we are very happy to be joined by Brooklyn Zelenka to start off our journey on the subject with an exploration of her very own Witchcraft.
In this episode we talk to Brooklyn about her history with Elixir, how she got started and what attracts her to it. Brooklyn explains the influence that open source philosophy has had on her career in developing and from there she gives a pretty comprehensive introduction to what Witchcraft is, expanding its key concepts. Although this is quite a high level discussion about Elixir and Witchcraft, we are confident that with Brooklyn's expert help even our most uninitiated listener can get some benefit from our conversation. We also talk about type systems, property-based checking and Dialyzer, so for all of this and more make sure to join us as we kick things off for Season 2!
Key Points From This Episode:
A quick introduction to Brooklyn, where she works and how she got started with Elixir.  
The influence of open source and library contributions on Brooklyn's development.
Getting to grips with Witchcraft; defining monads and functors.
Why some of these scary terms do not need to frighten you. 
A few little things that differentiate Witchcraft and some surprising elements.
The convenient guarantees that Witchcraft provides around your data structure. 
Why there is no type system baked into Elixir; overheads, inputs and outputs. 
Property-based checking and compile times in Witchcraft.
Merging of Elixir and Dialyzer; benefits and problems. 
Getting in touch with Brooklyn and getting involved with Witchcraft and Elixir. 
And much more! 
Links Mentioned in Today’s Episode:
Smartlogic — https://www.smartlogic.io/
Brooklyn Zelenka — https://github.com/expede
Brooklyn Zelenka on Twitter — https://twitter.com/expede
Brooklyn Zelenka Email — hello@brooklynzelenka.com
Fission — https://fission.codes/
Elixir — https://elixir-lang.org/
Witchcraft — https://hex.pm/packages/witchcraft
Dialyzer — https://github.com/jeremyjh/dialyxir
Learn more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) Special Guest: Brooklyn Zelenka.
</description>
      <itunes:keywords>elixir, witchcraft, dialyzer</itunes:keywords>
      <content:encoded><![CDATA[
        <p>Hey everybody and welcome back to Season 2 of the podcast! This season we will be talking about Elixir internals, libraries and the inner workings of the language. In our first episode we are very happy to be joined by Brooklyn Zelenka to start off our journey on the subject with an exploration of her very own Witchcraft.</p>

<p>In this episode we talk to Brooklyn about her history with Elixir, how she got started and what attracts her to it. Brooklyn explains the influence that open source philosophy has had on her career in developing and from there she gives a pretty comprehensive introduction to what Witchcraft is, expanding its key concepts. Although this is quite a high level discussion about Elixir and Witchcraft, we are confident that with Brooklyn&#39;s expert help even our most uninitiated listener can get some benefit from our conversation. We also talk about type systems, property-based checking and Dialyzer, so for all of this and more make sure to join us as we kick things off for Season 2!</p>

<p>Key Points From This Episode:</p>

<ul>
<li>A quick introduction to Brooklyn, where she works and how she got started with Elixir.<br></li>
<li>The influence of open source and library contributions on Brooklyn&#39;s development.</li>
<li>Getting to grips with Witchcraft; defining monads and functors.</li>
<li>Why some of these scary terms do not need to frighten you. </li>
<li>A few little things that differentiate Witchcraft and some surprising elements.</li>
<li>The convenient guarantees that Witchcraft provides around your data structure. </li>
<li>Why there is no type system baked into Elixir; overheads, inputs and outputs. </li>
<li>Property-based checking and compile times in Witchcraft.</li>
<li>Merging of Elixir and Dialyzer; benefits and problems. </li>
<li>Getting in touch with Brooklyn and getting involved with Witchcraft and Elixir. </li>
<li>And much more! </li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>Smartlogic — <a href="https://www.smartlogic.io/" rel="nofollow">https://www.smartlogic.io/</a><br>
Brooklyn Zelenka — <a href="https://github.com/expede" rel="nofollow">https://github.com/expede</a><br>
Brooklyn Zelenka on Twitter — <a href="https://twitter.com/expede" rel="nofollow">https://twitter.com/expede</a><br>
Brooklyn Zelenka Email — <a href="mailto:hello@brooklynzelenka.com" rel="nofollow">hello@brooklynzelenka.com</a><br>
Fission — <a href="https://fission.codes/" rel="nofollow">https://fission.codes/</a><br>
Elixir — <a href="https://elixir-lang.org/" rel="nofollow">https://elixir-lang.org/</a><br>
Witchcraft — <a href="https://hex.pm/packages/witchcraft" rel="nofollow">https://hex.pm/packages/witchcraft</a><br>
Dialyzer — <a href="https://github.com/jeremyjh/dialyxir" rel="nofollow">https://github.com/jeremyjh/dialyxir</a></p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Brooklyn Zelenka.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>Hey everybody and welcome back to Season 2 of the podcast! This season we will be talking about Elixir internals, libraries and the inner workings of the language. In our first episode we are very happy to be joined by Brooklyn Zelenka to start off our journey on the subject with an exploration of her very own Witchcraft.</p>

<p>In this episode we talk to Brooklyn about her history with Elixir, how she got started and what attracts her to it. Brooklyn explains the influence that open source philosophy has had on her career in developing and from there she gives a pretty comprehensive introduction to what Witchcraft is, expanding its key concepts. Although this is quite a high level discussion about Elixir and Witchcraft, we are confident that with Brooklyn&#39;s expert help even our most uninitiated listener can get some benefit from our conversation. We also talk about type systems, property-based checking and Dialyzer, so for all of this and more make sure to join us as we kick things off for Season 2!</p>

<p>Key Points From This Episode:</p>

<ul>
<li>A quick introduction to Brooklyn, where she works and how she got started with Elixir.<br></li>
<li>The influence of open source and library contributions on Brooklyn&#39;s development.</li>
<li>Getting to grips with Witchcraft; defining monads and functors.</li>
<li>Why some of these scary terms do not need to frighten you. </li>
<li>A few little things that differentiate Witchcraft and some surprising elements.</li>
<li>The convenient guarantees that Witchcraft provides around your data structure. </li>
<li>Why there is no type system baked into Elixir; overheads, inputs and outputs. </li>
<li>Property-based checking and compile times in Witchcraft.</li>
<li>Merging of Elixir and Dialyzer; benefits and problems. </li>
<li>Getting in touch with Brooklyn and getting involved with Witchcraft and Elixir. </li>
<li>And much more! </li>
</ul>

<p>Links Mentioned in Today’s Episode:</p>

<p>Smartlogic — <a href="https://www.smartlogic.io/" rel="nofollow">https://www.smartlogic.io/</a><br>
Brooklyn Zelenka — <a href="https://github.com/expede" rel="nofollow">https://github.com/expede</a><br>
Brooklyn Zelenka on Twitter — <a href="https://twitter.com/expede" rel="nofollow">https://twitter.com/expede</a><br>
Brooklyn Zelenka Email — <a href="mailto:hello@brooklynzelenka.com" rel="nofollow">hello@brooklynzelenka.com</a><br>
Fission — <a href="https://fission.codes/" rel="nofollow">https://fission.codes/</a><br>
Elixir — <a href="https://elixir-lang.org/" rel="nofollow">https://elixir-lang.org/</a><br>
Witchcraft — <a href="https://hex.pm/packages/witchcraft" rel="nofollow">https://hex.pm/packages/witchcraft</a><br>
Dialyzer — <a href="https://github.com/jeremyjh/dialyxir" rel="nofollow">https://github.com/jeremyjh/dialyxir</a></p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Brooklyn Zelenka.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Elixir in Production Recap</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/season-1-recap</link>
      <guid isPermaLink="false">e81d239d-448f-4244-884a-f5f972277713</guid>
      <pubDate>Thu, 18 Apr 2019 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/e81d239d-448f-4244-884a-f5f972277713.mp3" length="19256966" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>1</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>With this season over, we bring Dan Ivovich back to talk about what we learned.</itunes:subtitle>
      <itunes:duration>20:03</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>With this season over, we bring Dan Ivovich back to talk about what we learned.
Dan Ivovich - Director of Development Operations @ SmartLogic
00:43 - Why are you using Elixir in production?
01:20 - Advantages / disadvantages of Elixir
02:38 - How do you deploy?
03:48 - Zero downtime deploys
05:40 - Clustering
06:56 - Elixir App performance
09:00 - Background task processing
10:36 - Common Libraries
14:40 - 3rd Party Services
16:16 - Do you have a story where Elixir saved the day in production?
17:56 - OTP features
18:31 - Tip to developers
Learn more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) Special Guest: Dan Ivovich.
</description>
      <itunes:keywords>elixir, phoenix</itunes:keywords>
      <content:encoded><![CDATA[
        <p>With this season over, we bring Dan Ivovich back to talk about what we learned.</p>

<p>Dan Ivovich - Director of Development Operations @ SmartLogic</p>

<p>00:43 - Why are you using Elixir in production?<br>
01:20 - Advantages / disadvantages of Elixir<br>
02:38 - How do you deploy?<br>
03:48 - Zero downtime deploys<br>
05:40 - Clustering<br>
06:56 - Elixir App performance<br>
09:00 - Background task processing<br>
10:36 - Common Libraries<br>
14:40 - 3rd Party Services<br>
16:16 - Do you have a story where Elixir saved the day in production?<br>
17:56 - OTP features<br>
18:31 - Tip to developers</p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Dan Ivovich.</p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>With this season over, we bring Dan Ivovich back to talk about what we learned.</p>

<p>Dan Ivovich - Director of Development Operations @ SmartLogic</p>

<p>00:43 - Why are you using Elixir in production?<br>
01:20 - Advantages / disadvantages of Elixir<br>
02:38 - How do you deploy?<br>
03:48 - Zero downtime deploys<br>
05:40 - Clustering<br>
06:56 - Elixir App performance<br>
09:00 - Background task processing<br>
10:36 - Common Libraries<br>
14:40 - 3rd Party Services<br>
16:16 - Do you have a story where Elixir saved the day in production?<br>
17:56 - OTP features<br>
18:31 - Tip to developers</p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Dan Ivovich.</p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Jeffrey Matthias from Community - Elixir in Production</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/season-1-community</link>
      <guid isPermaLink="false">7bd99e2e-cba0-4c94-904a-5486ce48c517</guid>
      <pubDate>Thu, 11 Apr 2019 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/7bd99e2e-cba0-4c94-904a-5486ce48c517.mp3" length="42158622" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>1</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>We talk with Jeffrey Matthias from Community about their current and past Elixir projects and how they are deployed.</itunes:subtitle>
      <itunes:duration>43:54</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>We talk with Jeffrey Matthias from Community about their current and past Elixir projects and how they are deployed.
Jeffrey Matthias - Community (https://www.community.com/)
Find Jeffrey elsewhere online:
http://github.com/idlehands
https://twitter.com/idlehands
0:47 - Give us a quick overview of the Elixir projects you have in production.
3:29 - Why are you using Elixir in production?
6:04 - What are some of the high level advantages / disadvantages of Elixir, from your perspective?
10:14 - What do you use to host your Elixir app?
Linode, AWS, DO 
Heroku 
Enmesos 
mesos  
How do you deploy your application?
Ansible 
Deploy scripts 
Distillery 
14:19 - Are you able to get zero downtime deploys?
If so, how? 
17:06 - Do you cluster the application?
If so, how? 
22:53 - How does your Elixir App perform compared to others in your environment?
Response time 
Throughput 
Jobs/hr 
25:01 - How are you solving background task processing?
29:17 - What libraries are you using?
Phoenix 
33:53 - Third party apps 
37:28 - Do you have a story where Elixir saved the day in production?
40:42 - If you could give one tip to developers out there who are or may soon be running Elixir in production, what would it be?
Learn more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) Special Guest: Jeffrey Matthias.
</description>
      <itunes:keywords>elixir, phoenix, production</itunes:keywords>
      <content:encoded><![CDATA[
        <p>We talk with Jeffrey Matthias from Community about their current and past Elixir projects and how they are deployed.</p>

<p>Jeffrey Matthias - <a href="https://www.community.com/" rel="nofollow">Community</a></p>

<p>Find Jeffrey elsewhere online:<br>
<a href="http://github.com/idlehands" rel="nofollow">http://github.com/idlehands</a><br>
<a href="https://twitter.com/idlehands" rel="nofollow">https://twitter.com/idlehands</a></p>

<p>0:47 - Give us a quick overview of the Elixir projects you have in production.</p>

<p>3:29 - Why are you using Elixir in production?</p>

<p>6:04 - What are some of the high level advantages / disadvantages of Elixir, from your perspective?</p>

<p>10:14 - What do you use to host your Elixir app?</p>

<ul>
<li>Linode, AWS, DO </li>
<li>Heroku </li>
<li>Enmesos </li>
<li>mesos<br></li>
</ul>

<p>How do you deploy your application?</p>

<ul>
<li>Ansible </li>
<li>Deploy scripts </li>
<li>Distillery </li>
</ul>

<p>14:19 - Are you able to get zero downtime deploys?</p>

<ul>
<li>If so, how? </li>
</ul>

<p>17:06 - Do you cluster the application?</p>

<ul>
<li>If so, how? </li>
</ul>

<p>22:53 - How does your Elixir App perform compared to others in your environment?</p>

<ul>
<li>Response time </li>
<li>Throughput </li>
<li>Jobs/hr </li>
</ul>

<p>25:01 - How are you solving background task processing?</p>

<p>29:17 - What libraries are you using?</p>

<ul>
<li>Phoenix </li>
</ul>

<p>33:53 - Third party apps </p>

<p>37:28 - Do you have a story where Elixir saved the day in production?</p>

<p>40:42 - If you could give one tip to developers out there who are or may soon be running Elixir in production, what would it be?</p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Jeffrey Matthias.</p><p>Links:</p><ul><li><a href="https://www.enbala.com/" title="Enbala" rel="nofollow">Enbala</a></li><li><a href="https://weedmaps.com/" title="Weedmaps" rel="nofollow">Weedmaps</a></li><li><a href="https://shop.oreilly.com/product/0636920153566.do" title="Docker: Up & Running" rel="nofollow">Docker: Up & Running</a></li><li><a href="https://www.asyncapi.com/" title="Async API" rel="nofollow">Async API</a></li><li><a href="https://www.rabbitmq.com/" title="RabbitMQ" rel="nofollow">RabbitMQ</a></li><li><a href="https://github.com/pma/amqp" title="AMQP Elixir Client" rel="nofollow">AMQP Elixir Client</a></li><li><a href="https://github.com/silviucpp/erlcass" title="erlcass" rel="nofollow">erlcass</a></li><li><a href="https://www.erlang-in-anger.com/" title="Erlang in Anger" rel="nofollow">Erlang in Anger</a></li></ul>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>We talk with Jeffrey Matthias from Community about their current and past Elixir projects and how they are deployed.</p>

<p>Jeffrey Matthias - <a href="https://www.community.com/" rel="nofollow">Community</a></p>

<p>Find Jeffrey elsewhere online:<br>
<a href="http://github.com/idlehands" rel="nofollow">http://github.com/idlehands</a><br>
<a href="https://twitter.com/idlehands" rel="nofollow">https://twitter.com/idlehands</a></p>

<p>0:47 - Give us a quick overview of the Elixir projects you have in production.</p>

<p>3:29 - Why are you using Elixir in production?</p>

<p>6:04 - What are some of the high level advantages / disadvantages of Elixir, from your perspective?</p>

<p>10:14 - What do you use to host your Elixir app?</p>

<ul>
<li>Linode, AWS, DO </li>
<li>Heroku </li>
<li>Enmesos </li>
<li>mesos<br></li>
</ul>

<p>How do you deploy your application?</p>

<ul>
<li>Ansible </li>
<li>Deploy scripts </li>
<li>Distillery </li>
</ul>

<p>14:19 - Are you able to get zero downtime deploys?</p>

<ul>
<li>If so, how? </li>
</ul>

<p>17:06 - Do you cluster the application?</p>

<ul>
<li>If so, how? </li>
</ul>

<p>22:53 - How does your Elixir App perform compared to others in your environment?</p>

<ul>
<li>Response time </li>
<li>Throughput </li>
<li>Jobs/hr </li>
</ul>

<p>25:01 - How are you solving background task processing?</p>

<p>29:17 - What libraries are you using?</p>

<ul>
<li>Phoenix </li>
</ul>

<p>33:53 - Third party apps </p>

<p>37:28 - Do you have a story where Elixir saved the day in production?</p>

<p>40:42 - If you could give one tip to developers out there who are or may soon be running Elixir in production, what would it be?</p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Jeffrey Matthias.</p><p>Links:</p><ul><li><a href="https://www.enbala.com/" title="Enbala" rel="nofollow">Enbala</a></li><li><a href="https://weedmaps.com/" title="Weedmaps" rel="nofollow">Weedmaps</a></li><li><a href="https://shop.oreilly.com/product/0636920153566.do" title="Docker: Up & Running" rel="nofollow">Docker: Up & Running</a></li><li><a href="https://www.asyncapi.com/" title="Async API" rel="nofollow">Async API</a></li><li><a href="https://www.rabbitmq.com/" title="RabbitMQ" rel="nofollow">RabbitMQ</a></li><li><a href="https://github.com/pma/amqp" title="AMQP Elixir Client" rel="nofollow">AMQP Elixir Client</a></li><li><a href="https://github.com/silviucpp/erlcass" title="erlcass" rel="nofollow">erlcass</a></li><li><a href="https://www.erlang-in-anger.com/" title="Erlang in Anger" rel="nofollow">Erlang in Anger</a></li></ul>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Jay Ashe from Cava - Elixir in Production</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/season-1-cava</link>
      <guid isPermaLink="false">c300841a-d5b9-4957-950f-ce0f6bc3af68</guid>
      <pubDate>Thu, 04 Apr 2019 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/c300841a-d5b9-4957-950f-ce0f6bc3af68.mp3" length="16733300" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>1</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>We talk with Jay Ashe from Cava about their current and past Elixir projects and how they are deployed.</itunes:subtitle>
      <itunes:duration>17:25</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>We talk with Jay Ashe from Cava about their current and past Elixir projects and how they are deployed.
Jay Ashe - Cava (https://cava.com/)
Find Jay elsewhere online:
https://twitter.com/jgashe
0:40 - Give us a quick overview of the Elixir projects you have in production.
CAVA is a fast-casual mediterranean restaurant chain with 75 stores across the US. Elixir and phoenix power CAVA’s online ordering platform (order.cava.com and the CAVA app). We’ve got a REST (and websockets) api sitting behind react and our mobile apps, and we use phoenix templates for some of our back of house systems.
1:11 - Why are you using Elixir in production?
We have from the start! The application was originally implemented by Chris Bell and his team at madebymany. Chris, by the way, has a fantastic talk from ElixirConf 2016 that goes into our architecture and how we use elixir and OTP constructs to model our business logic. Chris will occasionally talk about the CAVA project on his Elixir podcast, ElixirTalk.
Chris’ Talk - https://www.youtube.com/watch?v=fkDhU-2NWJ8 (https://www.youtube.com/watch?v=fkDhU-2NWJ8)
1:58 - What are some of the high level advantages / disadvantages of Elixir, from your perspective?
Advantages: Elixir and Phoenix gives you rails-esque productivity/developer experience that scales. I think phoenix channels are a great example of this. Build a channel with complex real-time functionality and let it scale effortlessly. 
Disadvantages: 
Hiring and onboarding, depending on your mindset, can be difficult. If you’re used to hiring for experience in  your stack, its just going to be more difficult. Lately we’ve started doing one-hour weekly knowledge shares that cover elixir basics and are closely tied to our usage of them. So, here’s a test case, and here are all of the test helpers that we have set up that will help you write that test. We also just sent a new Elixir dev to lonestar elixir 
3:59 - What do you use to host your Elixir app?
Heroku 
How do you deploy your application? 
Heroku-buildpack-elixir https://github.com/HashNuke/heroku-buildpack-elixir (https://github.com/HashNuke/heroku-buildpack-elixir) 
4:44 - Are you able to get zero downtime deploys?
- As close as possible! We get that out of the box with heroku. When we deploy, heroku won’t point traffic to the new dyno until the app is healthy. We make extensive use of Phoenix channels over websockets, and our clients will reconnect automatically and transparently.  
5:10 - Do you cluster the application?
Nope.  
5:52 - How does your Elixir App perform compared to others in your environment?
I can’t really talk about numbers here, but Elixir is not at all our bottleneck. We don’t have other production applications 
6:25 - How are you solving background task processing?
Quantum for cron jobs, genservers for everything else. We’re running a single elixir application that handles all synchronous and async processing  
7:07 - What libraries are you using?
Phoenix 
Phoenix_swagger for API documentation that integrates with controller tests https://github.com/xerions/phoenix_swagger (https://github.com/xerions/phoenix_swagger) 
Ex_rated for rate limiting calls to our integrations https://github.com/grempe/ex_rated (https://github.com/grempe/ex_rated) 
Timex and calendar for datetime support with timezones https://github.com/bitwalker/timex (https://github.com/bitwalker/timex) 
A combination of httpotion and httpoison for HTTP clients, but im interested in trying Mint https://github.com/ericmj/mint (https://github.com/ericmj/mint)https://github.com/appcues/mojito (https://github.com/appcues/mojito) 
Bamboo for transactional emails, like order confirmations etc https://github.com/thoughtbot/bamboo (https://github.com/thoughtbot/bamboo) 
8:59 - 3rd Party Services (i.e. Email, Payment Processing, etc)
Sendgrid for email, Google for geocoding, slack for some internal alerting of application health, LevelUp for payments. https://www.thelevelup.com/ (https://www.thelevelup.com/) 
10:07 - Do you have a story where Elixir saved the day in production?
Yes and no. So I could tell this story by explaining the issue we saw and the underlying cause at the same time, but I think it would be more fun to tell it like our team experienced it. 
One day at lunch our application started going down. Lots of 500 errors. Red lights flashing. Panic ensuing. Lunch is our busiest time of day, so 1) we thought it was load related and 2) we really needed to fix it 
None of our traditional resources (database, cpu, memory) were constrained and our integrations that were synchronous were fine.  
Our logs were littered with errors from an analytics integration that ran asynchronously on genservers, but it didn’t seem related because we could see the error logs at times when our application was otherwise healthy. The team that used the analytics didn’t have a pressing need for them, and we deprioritized fixing the issue because the bug we were working on was so much more important (that’s foreshadowing). 
I spent a little time looking at websockets, but I was easily able to match the load of the websocket portion of our application on my local machine with no degradations in performance (thanks, phoenix), so that was out. 
At this point the issue was going on every day at lunch and I was getting annoyed at seeing the logs from the analytics integration when debugging, so I spent like 15 minutes finding and fixing the issue (a bad API key, basically) 
Voila, issue gone. Time to grab some lunch. 
We spent a while coming up with an explanation for this. Eventually we learned about max_restarts on a supervisor. By default, if a process crashes 3 times in 5 seconds, the process won’t be restarted again. So if another process (like the one handling a web request) tries to call that process that wasn’t restarted, the caller would crash, and we’d start to get 500 errors, customers couldn’t log in, mass confusion. 
So there are a few takeaways from this story: For a while, elixir saved the day in production.  
    - A supervision tree prevented failures from the analytics process from affecting customers, until the scale of our failures exceeded the max_restart level.  
    - Our supervision tree needed some love though, clearly. 
    - Monitor your resources. CPU is a resource, but calls to another API are also a resource and can get unhealthy too.  
15:00 - Are you using any cool OTP features?
GenServers, definitely. There’s lots we can do asynchronously especially in terms of our integrations. One process per store is a cool model that scales well and keeps issues isolated to a single store. 
15:50 - If you could give one tip to developers out there who are or may soon be running Elixir in production, what would it be?
If you’re on a small team, Heroku or a similar provider might give you a lot of value in terms of infrastructure you can set up and forget.
Learn more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) Special Guest: Jay Ashe.
</description>
      <itunes:keywords>elixir, phoenix, production</itunes:keywords>
      <content:encoded><![CDATA[
        <p>We talk with Jay Ashe from Cava about their current and past Elixir projects and how they are deployed.</p>

<p>Jay Ashe - <a href="https://cava.com/" rel="nofollow">Cava</a></p>

<p>Find Jay elsewhere online:<br>
<a href="https://twitter.com/jgashe" rel="nofollow">https://twitter.com/jgashe</a></p>

<p>0:40 - Give us a quick overview of the Elixir projects you have in production.</p>

<p>CAVA is a fast-casual mediterranean restaurant chain with 75 stores across the US. Elixir and phoenix power CAVA’s online ordering platform (order.cava.com and the CAVA app). We’ve got a REST (and websockets) api sitting behind react and our mobile apps, and we use phoenix templates for some of our back of house systems.</p>

<p>1:11 - Why are you using Elixir in production?</p>

<p>We have from the start! The application was originally implemented by Chris Bell and his team at madebymany. Chris, by the way, has a fantastic talk from ElixirConf 2016 that goes into our architecture and how we use elixir and OTP constructs to model our business logic. Chris will occasionally talk about the CAVA project on his Elixir podcast, ElixirTalk.</p>

<p>Chris’ Talk - <a href="https://www.youtube.com/watch?v=fkDhU-2NWJ8" rel="nofollow">https://www.youtube.com/watch?v=fkDhU-2NWJ8</a></p>

<p>1:58 - What are some of the high level advantages / disadvantages of Elixir, from your perspective?</p>

<p>Advantages: Elixir and Phoenix gives you rails-esque productivity/developer experience that scales. I think phoenix channels are a great example of this. Build a channel with complex real-time functionality and let it scale effortlessly. </p>

<p>Disadvantages: </p>

<ul>
<li>Hiring and onboarding, depending on your mindset, can be difficult. If you’re used to hiring for experience in  your stack, its just going to be more difficult. Lately we’ve started doing one-hour weekly knowledge shares that cover elixir basics and are closely tied to our usage of them. So, here’s a test case, and here are all of the test helpers that we have set up that will help you write that test. We also just sent a new Elixir dev to lonestar elixir </li>
</ul>

<p>3:59 - What do you use to host your Elixir app?</p>

<ul>
<li><p>Heroku </p></li>
<li><p>How do you deploy your application? </p>

<ul>
<li>Heroku-buildpack-elixir <a href="https://github.com/HashNuke/heroku-buildpack-elixir" rel="nofollow">https://github.com/HashNuke/heroku-buildpack-elixir</a> </li>
</ul></li>
</ul>

<p>4:44 - Are you able to get zero downtime deploys?</p>

<ul>
<li>As close as possible! We get that out of the box with heroku. When we deploy, heroku won’t point traffic to the new dyno until the app is healthy. We make extensive use of Phoenix channels over websockets, and our clients will reconnect automatically and transparently.<br></li>
</ul>

<p>5:10 - Do you cluster the application?</p>

<ul>
<li>Nope.<br></li>
</ul>

<p>5:52 - How does your Elixir App perform compared to others in your environment?</p>

<ul>
<li>I can’t really talk about numbers here, but Elixir is not at all our bottleneck. We don’t have other production applications </li>
</ul>

<p>6:25 - How are you solving background task processing?</p>

<ul>
<li>Quantum for cron jobs, genservers for everything else. We’re running a single elixir application that handles all synchronous and async processing<br></li>
</ul>

<p>7:07 - What libraries are you using?</p>

<ul>
<li>Phoenix </li>
<li>Phoenix_swagger for API documentation that integrates with controller tests <a href="https://github.com/xerions/phoenix_swagger" rel="nofollow">https://github.com/xerions/phoenix_swagger</a> </li>
<li>Ex_rated for rate limiting calls to our integrations <a href="https://github.com/grempe/ex_rated" rel="nofollow">https://github.com/grempe/ex_rated</a> </li>
<li>Timex and calendar for datetime support with timezones <a href="https://github.com/bitwalker/timex" rel="nofollow">https://github.com/bitwalker/timex</a> </li>
<li>A combination of httpotion and httpoison for HTTP clients, but im interested in trying Mint <a href="https://github.com/ericmj/mint" rel="nofollow">https://github.com/ericmj/mint</a><a href="https://github.com/appcues/mojito" rel="nofollow">https://github.com/appcues/mojito</a> </li>
<li>Bamboo for transactional emails, like order confirmations etc <a href="https://github.com/thoughtbot/bamboo" rel="nofollow">https://github.com/thoughtbot/bamboo</a> </li>
</ul>

<p>8:59 - 3rd Party Services (i.e. Email, Payment Processing, etc)</p>

<ul>
<li>Sendgrid for email, Google for geocoding, slack for some internal alerting of application health, LevelUp for payments. <a href="https://www.thelevelup.com/" rel="nofollow">https://www.thelevelup.com/</a> </li>
</ul>

<p>10:07 - Do you have a story where Elixir saved the day in production?</p>

<ul>
<li>Yes and no. So I could tell this story by explaining the issue we saw and the underlying cause at the same time, but I think it would be more fun to tell it like our team experienced it. </li>
<li>One day at lunch our application started going down. Lots of 500 errors. Red lights flashing. Panic ensuing. Lunch is our busiest time of day, so 1) we thought it was load related and 2) we really needed to fix it </li>
<li>None of our traditional resources (database, cpu, memory) were constrained and our integrations that were synchronous were fine.<br></li>
<li>Our logs were littered with errors from an analytics integration that ran asynchronously on genservers, but it didn’t seem related because we could see the error logs at times when our application was otherwise healthy. The team that used the analytics didn’t have a pressing need for them, and we deprioritized fixing the issue because the bug we were working on was so much more important (that’s foreshadowing). </li>
<li>I spent a little time looking at websockets, but I was easily able to match the load of the websocket portion of our application on my local machine with no degradations in performance (thanks, phoenix), so that was out. </li>
<li>At this point the issue was going on every day at lunch and I was getting annoyed at seeing the logs from the analytics integration when debugging, so I spent like 15 minutes finding and fixing the issue (a bad API key, basically) </li>
<li>Voila, issue gone. Time to grab some lunch. </li>
<li>We spent a while coming up with an explanation for this. Eventually we learned about max_restarts on a supervisor. By default, if a process crashes 3 times in 5 seconds, the process won’t be restarted again. So if another process (like the one handling a web request) tries to call that process that wasn’t restarted, the caller would crash, and we’d start to get 500 errors, customers couldn’t log in, mass confusion. </li>
<li>So there are a few takeaways from this story: For a while, elixir saved the day in production.<br>
    - A supervision tree prevented failures from the analytics process from affecting customers, until the scale of our failures exceeded the max_restart level.<br>
    - Our supervision tree needed some love though, clearly. 
    - Monitor your resources. CPU is a resource, but calls to another API are also a resource and can get unhealthy too.<br></li>
</ul>

<p>15:00 - Are you using any cool OTP features?</p>

<ul>
<li>GenServers, definitely. There’s lots we can do asynchronously especially in terms of our integrations. One process per store is a cool model that scales well and keeps issues isolated to a single store. </li>
</ul>

<p>15:50 - If you could give one tip to developers out there who are or may soon be running Elixir in production, what would it be?</p>

<ul>
<li>If you’re on a small team, Heroku or a similar provider might give you a lot of value in terms of infrastructure you can set up and forget.</li>
</ul>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Jay Ashe.</p><p>Links:</p><ul><li><a href="https://www.youtube.com/watch?v=fkDhU-2NWJ8" title="ElixirConf 2016 - Selling Food With Elixir by Chris Bell" rel="nofollow">ElixirConf 2016 - Selling Food With Elixir by Chris Bell</a></li><li><a href="https://github.com/HashNuke/heroku-buildpack-elixir" title="Heroku-buildpack-elixir" rel="nofollow">Heroku-buildpack-elixir</a></li><li><a href="https://github.com/xerions/phoenix_swagger" title="Phoenix Swagger" rel="nofollow">Phoenix Swagger</a></li><li><a href="https://github.com/grempe/ex_rated" title="Ex_rated" rel="nofollow">Ex_rated</a></li><li><a href="https://github.com/bitwalker/timex" title="Timex" rel="nofollow">Timex</a></li><li><a href="https://github.com/ericmj/mint" title="Mint" rel="nofollow">Mint</a></li><li><a href="https://github.com/appcues/mojito" title="Mojito" rel="nofollow">Mojito</a></li><li><a href="https://www.thelevelup.com/" title="LevelUp" rel="nofollow">LevelUp</a></li></ul>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>We talk with Jay Ashe from Cava about their current and past Elixir projects and how they are deployed.</p>

<p>Jay Ashe - <a href="https://cava.com/" rel="nofollow">Cava</a></p>

<p>Find Jay elsewhere online:<br>
<a href="https://twitter.com/jgashe" rel="nofollow">https://twitter.com/jgashe</a></p>

<p>0:40 - Give us a quick overview of the Elixir projects you have in production.</p>

<p>CAVA is a fast-casual mediterranean restaurant chain with 75 stores across the US. Elixir and phoenix power CAVA’s online ordering platform (order.cava.com and the CAVA app). We’ve got a REST (and websockets) api sitting behind react and our mobile apps, and we use phoenix templates for some of our back of house systems.</p>

<p>1:11 - Why are you using Elixir in production?</p>

<p>We have from the start! The application was originally implemented by Chris Bell and his team at madebymany. Chris, by the way, has a fantastic talk from ElixirConf 2016 that goes into our architecture and how we use elixir and OTP constructs to model our business logic. Chris will occasionally talk about the CAVA project on his Elixir podcast, ElixirTalk.</p>

<p>Chris’ Talk - <a href="https://www.youtube.com/watch?v=fkDhU-2NWJ8" rel="nofollow">https://www.youtube.com/watch?v=fkDhU-2NWJ8</a></p>

<p>1:58 - What are some of the high level advantages / disadvantages of Elixir, from your perspective?</p>

<p>Advantages: Elixir and Phoenix gives you rails-esque productivity/developer experience that scales. I think phoenix channels are a great example of this. Build a channel with complex real-time functionality and let it scale effortlessly. </p>

<p>Disadvantages: </p>

<ul>
<li>Hiring and onboarding, depending on your mindset, can be difficult. If you’re used to hiring for experience in  your stack, its just going to be more difficult. Lately we’ve started doing one-hour weekly knowledge shares that cover elixir basics and are closely tied to our usage of them. So, here’s a test case, and here are all of the test helpers that we have set up that will help you write that test. We also just sent a new Elixir dev to lonestar elixir </li>
</ul>

<p>3:59 - What do you use to host your Elixir app?</p>

<ul>
<li><p>Heroku </p></li>
<li><p>How do you deploy your application? </p>

<ul>
<li>Heroku-buildpack-elixir <a href="https://github.com/HashNuke/heroku-buildpack-elixir" rel="nofollow">https://github.com/HashNuke/heroku-buildpack-elixir</a> </li>
</ul></li>
</ul>

<p>4:44 - Are you able to get zero downtime deploys?</p>

<ul>
<li>As close as possible! We get that out of the box with heroku. When we deploy, heroku won’t point traffic to the new dyno until the app is healthy. We make extensive use of Phoenix channels over websockets, and our clients will reconnect automatically and transparently.<br></li>
</ul>

<p>5:10 - Do you cluster the application?</p>

<ul>
<li>Nope.<br></li>
</ul>

<p>5:52 - How does your Elixir App perform compared to others in your environment?</p>

<ul>
<li>I can’t really talk about numbers here, but Elixir is not at all our bottleneck. We don’t have other production applications </li>
</ul>

<p>6:25 - How are you solving background task processing?</p>

<ul>
<li>Quantum for cron jobs, genservers for everything else. We’re running a single elixir application that handles all synchronous and async processing<br></li>
</ul>

<p>7:07 - What libraries are you using?</p>

<ul>
<li>Phoenix </li>
<li>Phoenix_swagger for API documentation that integrates with controller tests <a href="https://github.com/xerions/phoenix_swagger" rel="nofollow">https://github.com/xerions/phoenix_swagger</a> </li>
<li>Ex_rated for rate limiting calls to our integrations <a href="https://github.com/grempe/ex_rated" rel="nofollow">https://github.com/grempe/ex_rated</a> </li>
<li>Timex and calendar for datetime support with timezones <a href="https://github.com/bitwalker/timex" rel="nofollow">https://github.com/bitwalker/timex</a> </li>
<li>A combination of httpotion and httpoison for HTTP clients, but im interested in trying Mint <a href="https://github.com/ericmj/mint" rel="nofollow">https://github.com/ericmj/mint</a><a href="https://github.com/appcues/mojito" rel="nofollow">https://github.com/appcues/mojito</a> </li>
<li>Bamboo for transactional emails, like order confirmations etc <a href="https://github.com/thoughtbot/bamboo" rel="nofollow">https://github.com/thoughtbot/bamboo</a> </li>
</ul>

<p>8:59 - 3rd Party Services (i.e. Email, Payment Processing, etc)</p>

<ul>
<li>Sendgrid for email, Google for geocoding, slack for some internal alerting of application health, LevelUp for payments. <a href="https://www.thelevelup.com/" rel="nofollow">https://www.thelevelup.com/</a> </li>
</ul>

<p>10:07 - Do you have a story where Elixir saved the day in production?</p>

<ul>
<li>Yes and no. So I could tell this story by explaining the issue we saw and the underlying cause at the same time, but I think it would be more fun to tell it like our team experienced it. </li>
<li>One day at lunch our application started going down. Lots of 500 errors. Red lights flashing. Panic ensuing. Lunch is our busiest time of day, so 1) we thought it was load related and 2) we really needed to fix it </li>
<li>None of our traditional resources (database, cpu, memory) were constrained and our integrations that were synchronous were fine.<br></li>
<li>Our logs were littered with errors from an analytics integration that ran asynchronously on genservers, but it didn’t seem related because we could see the error logs at times when our application was otherwise healthy. The team that used the analytics didn’t have a pressing need for them, and we deprioritized fixing the issue because the bug we were working on was so much more important (that’s foreshadowing). </li>
<li>I spent a little time looking at websockets, but I was easily able to match the load of the websocket portion of our application on my local machine with no degradations in performance (thanks, phoenix), so that was out. </li>
<li>At this point the issue was going on every day at lunch and I was getting annoyed at seeing the logs from the analytics integration when debugging, so I spent like 15 minutes finding and fixing the issue (a bad API key, basically) </li>
<li>Voila, issue gone. Time to grab some lunch. </li>
<li>We spent a while coming up with an explanation for this. Eventually we learned about max_restarts on a supervisor. By default, if a process crashes 3 times in 5 seconds, the process won’t be restarted again. So if another process (like the one handling a web request) tries to call that process that wasn’t restarted, the caller would crash, and we’d start to get 500 errors, customers couldn’t log in, mass confusion. </li>
<li>So there are a few takeaways from this story: For a while, elixir saved the day in production.<br>
    - A supervision tree prevented failures from the analytics process from affecting customers, until the scale of our failures exceeded the max_restart level.<br>
    - Our supervision tree needed some love though, clearly. 
    - Monitor your resources. CPU is a resource, but calls to another API are also a resource and can get unhealthy too.<br></li>
</ul>

<p>15:00 - Are you using any cool OTP features?</p>

<ul>
<li>GenServers, definitely. There’s lots we can do asynchronously especially in terms of our integrations. One process per store is a cool model that scales well and keeps issues isolated to a single store. </li>
</ul>

<p>15:50 - If you could give one tip to developers out there who are or may soon be running Elixir in production, what would it be?</p>

<ul>
<li>If you’re on a small team, Heroku or a similar provider might give you a lot of value in terms of infrastructure you can set up and forget.</li>
</ul>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Jay Ashe.</p><p>Links:</p><ul><li><a href="https://www.youtube.com/watch?v=fkDhU-2NWJ8" title="ElixirConf 2016 - Selling Food With Elixir by Chris Bell" rel="nofollow">ElixirConf 2016 - Selling Food With Elixir by Chris Bell</a></li><li><a href="https://github.com/HashNuke/heroku-buildpack-elixir" title="Heroku-buildpack-elixir" rel="nofollow">Heroku-buildpack-elixir</a></li><li><a href="https://github.com/xerions/phoenix_swagger" title="Phoenix Swagger" rel="nofollow">Phoenix Swagger</a></li><li><a href="https://github.com/grempe/ex_rated" title="Ex_rated" rel="nofollow">Ex_rated</a></li><li><a href="https://github.com/bitwalker/timex" title="Timex" rel="nofollow">Timex</a></li><li><a href="https://github.com/ericmj/mint" title="Mint" rel="nofollow">Mint</a></li><li><a href="https://github.com/appcues/mojito" title="Mojito" rel="nofollow">Mojito</a></li><li><a href="https://www.thelevelup.com/" title="LevelUp" rel="nofollow">LevelUp</a></li></ul>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Frank Hunleth - Elixir in Production</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/season-1-hunleth</link>
      <guid isPermaLink="false">ad538aa5-ad67-418b-b07f-0be38fff2f6b</guid>
      <pubDate>Thu, 28 Mar 2019 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/ad538aa5-ad67-418b-b07f-0be38fff2f6b.mp3" length="27639974" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>1</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>We talk with Frank Hunleth from the Nerves core team about their current and past Elixir projects and how they are deployed.</itunes:subtitle>
      <itunes:duration>28:47</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>We talk with Frank Hunleth from the Nerves core team about their current and past Elixir projects and how they are deployed.
Frank Hunleth - Nerves (https://nerves-project.org/)
Find Frank elsewhere online:
https://twitter.com/fhunleth
https://github.com/fhunleth
0:53    Frank intro
2:02    Give us a quick overview of the Elixir projects you have in production.
4:25    Why are you using Elixir in production?
8:00    What are some of the high level advantages / disadvantages of Elixir, from your perspective?
9:25    What hardware do you deploy to?
12:05   How do you get code to hardware after deployment?
13:47   How do you secure the code?
18:12   Do you cluster?
If so, how?
How does your Elixir App perform compared to others in your environment?
22:45   How does Elixir compare to other languages? 
26:15   More information about Nerves 
Learn more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) Special Guest: Frank Hunleth.
</description>
      <itunes:keywords>elixir, nerves, production</itunes:keywords>
      <content:encoded><![CDATA[
        <p>We talk with Frank Hunleth from the Nerves core team about their current and past Elixir projects and how they are deployed.</p>

<p>Frank Hunleth - <a href="https://nerves-project.org/" rel="nofollow">Nerves</a></p>

<p>Find Frank elsewhere online:<br>
<a href="https://twitter.com/fhunleth" rel="nofollow">https://twitter.com/fhunleth</a><br>
<a href="https://github.com/fhunleth" rel="nofollow">https://github.com/fhunleth</a></p>

<p>0:53    Frank intro<br>
2:02    Give us a quick overview of the Elixir projects you have in production.<br>
4:25    Why are you using Elixir in production?<br>
8:00    What are some of the high level advantages / disadvantages of Elixir, from your perspective?<br>
9:25    What hardware do you deploy to?<br>
12:05   How do you get code to hardware after deployment?<br>
13:47   How do you secure the code?<br>
18:12   Do you cluster?<br>
If so, how?<br>
How does your Elixir App perform compared to others in your environment?<br>
22:45   How does Elixir compare to other languages? <br>
26:15   More information about Nerves </p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Frank Hunleth.</p><p>Links:</p><ul><li><a href="https://www.grisp.org/" title="Grisp" rel="nofollow">Grisp</a></li><li><a href="https://github.com/grisp" title="Grisp GitHub" rel="nofollow">Grisp GitHub</a></li></ul>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>We talk with Frank Hunleth from the Nerves core team about their current and past Elixir projects and how they are deployed.</p>

<p>Frank Hunleth - <a href="https://nerves-project.org/" rel="nofollow">Nerves</a></p>

<p>Find Frank elsewhere online:<br>
<a href="https://twitter.com/fhunleth" rel="nofollow">https://twitter.com/fhunleth</a><br>
<a href="https://github.com/fhunleth" rel="nofollow">https://github.com/fhunleth</a></p>

<p>0:53    Frank intro<br>
2:02    Give us a quick overview of the Elixir projects you have in production.<br>
4:25    Why are you using Elixir in production?<br>
8:00    What are some of the high level advantages / disadvantages of Elixir, from your perspective?<br>
9:25    What hardware do you deploy to?<br>
12:05   How do you get code to hardware after deployment?<br>
13:47   How do you secure the code?<br>
18:12   Do you cluster?<br>
If so, how?<br>
How does your Elixir App perform compared to others in your environment?<br>
22:45   How does Elixir compare to other languages? <br>
26:15   More information about Nerves </p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Frank Hunleth.</p><p>Links:</p><ul><li><a href="https://www.grisp.org/" title="Grisp" rel="nofollow">Grisp</a></li><li><a href="https://github.com/grisp" title="Grisp GitHub" rel="nofollow">Grisp GitHub</a></li></ul>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Mark Ericksen - Elixir in Production</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/season-1-ericksen</link>
      <guid isPermaLink="false">4a5a2fb4-c1a0-437a-9001-9b981312ecab</guid>
      <pubDate>Thu, 21 Mar 2019 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/4a5a2fb4-c1a0-437a-9001-9b981312ecab.mp3" length="35121324" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>1</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>We talk with Mark Ericksen about their current and past Elixir projects and how they are deployed.</itunes:subtitle>
      <itunes:duration>36:34</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>We talk with Mark Ericksen from Elixir Mix about their current and past Elixir projects and how they are deployed.
Mark Ericksen - Elixir Mix (https://devchat.tv/elixir-mix/)
Find Mark elsewhere online:
https://twitter.com/brainlid
https://brainlid.org/
00:32 Intro
0:58 Mark intro
Developing a long time. C#, then Rails. Webforms were terrible. Rails is “Wow, this is how web development should be… I moved across the country to work with this technology”
The Rails Community is strong. Dave Thomas got Mark into Elixir
2:48     What Elixir projects do you have in production?
A Rails app and a number of Elixir Micro-liths
4:29     Why do you use Elixir 
6:45    Trends in moving from Ruby and Rails to Elixir
Ruby Syntax
Pattern Matching
Concurrency primitives
Fault Tolerance and a functional paradigm
Erlang/OTP
6:48    Comparing Elixir community to Ruby community to C# community
8:27     Any disadvantages to using Elixir?
Building releases. Configuring releases.
mix.release
10:13    Where are you hosting these bad boys?
AWS
Kubernetes in Production. So Fresh.
Docker and Distillery 2.0 Releases
Yaml files and Bash Scripts
Makefiles
10:53    What else are you using besides docker
12:36    Helm and Ksonnet. 
13:55   Deploys
14:39   Clustering
17:50   How do your Elixir apps compare to the Ruby apps?
Big Elixir Apps
20:00    How Mark handles background jobs
Easy to write yourself with BEAM primitives
21:27    Libraries - Quantum, Bamboo, exmachina, prometheusex via Eric’s influence
23:29   Third party integrations. Major ones were easy. Banks were bad.
Literally had to FTP files. Had to use java to write xml spreadsheets. The horror.
25:26     Has Elixir ever saved the day for you in Production?
29:42: Cool OTP features
30:57 Tips to developers
35:36 Where to find Mark
Learn more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) Special Guest: Mark Ericksen.
</description>
      <itunes:keywords>elixir, phoenix, production</itunes:keywords>
      <content:encoded><![CDATA[
        <p>We talk with Mark Ericksen from Elixir Mix about their current and past Elixir projects and how they are deployed.</p>

<p>Mark Ericksen - <a href="https://devchat.tv/elixir-mix/" rel="nofollow">Elixir Mix</a></p>

<p>Find Mark elsewhere online:<br>
<a href="https://twitter.com/brainlid" rel="nofollow">https://twitter.com/brainlid</a><br>
<a href="https://brainlid.org/" rel="nofollow">https://brainlid.org/</a></p>

<p>00:32 Intro<br>
0:58 Mark intro<br>
Developing a long time. C#, then Rails. Webforms were terrible. Rails is “Wow, this is how web development should be… I moved across the country to work with this technology”<br>
The Rails Community is strong. Dave Thomas got Mark into Elixir</p>

<p>2:48     What Elixir projects do you have in production?<br>
A Rails app and a number of Elixir Micro-liths</p>

<p>4:29     Why do you use Elixir </p>

<p>6:45    Trends in moving from Ruby and Rails to Elixir<br>
Ruby Syntax<br>
Pattern Matching<br>
Concurrency primitives<br>
Fault Tolerance and a functional paradigm<br>
Erlang/OTP</p>

<p>6:48    Comparing Elixir community to Ruby community to C# community</p>

<p>8:27     Any disadvantages to using Elixir?<br>
Building releases. Configuring releases.<br>
mix.release</p>

<p>10:13    Where are you hosting these bad boys?<br>
AWS<br>
Kubernetes in Production. So Fresh.<br>
Docker and Distillery 2.0 Releases<br>
Yaml files and Bash Scripts<br>
Makefiles</p>

<p>10:53    What else are you using besides docker</p>

<p>12:36    Helm and Ksonnet. </p>

<p>13:55   Deploys</p>

<p>14:39   Clustering</p>

<p>17:50   How do your Elixir apps compare to the Ruby apps?<br>
Big Elixir Apps</p>

<p>20:00    How Mark handles background jobs<br>
Easy to write yourself with BEAM primitives</p>

<p>21:27    Libraries - Quantum, Bamboo, ex_machina, prometheus_ex via Eric’s influence</p>

<p>23:29   Third party integrations. Major ones were easy. Banks were bad.<br>
Literally had to FTP files. Had to use java to write xml spreadsheets. The horror.</p>

<p>25:26     Has Elixir ever saved the day for you in Production?</p>

<p>29:42: Cool OTP features<br>
30:57 Tips to developers<br>
35:36 Where to find Mark</p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Mark Ericksen.</p><p>Links:</p><ul><li><a href="https://github.com/bitwalker/libcluster" title="libcluster" rel="nofollow">libcluster</a></li><li><a href="https://github.com/akira/exq" title="Exq" rel="nofollow">Exq</a></li><li><a href="https://absinthe-graphql.org/" title="absinthe" rel="nofollow">absinthe</a></li><li><a href="https://github.com/absinthe-graphql/dataloader" title="dataloader" rel="nofollow">dataloader</a></li></ul>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>We talk with Mark Ericksen from Elixir Mix about their current and past Elixir projects and how they are deployed.</p>

<p>Mark Ericksen - <a href="https://devchat.tv/elixir-mix/" rel="nofollow">Elixir Mix</a></p>

<p>Find Mark elsewhere online:<br>
<a href="https://twitter.com/brainlid" rel="nofollow">https://twitter.com/brainlid</a><br>
<a href="https://brainlid.org/" rel="nofollow">https://brainlid.org/</a></p>

<p>00:32 Intro<br>
0:58 Mark intro<br>
Developing a long time. C#, then Rails. Webforms were terrible. Rails is “Wow, this is how web development should be… I moved across the country to work with this technology”<br>
The Rails Community is strong. Dave Thomas got Mark into Elixir</p>

<p>2:48     What Elixir projects do you have in production?<br>
A Rails app and a number of Elixir Micro-liths</p>

<p>4:29     Why do you use Elixir </p>

<p>6:45    Trends in moving from Ruby and Rails to Elixir<br>
Ruby Syntax<br>
Pattern Matching<br>
Concurrency primitives<br>
Fault Tolerance and a functional paradigm<br>
Erlang/OTP</p>

<p>6:48    Comparing Elixir community to Ruby community to C# community</p>

<p>8:27     Any disadvantages to using Elixir?<br>
Building releases. Configuring releases.<br>
mix.release</p>

<p>10:13    Where are you hosting these bad boys?<br>
AWS<br>
Kubernetes in Production. So Fresh.<br>
Docker and Distillery 2.0 Releases<br>
Yaml files and Bash Scripts<br>
Makefiles</p>

<p>10:53    What else are you using besides docker</p>

<p>12:36    Helm and Ksonnet. </p>

<p>13:55   Deploys</p>

<p>14:39   Clustering</p>

<p>17:50   How do your Elixir apps compare to the Ruby apps?<br>
Big Elixir Apps</p>

<p>20:00    How Mark handles background jobs<br>
Easy to write yourself with BEAM primitives</p>

<p>21:27    Libraries - Quantum, Bamboo, ex_machina, prometheus_ex via Eric’s influence</p>

<p>23:29   Third party integrations. Major ones were easy. Banks were bad.<br>
Literally had to FTP files. Had to use java to write xml spreadsheets. The horror.</p>

<p>25:26     Has Elixir ever saved the day for you in Production?</p>

<p>29:42: Cool OTP features<br>
30:57 Tips to developers<br>
35:36 Where to find Mark</p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Mark Ericksen.</p><p>Links:</p><ul><li><a href="https://github.com/bitwalker/libcluster" title="libcluster" rel="nofollow">libcluster</a></li><li><a href="https://github.com/akira/exq" title="Exq" rel="nofollow">Exq</a></li><li><a href="https://absinthe-graphql.org/" title="absinthe" rel="nofollow">absinthe</a></li><li><a href="https://github.com/absinthe-graphql/dataloader" title="dataloader" rel="nofollow">dataloader</a></li></ul>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Brooklyn Zelenka from SPADE Co. - Elixir in Production</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/season-1-zelenka</link>
      <guid isPermaLink="false">0cef68be-a246-4ba6-bdc7-a6835c05fe72</guid>
      <pubDate>Thu, 14 Mar 2019 06:00:00 -0400</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/0cef68be-a246-4ba6-bdc7-a6835c05fe72.mp3" length="26665835" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>1</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>We talk with Brooklyn Zelenka from SPADE Co. about their current and past Elixir projects and how they are deployed.</itunes:subtitle>
      <itunes:duration>27:46</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>We talk with Brooklyn Zelenka from SPADE Co. about their current and past Elixir projects and how they are deployed.
Brooklyn Zelenka - SPADE Co. (https://spade.builders/)
Find Brooklyn elsewhere online:
https://twitter.com/expede
https://github.com/expede
1:08    - Brooklyn’s Background
Brooklyn's background and experience with Elixir is deep. Huge open source contributor. 
Got started in Elixir just after Phoenix got to 1.0. 
1:53     - Worked on several Elixir projects in production.
2:43     - Why she got into Elixir.
- Real Time
- More performant than Rails.
- Great documentation
- Industrial-grade
4:38     - When you wouldn't use Elixir. 
Easy to get stakeholder buy-in. Just point to WhatsApp.
Elixir is made for 2019
CLI tools
Repl-driven development 
TDD tools built in by default 
All the best practices we have today are built in.
7:14     - Where has Brooklyn hosted her apps?
Heroku for POC's. AWS for production. Dockerized because &quot;kubernetes is the new hotness&quot;
9:40    - Do you do any clustering?
Load balanced above. AWS load balancing is very standard. They're well understood and have a nice developer experience.
10:29   Are you able to get any zero downtime deploys?
Zero downtime deploys. Awesome but impractical. Rolling deploys are easier and usually more appropriate. Some requirements make it valuable.
Erlang error states. Exceptional. Allows you to build for the happy path. Don't worry about error handling all the time.
Witchcraft and dark magic. Monads.
Poke around the standard library.
12:50    - How does Elixir compare to Rails in terms of response times, and other aspects?
15:32    - What libraries do you use and what have  you built?
22:41    - Any cool features of OTP you are using? 
25:36   - One tip to developers new to Elixir
Build up a peer-to-peer cli chat from scratch in one GenServer.
Find her at @expede everywhere on the internet.
Learn more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8)
 Special Guest: Brooklyn Zelenka.
</description>
      <itunes:keywords>elixir, phoenix, spade co</itunes:keywords>
      <content:encoded><![CDATA[
        <p>We talk with Brooklyn Zelenka from SPADE Co. about their current and past Elixir projects and how they are deployed.</p>

<p>Brooklyn Zelenka - <a href="https://spade.builders/" rel="nofollow">SPADE Co.</a></p>

<p>Find Brooklyn elsewhere online:<br>
<a href="https://twitter.com/expede" rel="nofollow">https://twitter.com/expede</a><br>
<a href="https://github.com/expede" rel="nofollow">https://github.com/expede</a></p>

<p>1:08    - Brooklyn’s Background</p>

<p>Brooklyn&#39;s background and experience with Elixir is deep. Huge open source contributor. <br>
Got started in Elixir just after Phoenix got to 1.0. </p>

<p>1:53     - Worked on several Elixir projects in production.</p>

<p>2:43     - Why she got into Elixir.</p>

<ul>
<li>Real Time</li>
<li>More performant than Rails.</li>
<li>Great documentation</li>
<li>Industrial-grade</li>
</ul>

<p>4:38     - When you wouldn&#39;t use Elixir. </p>

<p>Easy to get stakeholder buy-in. Just point to WhatsApp.</p>

<p>Elixir is made for 2019<br>
CLI tools<br>
Repl-driven development <br>
TDD tools built in by default </p>

<p>All the best practices we have today are built in.</p>

<p>7:14     - Where has Brooklyn hosted her apps?</p>

<p>Heroku for POC&#39;s. AWS for production. Dockerized because &quot;kubernetes is the new hotness&quot;</p>

<p>9:40    - Do you do any clustering?</p>

<p>Load balanced above. AWS load balancing is very standard. They&#39;re well understood and have a nice developer experience.</p>

<p>10:29   Are you able to get any zero downtime deploys?<br>
Zero downtime deploys. Awesome but impractical. Rolling deploys are easier and usually more appropriate. Some requirements make it valuable.</p>

<p>Erlang error states. Exceptional. Allows you to build for the happy path. Don&#39;t worry about error handling all the time.</p>

<p>Witchcraft and dark magic. Monads.</p>

<p>Poke around the standard library.</p>

<p>12:50    - How does Elixir compare to Rails in terms of response times, and other aspects?</p>

<p>15:32    - What libraries do you use and what have  you built?</p>

<p>22:41    - Any cool features of OTP you are using? </p>

<p>25:36   - One tip to developers new to Elixir</p>

<p>Build up a peer-to-peer cli chat from scratch in one GenServer.</p>

<p>Find her at @expede everywhere on the internet.</p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Brooklyn Zelenka.</p><p>Links:</p><ul><li><a href="https://github.com/HashNuke/heroku-buildpack-elixir" title="Heroku Elixir Buildpack" rel="nofollow">Heroku Elixir Buildpack</a></li><li><a href="https://github.com/gjaldon/heroku-buildpack-phoenix-static" title="Heroku Phoenix Static Buildpack" rel="nofollow">Heroku Phoenix Static Buildpack</a></li><li><a href="https://github.com/expede/exceptional" title="Exceptional" rel="nofollow">Exceptional</a></li><li><a href="https://github.com/expede/witchcraft" title="Witchcraft" rel="nofollow">Witchcraft</a></li><li><a href="https://github.com/expede/quick_chat" title="QuickChat" rel="nofollow">QuickChat</a></li></ul>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>We talk with Brooklyn Zelenka from SPADE Co. about their current and past Elixir projects and how they are deployed.</p>

<p>Brooklyn Zelenka - <a href="https://spade.builders/" rel="nofollow">SPADE Co.</a></p>

<p>Find Brooklyn elsewhere online:<br>
<a href="https://twitter.com/expede" rel="nofollow">https://twitter.com/expede</a><br>
<a href="https://github.com/expede" rel="nofollow">https://github.com/expede</a></p>

<p>1:08    - Brooklyn’s Background</p>

<p>Brooklyn&#39;s background and experience with Elixir is deep. Huge open source contributor. <br>
Got started in Elixir just after Phoenix got to 1.0. </p>

<p>1:53     - Worked on several Elixir projects in production.</p>

<p>2:43     - Why she got into Elixir.</p>

<ul>
<li>Real Time</li>
<li>More performant than Rails.</li>
<li>Great documentation</li>
<li>Industrial-grade</li>
</ul>

<p>4:38     - When you wouldn&#39;t use Elixir. </p>

<p>Easy to get stakeholder buy-in. Just point to WhatsApp.</p>

<p>Elixir is made for 2019<br>
CLI tools<br>
Repl-driven development <br>
TDD tools built in by default </p>

<p>All the best practices we have today are built in.</p>

<p>7:14     - Where has Brooklyn hosted her apps?</p>

<p>Heroku for POC&#39;s. AWS for production. Dockerized because &quot;kubernetes is the new hotness&quot;</p>

<p>9:40    - Do you do any clustering?</p>

<p>Load balanced above. AWS load balancing is very standard. They&#39;re well understood and have a nice developer experience.</p>

<p>10:29   Are you able to get any zero downtime deploys?<br>
Zero downtime deploys. Awesome but impractical. Rolling deploys are easier and usually more appropriate. Some requirements make it valuable.</p>

<p>Erlang error states. Exceptional. Allows you to build for the happy path. Don&#39;t worry about error handling all the time.</p>

<p>Witchcraft and dark magic. Monads.</p>

<p>Poke around the standard library.</p>

<p>12:50    - How does Elixir compare to Rails in terms of response times, and other aspects?</p>

<p>15:32    - What libraries do you use and what have  you built?</p>

<p>22:41    - Any cool features of OTP you are using? </p>

<p>25:36   - One tip to developers new to Elixir</p>

<p>Build up a peer-to-peer cli chat from scratch in one GenServer.</p>

<p>Find her at @expede everywhere on the internet.</p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Brooklyn Zelenka.</p><p>Links:</p><ul><li><a href="https://github.com/HashNuke/heroku-buildpack-elixir" title="Heroku Elixir Buildpack" rel="nofollow">Heroku Elixir Buildpack</a></li><li><a href="https://github.com/gjaldon/heroku-buildpack-phoenix-static" title="Heroku Phoenix Static Buildpack" rel="nofollow">Heroku Phoenix Static Buildpack</a></li><li><a href="https://github.com/expede/exceptional" title="Exceptional" rel="nofollow">Exceptional</a></li><li><a href="https://github.com/expede/witchcraft" title="Witchcraft" rel="nofollow">Witchcraft</a></li><li><a href="https://github.com/expede/quick_chat" title="QuickChat" rel="nofollow">QuickChat</a></li></ul>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Todd Resudek from Weedmaps - Elixir in Production</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/season-1-weedmaps</link>
      <guid isPermaLink="false">d949b81e-39c5-4474-8605-89062b8dc543</guid>
      <pubDate>Thu, 07 Mar 2019 06:00:00 -0500</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/d949b81e-39c5-4474-8605-89062b8dc543.mp3" length="24982914" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>1</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>We talk with Todd Resudek from Weedmaps about their current Elixir projects and how they are deployed.</itunes:subtitle>
      <itunes:duration>26:01</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>We talk with Todd Resudek from Weedmaps about their current Elixir projects and how they are deployed.
Todd Resudek - Weedmaps (https://weedmaps.com/)
Find Todd elsewhere online:
https://twitter.com/sprsmpl
https://github.com/supersimple
00:00 - Intro
01:06 - Tom introduces himself
02:54 - What is Weedmaps?
04:33 - Overview of the Elixir projects you have in production.
06:25 - Why are you using Elixir in production?
07:21 - Advantages / disadvantages of Elixir
10:37   - What do you use to host your Elixir app?
10:50 - How do you deploy your application?
11:22 - Are you able to get zero downtime deploys? 
12:00 - Do you cluster the application? 
13:00 - How does your Elixir App perform compared to others in your environment?
14:15 - How are you solving background task processing?
16:40 - What libraries are you using?
21:09 - 3rd Party Services
23:56 - Do you have a story where Elixir saved the day in production?
24:22 - Are you using any cool OTP features?
24:39 - Tip to developers
25:12 - Where you can find him
25:32 - Outro
Learn more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) Special Guest: Todd Resudek.
</description>
      <itunes:keywords>elixir, phoenix, weedmaps</itunes:keywords>
      <content:encoded><![CDATA[
        <p>We talk with Todd Resudek from Weedmaps about their current Elixir projects and how they are deployed.</p>

<p>Todd Resudek - <a href="https://weedmaps.com/" rel="nofollow">Weedmaps</a></p>

<p>Find Todd elsewhere online:<br>
<a href="https://twitter.com/sprsmpl" rel="nofollow">https://twitter.com/sprsmpl</a><br>
<a href="https://github.com/supersimple" rel="nofollow">https://github.com/supersimple</a></p>

<p>00:00 - Intro<br>
01:06 - Tom introduces himself<br>
02:54 - What is Weedmaps?<br>
04:33 - Overview of the Elixir projects you have in production.<br>
06:25 - Why are you using Elixir in production?<br>
07:21 - Advantages / disadvantages of Elixir<br>
10:37   - What do you use to host your Elixir app?<br>
10:50 - How do you deploy your application?<br>
11:22 - Are you able to get zero downtime deploys? <br>
12:00 - Do you cluster the application? <br>
13:00 - How does your Elixir App perform compared to others in your environment?<br>
14:15 - How are you solving background task processing?<br>
16:40 - What libraries are you using?<br>
21:09 - 3rd Party Services<br>
23:56 - Do you have a story where Elixir saved the day in production?<br>
24:22 - Are you using any cool OTP features?<br>
24:39 - Tip to developers<br>
25:12 - Where you can find him<br>
25:32 - Outro</p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Todd Resudek.</p><p>Links:</p><ul><li><a href="https://www.youtube.com/watch?v=cbCnTKVLuu8" title="A Deep Dive into Hex - ElixirConf talk" rel="nofollow">A Deep Dive into Hex - ElixirConf talk</a></li><li><a href="https://github.com/rrrene/credo" title="Credo" rel="nofollow">Credo</a></li><li><a href="https://github.com/jeremyjh/dialyxir" title="Dialyxir" rel="nofollow">Dialyxir</a></li><li><a href="https://github.com/swoosh/swoosh" title="Swoosh" rel="nofollow">Swoosh</a></li></ul>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>We talk with Todd Resudek from Weedmaps about their current Elixir projects and how they are deployed.</p>

<p>Todd Resudek - <a href="https://weedmaps.com/" rel="nofollow">Weedmaps</a></p>

<p>Find Todd elsewhere online:<br>
<a href="https://twitter.com/sprsmpl" rel="nofollow">https://twitter.com/sprsmpl</a><br>
<a href="https://github.com/supersimple" rel="nofollow">https://github.com/supersimple</a></p>

<p>00:00 - Intro<br>
01:06 - Tom introduces himself<br>
02:54 - What is Weedmaps?<br>
04:33 - Overview of the Elixir projects you have in production.<br>
06:25 - Why are you using Elixir in production?<br>
07:21 - Advantages / disadvantages of Elixir<br>
10:37   - What do you use to host your Elixir app?<br>
10:50 - How do you deploy your application?<br>
11:22 - Are you able to get zero downtime deploys? <br>
12:00 - Do you cluster the application? <br>
13:00 - How does your Elixir App perform compared to others in your environment?<br>
14:15 - How are you solving background task processing?<br>
16:40 - What libraries are you using?<br>
21:09 - 3rd Party Services<br>
23:56 - Do you have a story where Elixir saved the day in production?<br>
24:22 - Are you using any cool OTP features?<br>
24:39 - Tip to developers<br>
25:12 - Where you can find him<br>
25:32 - Outro</p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Todd Resudek.</p><p>Links:</p><ul><li><a href="https://www.youtube.com/watch?v=cbCnTKVLuu8" title="A Deep Dive into Hex - ElixirConf talk" rel="nofollow">A Deep Dive into Hex - ElixirConf talk</a></li><li><a href="https://github.com/rrrene/credo" title="Credo" rel="nofollow">Credo</a></li><li><a href="https://github.com/jeremyjh/dialyxir" title="Dialyxir" rel="nofollow">Dialyxir</a></li><li><a href="https://github.com/swoosh/swoosh" title="Swoosh" rel="nofollow">Swoosh</a></li></ul>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Lonestar ElixirConf 2019 Lunchisode</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/special-lonestar-elixir-2019</link>
      <guid isPermaLink="false">4646981d-f12c-479e-a5cc-7629570962ed</guid>
      <pubDate>Wed, 06 Mar 2019 03:15:00 -0500</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/4646981d-f12c-479e-a5cc-7629570962ed.mp3" length="47467128" type="audio/mp3"/>
      <itunes:episodeType>bonus</itunes:episodeType>
      <itunes:season>1</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>We sat down with numerous developers, including José Valim and Chris McCord, during the Saturday lunch at Lonestar ElixirConf 2019. Hear what they had to say about the state of Elixir!</itunes:subtitle>
      <itunes:duration>49:26</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>We sat down with numerous developers, including José Valim and Chris McCord, during the Saturday lunch at Lonestar ElixirConf 2019 (https://lonestarelixir.com/2019/). Hear what they had to say about the state of Elixir!
Guests:
José Valim - Creator of Elixir (https://elixir-lang.org/)
Chris McCord - Creator of Phoenix (https://phoenixframework.org/)
Paul Schoenfelder - Creator of Distillery (https://github.com/bitwalker/distillery), Timex (https://github.com/bitwalker/timex), Libcluster (https://github.com/bitwalker/libcluster), and many others
Chris Keathley - Host of Elixir Outlaws (https://elixiroutlaws.com/), developer at Bleacher Report (https://bleacherreport.com/)
Amos King - Host of Elixir Outlaws (https://elixiroutlaws.com/)
Jim Freeze - Organizer of ElixirConf (https://elixirconf.com/), ElixirConf EU (http://www.elixirconf.eu/), and others
Susumu Yamazaki - Creator of Hastega (https://github.com/zeam-vm/hastega)
Brian Cardarella - CEO of Dockyard (https://dockyard.com/)
Osa Gaius - Engineer at Mailchimp (https://mailchimp.com/)
Spectating:
Bruce Tate and Ben Marx
00:00   - Intro
01:47   - LoneStar begins
02:03   - Panelists introduce themselves
09:15   - Where is Elixir going?
10:14   - Releases
19:04   - The issue with hype
26:30   - Osa Intro
29:00 - Define lists
40:00 - How can Elixir displace Java?
Learn more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) 
</description>
      <itunes:keywords>elixir, phoenix</itunes:keywords>
      <content:encoded><![CDATA[
        <p>We sat down with numerous developers, including José Valim and Chris McCord, during the Saturday lunch at <a href="https://lonestarelixir.com/2019/" rel="nofollow">Lonestar ElixirConf 2019</a>. Hear what they had to say about the state of Elixir!</p>

<p>Guests:<br>
José Valim - Creator of <a href="https://elixir-lang.org/" rel="nofollow">Elixir</a><br>
Chris McCord - Creator of <a href="https://phoenixframework.org/" rel="nofollow">Phoenix</a><br>
Paul Schoenfelder - Creator of <a href="https://github.com/bitwalker/distillery" rel="nofollow">Distillery</a>, <a href="https://github.com/bitwalker/timex" rel="nofollow">Timex</a>, <a href="https://github.com/bitwalker/libcluster" rel="nofollow">Libcluster</a>, and many others<br>
Chris Keathley - Host of <a href="https://elixiroutlaws.com/" rel="nofollow">Elixir Outlaws</a>, developer at <a href="https://bleacherreport.com/" rel="nofollow">Bleacher Report</a><br>
Amos King - Host of <a href="https://elixiroutlaws.com/" rel="nofollow">Elixir Outlaws</a><br>
Jim Freeze - Organizer of <a href="https://elixirconf.com/" rel="nofollow">ElixirConf</a>, <a href="http://www.elixirconf.eu/" rel="nofollow">ElixirConf EU</a>, and others<br>
Susumu Yamazaki - Creator of <a href="https://github.com/zeam-vm/hastega" rel="nofollow">Hastega</a><br>
Brian Cardarella - CEO of <a href="https://dockyard.com/" rel="nofollow">Dockyard</a><br>
Osa Gaius - Engineer at <a href="https://mailchimp.com/" rel="nofollow">Mailchimp</a></p>

<p>Spectating:<br>
Bruce Tate and Ben Marx</p>

<p>00:00   - Intro<br>
01:47   - LoneStar begins<br>
02:03   - Panelists introduce themselves<br>
09:15   - Where is Elixir going?<br>
10:14   - Releases<br>
19:04   - The issue with hype<br>
26:30   - Osa Intro<br>
29:00 - Define lists<br>
40:00 - How can Elixir displace Java?</p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>We sat down with numerous developers, including José Valim and Chris McCord, during the Saturday lunch at <a href="https://lonestarelixir.com/2019/" rel="nofollow">Lonestar ElixirConf 2019</a>. Hear what they had to say about the state of Elixir!</p>

<p>Guests:<br>
José Valim - Creator of <a href="https://elixir-lang.org/" rel="nofollow">Elixir</a><br>
Chris McCord - Creator of <a href="https://phoenixframework.org/" rel="nofollow">Phoenix</a><br>
Paul Schoenfelder - Creator of <a href="https://github.com/bitwalker/distillery" rel="nofollow">Distillery</a>, <a href="https://github.com/bitwalker/timex" rel="nofollow">Timex</a>, <a href="https://github.com/bitwalker/libcluster" rel="nofollow">Libcluster</a>, and many others<br>
Chris Keathley - Host of <a href="https://elixiroutlaws.com/" rel="nofollow">Elixir Outlaws</a>, developer at <a href="https://bleacherreport.com/" rel="nofollow">Bleacher Report</a><br>
Amos King - Host of <a href="https://elixiroutlaws.com/" rel="nofollow">Elixir Outlaws</a><br>
Jim Freeze - Organizer of <a href="https://elixirconf.com/" rel="nofollow">ElixirConf</a>, <a href="http://www.elixirconf.eu/" rel="nofollow">ElixirConf EU</a>, and others<br>
Susumu Yamazaki - Creator of <a href="https://github.com/zeam-vm/hastega" rel="nofollow">Hastega</a><br>
Brian Cardarella - CEO of <a href="https://dockyard.com/" rel="nofollow">Dockyard</a><br>
Osa Gaius - Engineer at <a href="https://mailchimp.com/" rel="nofollow">Mailchimp</a></p>

<p>Spectating:<br>
Bruce Tate and Ben Marx</p>

<p>00:00   - Intro<br>
01:47   - LoneStar begins<br>
02:03   - Panelists introduce themselves<br>
09:15   - Where is Elixir going?<br>
10:14   - Releases<br>
19:04   - The issue with hype<br>
26:30   - Osa Intro<br>
29:00 - Define lists<br>
40:00 - How can Elixir displace Java?</p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Ryan Billingsley from ClusterTruck - Elixir in Production</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/season-1-clustertruck</link>
      <guid isPermaLink="false">9b17b0c6-6e66-4e77-ae1f-9b3e2db6a35b</guid>
      <pubDate>Thu, 28 Feb 2019 06:15:00 -0500</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/9b17b0c6-6e66-4e77-ae1f-9b3e2db6a35b.mp3" length="31683548" type="audio/mpeg"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>1</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>We talk with Ryan Billingsley from ClusterTruck about their current Elixir projects and how they are deployed.</itunes:subtitle>
      <itunes:duration>32:34</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>We talk with Ryan Billingsley from ClusterTruck about their current Elixir projects and how they are deployed.
Ryan Billingsley - ClusterTruck (https://www.clustertruck.com/)
Find Ryan elsewhere online:
https://twitter.com/ryanbillingsley
https://horriblenight.com/
00:00 - Fade In
00:50 - Ryan introduces us to ClusterTruck.
02:00 - How did Ryan get into Elixir?
03:12 - Where does the name ClusterTruck come from?
04:17 - Tell us about the projects you have in production.
05:50 - Why are you using Elixir in these projects.
08:11 - Disadvantages of using Elixir
09:22 - Comparing Elixir with Ruby, Node, Go.
11:38 - Where is ClusterTruck hosting their applications?
15:03 - Kubernetes?
16:03 - Zero Downtime Deployments?
16:42 - Do you do any clustering?
18:06 - How does Elixir perform compared to other project environments you’ve worked in?
19:52 - How are you solving background task processing?
21:09 - Other libraries?
23:34 - Other third party integrations?
25:46 - Is there a time Elixir has saved the day in Production?
27:47 - Cool OTP Features!
29:45 - Tips to devs thinking about running Elixir in Production.
31:17 - Outro
Learn more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) Special Guest: Ryan Billingsley.
</description>
      <itunes:keywords>elixir, phoenix, clustertruck</itunes:keywords>
      <content:encoded><![CDATA[
        <p>We talk with Ryan Billingsley from ClusterTruck about their current Elixir projects and how they are deployed.</p>

<p>Ryan Billingsley - <a href="https://www.clustertruck.com/" rel="nofollow">ClusterTruck</a></p>

<p>Find Ryan elsewhere online:<br>
<a href="https://twitter.com/ryanbillingsley" rel="nofollow">https://twitter.com/ryanbillingsley</a><br>
<a href="https://horriblenight.com/" rel="nofollow">https://horriblenight.com/</a></p>

<p>00:00 - Fade In<br>
00:50 - Ryan introduces us to ClusterTruck.<br>
02:00 - How did Ryan get into Elixir?<br>
03:12 - Where does the name ClusterTruck come from?<br>
04:17 - Tell us about the projects you have in production.<br>
05:50 - Why are you using Elixir in these projects.<br>
08:11 - Disadvantages of using Elixir<br>
09:22 - Comparing Elixir with Ruby, Node, Go.<br>
11:38 - Where is ClusterTruck hosting their applications?<br>
15:03 - Kubernetes?<br>
16:03 - Zero Downtime Deployments?<br>
16:42 - Do you do any clustering?<br>
18:06 - How does Elixir perform compared to other project environments you’ve worked in?<br>
19:52 - How are you solving background task processing?<br>
21:09 - Other libraries?<br>
23:34 - Other third party integrations?<br>
25:46 - Is there a time Elixir has saved the day in Production?<br>
27:47 - Cool OTP Features!<br>
29:45 - Tips to devs thinking about running Elixir in Production.<br>
31:17 - Outro</p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Ryan Billingsley.</p><p>Links:</p><ul><li><a href="https://pragprog.com/book/elixir16/programming-elixir-1-6" title="Programming Elixir" rel="nofollow">Programming Elixir</a></li><li><a href="https://docs.saltstack.com/en/latest/" title="Salt Stack" rel="nofollow">Salt Stack</a></li><li><a href="https://github.com/bitwalker/swarm" title="Swarm" rel="nofollow">Swarm</a></li><li><a href="https://github.com/zorbash/opus" title="Opus" rel="nofollow">Opus</a></li><li><a href="https://hexdocs.pm/elixir/master/GenServer.html#c:handle_continue/2" title="handle_continue" rel="nofollow">handle_continue</a></li></ul>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>We talk with Ryan Billingsley from ClusterTruck about their current Elixir projects and how they are deployed.</p>

<p>Ryan Billingsley - <a href="https://www.clustertruck.com/" rel="nofollow">ClusterTruck</a></p>

<p>Find Ryan elsewhere online:<br>
<a href="https://twitter.com/ryanbillingsley" rel="nofollow">https://twitter.com/ryanbillingsley</a><br>
<a href="https://horriblenight.com/" rel="nofollow">https://horriblenight.com/</a></p>

<p>00:00 - Fade In<br>
00:50 - Ryan introduces us to ClusterTruck.<br>
02:00 - How did Ryan get into Elixir?<br>
03:12 - Where does the name ClusterTruck come from?<br>
04:17 - Tell us about the projects you have in production.<br>
05:50 - Why are you using Elixir in these projects.<br>
08:11 - Disadvantages of using Elixir<br>
09:22 - Comparing Elixir with Ruby, Node, Go.<br>
11:38 - Where is ClusterTruck hosting their applications?<br>
15:03 - Kubernetes?<br>
16:03 - Zero Downtime Deployments?<br>
16:42 - Do you do any clustering?<br>
18:06 - How does Elixir perform compared to other project environments you’ve worked in?<br>
19:52 - How are you solving background task processing?<br>
21:09 - Other libraries?<br>
23:34 - Other third party integrations?<br>
25:46 - Is there a time Elixir has saved the day in Production?<br>
27:47 - Cool OTP Features!<br>
29:45 - Tips to devs thinking about running Elixir in Production.<br>
31:17 - Outro</p>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Ryan Billingsley.</p><p>Links:</p><ul><li><a href="https://pragprog.com/book/elixir16/programming-elixir-1-6" title="Programming Elixir" rel="nofollow">Programming Elixir</a></li><li><a href="https://docs.saltstack.com/en/latest/" title="Salt Stack" rel="nofollow">Salt Stack</a></li><li><a href="https://github.com/bitwalker/swarm" title="Swarm" rel="nofollow">Swarm</a></li><li><a href="https://github.com/zorbash/opus" title="Opus" rel="nofollow">Opus</a></li><li><a href="https://hexdocs.pm/elixir/master/GenServer.html#c:handle_continue/2" title="handle_continue" rel="nofollow">handle_continue</a></li></ul>
      ]]></itunes:summary>
    </item>
    
    <item>
      <title>Dan Ivovich from SmartLogic - Elixir in Production</title>
      <link>https://smartlogic.io/podcast/elixir-wizards/season-1-smartlogic</link>
      <guid isPermaLink="false">f71af757-ce4c-44a0-8e78-5766711fd7d4</guid>
      <pubDate>Thu, 28 Feb 2019 06:00:00 -0500</pubDate>
      <author>SmartLogic LLC</author>
      <enclosure url="https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/f71af757-ce4c-44a0-8e78-5766711fd7d4.mp3" length="27340492" type="audio/mp3"/>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:season>1</itunes:season>
      <itunes:author>SmartLogic LLC</itunes:author>
      <itunes:subtitle>We talk with developers from here at SmartLogic about our current practices on deploying Elixir and Phoenix in production.</itunes:subtitle>
      <itunes:duration>28:28</itunes:duration>
      <itunes:explicit>no</itunes:explicit>
      <itunes:image href="https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2" />
      <description>We talk with developers from the team here at SmartLogic about our current practices on deploying Elixir and Phoenix in production.
Dan Ivovich - Director of Development Operations @ SmartLogic
Learn more about how SmartLogic uses Phoenix and Elixir. (https://smartlogic.io/phoenix-and-elixir)
00:00 - Fade In
00:30 - Introductions to Eric, Dan and SmartLogic
Dan Ivovich - Director of Development Operations @ SmartLogic
Eric Oestrich - Developer, Elixir Lead @ SmartLogic
Justus Eapen - Full stack developer @ SmartLogic
Introduced to Elixir by an old colleague. 
1:20 - What Elixir projects do you have in production? 
Several client projects in production. Several Mobile Apps with APIs powered by Phoenix and Elixir. 
Baltimore Water Taxi. 
A digital marketplace.
And more!
1:57 - Advantages and disadvantages to using Elixir.
We made the switch when a colleague was stoked about Functional Programming and introduced us to Elixir. We were won over by the performance and rich feature sets, OTP, etc.
2:43 - Where are we hosting our Elixir Apps?
Heroku 
AWS 
Linode 
Digital Ocean 
6:20Deployment process, tools, scripting
Ansible - for underlying VPS’s, servers, and more recently deployment itself. (Similar to Capistrano).  
Distillery  
Mix.release 
7:18 - Zero Downtime Deployments
Old school load balancers and rolling restarts 
7:46 - What are the performance metrics like? Comparatively.
Ruby ends up with memory leaks. That doesn’t happen with Elixir. 
Memory utilization is flat and low no matter what. 
“Phenomenal response times” 
8:54 - How does Eric think about clustered applications in Elixir?
Going Multi Node (https://www.youtube.com/watch?v=lCUKQnkjajo (https://www.youtube.com/watch?v=lCUKQnkjajo)) 
Pg2 (http://erlang.org/doc/man/pg2.html) - process groups 
Mnesia (http://erlang.org/doc/man/mnesia.html) distributed database (beware!) 
“Just sending messages to pids because Erlang is great” 
Swarm (https://github.com/bitwalker/swarm) / Horde (https://github.com/derekkraan/horde) 
12:40 - How do we handle background tasks?
Started with verk (https://github.com/edgurgel/verk) 
Recently becoming more comfortable with spinning up GenServers (https://hexdocs.pm/elixir/GenServer.html) 
“The language itself is built to be concurrent.” 
15:06 What libraries are we using in prod?
First thing: You don’t need a whole lot because the language is so well designed. 
Phoenix (https://phoenixframework.org/) - web framework 
Ecto (https://hexdocs.pm/ecto/Ecto.html) - sort of an ORM 
Distillery (https://github.com/bitwalker/distillery) - for releases 
Bamboo (https://github.com/thoughtbot/bamboo) - for sending emails 
Quantum (https://github.com/c-rack/quantum-elixir) - for task scheduling 
Timex (https://github.com/bitwalker/timex) - for dates and times, and timezones 
Cachex (https://github.com/whitfin/cachex) - for caching 
18:20- What third party integrations have we attempted
Stripe 
Square 
Twilio 
Mindbody 
Always building our own clients.  Using HTTPoison (https://github.com/edgurgel/httpoison)
19:58Has Elixir ever saved the day in production?
It’s saved many days by PREVENTING ISSUES. Systems are architected for reliability and fault-tolerance.
21:48 - Where do supervision trees come from? What is OTP?
OTP is an Erlang standard lib 
Includes supervision trees, genservers, ETS, and a lot of stuff we don’t even know about! 
gen_tcp (http://erlang.org/doc/man/gen_tcp.html) 
Mnesia 
dets (http://erlang.org/doc/man/dets.html) 
23:43- Tips for devs considering running elixir in production.
Jump in and read the docs 
Understand how systems boot, distillery releases, config providers, etc. 
“Good server monitoring hygiene” 
“DIVE IN!” 
19:54 Outro
Learn more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) Special Guest: Dan Ivovich.
</description>
      <itunes:keywords>elixir, phoenix, smartlogic</itunes:keywords>
      <content:encoded><![CDATA[
        <p>We talk with developers from the team here at SmartLogic about our current practices on deploying Elixir and Phoenix in production.</p>

<p>Dan Ivovich - Director of Development Operations @ SmartLogic</p>

<p>Learn more about how SmartLogic uses <a href="https://smartlogic.io/phoenix-and-elixir" rel="nofollow">Phoenix and Elixir.</a></p>

<p>00:00 - Fade In</p>

<p>00:30 - Introductions to Eric, Dan and SmartLogic</p>

<p>Dan Ivovich - Director of Development Operations @ SmartLogic</p>

<p>Eric Oestrich - Developer, Elixir Lead @ SmartLogic</p>

<p>Justus Eapen - Full stack developer @ SmartLogic</p>

<p>Introduced to Elixir by an old colleague. </p>

<p>1:20 - What Elixir projects do you have in production? </p>

<p>Several client projects in production. Several Mobile Apps with APIs powered by Phoenix and Elixir. </p>

<p>Baltimore Water Taxi. </p>

<p>A digital marketplace.</p>

<p>And more!</p>

<p>1:57 - Advantages and disadvantages to using Elixir.</p>

<p>We made the switch when a colleague was stoked about Functional Programming and introduced us to Elixir. We were won over by the performance and rich feature sets, OTP, etc.</p>

<p>2:43 - Where are we hosting our Elixir Apps?</p>

<ul>
<li>Heroku </li>
<li>AWS </li>
<li>Linode </li>
<li>Digital Ocean </li>
</ul>

<p>6:20Deployment process, tools, scripting</p>

<ul>
<li>Ansible - for underlying VPS’s, servers, and more recently deployment itself. (Similar to Capistrano).<br></li>
<li>Distillery<br></li>
<li>Mix.release </li>
</ul>

<p>7:18 - Zero Downtime Deployments</p>

<ul>
<li>Old school load balancers and rolling restarts </li>
</ul>

<p>7:46 - What are the performance metrics like? Comparatively.</p>

<ul>
<li>Ruby ends up with memory leaks. That doesn’t happen with Elixir. </li>
<li>Memory utilization is flat and low no matter what. </li>
<li>“Phenomenal response times” </li>
</ul>

<p>8:54 - How does Eric think about clustered applications in Elixir?</p>

<ul>
<li>Going Multi Node (<a href="https://www.youtube.com/watch?v=lCUKQnkjajo" rel="nofollow">https://www.youtube.com/watch?v=lCUKQnkjajo</a>) </li>
<li><a href="http://erlang.org/doc/man/pg2.html" rel="nofollow">Pg2</a> - process groups </li>
<li><a href="http://erlang.org/doc/man/mnesia.html" rel="nofollow">Mnesia</a> distributed database (beware!) </li>
<li>“Just sending messages to pids because Erlang is great” </li>
<li><a href="https://github.com/bitwalker/swarm" rel="nofollow">Swarm</a> / <a href="https://github.com/derekkraan/horde" rel="nofollow">Horde</a> </li>
</ul>

<p>12:40 - How do we handle background tasks?</p>

<ul>
<li>Started with <a href="https://github.com/edgurgel/verk" rel="nofollow">verk</a> </li>
<li>Recently becoming more comfortable with spinning up <a href="https://hexdocs.pm/elixir/GenServer.html" rel="nofollow">GenServers</a> </li>
<li>“The language itself is built to be concurrent.” </li>
</ul>

<p>15:06 What libraries are we using in prod?</p>

<ul>
<li>First thing: You don’t need a whole lot because the language is so well designed. </li>
<li><a href="https://phoenixframework.org/" rel="nofollow">Phoenix</a> - web framework </li>
<li><a href="https://hexdocs.pm/ecto/Ecto.html" rel="nofollow">Ecto</a> - sort of an ORM </li>
<li><a href="https://github.com/bitwalker/distillery" rel="nofollow">Distillery</a> - for releases </li>
<li><a href="https://github.com/thoughtbot/bamboo" rel="nofollow">Bamboo</a> - for sending emails </li>
<li><a href="https://github.com/c-rack/quantum-elixir" rel="nofollow">Quantum</a> - for task scheduling </li>
<li><a href="https://github.com/bitwalker/timex" rel="nofollow">Timex</a> - for dates and times, and timezones </li>
<li><a href="https://github.com/whitfin/cachex" rel="nofollow">Cachex</a> - for caching </li>
</ul>

<p>18:20- What third party integrations have we attempted</p>

<ul>
<li>Stripe </li>
<li>Square </li>
<li>Twilio </li>
<li>Mindbody </li>
</ul>

<p>Always building our own clients.  Using <a href="https://github.com/edgurgel/httpoison" rel="nofollow">HTTPoison</a></p>

<p>19:58Has Elixir ever saved the day in production?</p>

<p>It’s saved many days by PREVENTING ISSUES. Systems are architected for reliability and fault-tolerance.</p>

<p>21:48 - Where do supervision trees come from? What is OTP?</p>

<ul>
<li>OTP is an Erlang standard lib </li>
<li>Includes supervision trees, genservers, ETS, and a lot of stuff we don’t even know about! </li>
<li><a href="http://erlang.org/doc/man/gen_tcp.html" rel="nofollow">gen_tcp</a> </li>
<li>Mnesia </li>
<li><a href="http://erlang.org/doc/man/dets.html" rel="nofollow">dets</a> </li>
</ul>

<p>23:43- Tips for devs considering running elixir in production.</p>

<ul>
<li>Jump in and read the docs </li>
<li>Understand how systems boot, distillery releases, config providers, etc. </li>
<li>“Good server monitoring hygiene” </li>
<li>“DIVE IN!” 
19:54 Outro</li>
</ul>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Dan Ivovich.</p><p>Links:</p><ul><li><a href="https://www.youtube.com/watch?v=lCUKQnkjajo" title="Going Multi-Node" rel="nofollow">Going Multi-Node</a></li><li><a href="http://erlang.org/doc/man/pg2.html" title="PG2" rel="nofollow">PG2</a></li><li><a href="http://erlang.org/doc/man/mnesia.html" title="mnesia" rel="nofollow">mnesia</a></li><li><a href="https://github.com/bitwalker/swarm" title="Swarm" rel="nofollow">Swarm</a></li><li><a href="https://github.com/derekkraan/horde" title="Horde" rel="nofollow">Horde</a></li><li><a href="https://github.com/edgurgel/verk" title="Verk" rel="nofollow">Verk</a></li><li><a href="https://github.com/thoughtbot/bamboo" title="Bamboo" rel="nofollow">Bamboo</a></li><li><a href="https://github.com/quantum-elixir/quantum-core" title="Quantum" rel="nofollow">Quantum</a></li><li><a href="https://github.com/whitfin/cachex" title="Cachex" rel="nofollow">Cachex</a></li></ul>
      ]]></content:encoded>
      <itunes:summary><![CDATA[
        <p>We talk with developers from the team here at SmartLogic about our current practices on deploying Elixir and Phoenix in production.</p>

<p>Dan Ivovich - Director of Development Operations @ SmartLogic</p>

<p>Learn more about how SmartLogic uses <a href="https://smartlogic.io/phoenix-and-elixir" rel="nofollow">Phoenix and Elixir.</a></p>

<p>00:00 - Fade In</p>

<p>00:30 - Introductions to Eric, Dan and SmartLogic</p>

<p>Dan Ivovich - Director of Development Operations @ SmartLogic</p>

<p>Eric Oestrich - Developer, Elixir Lead @ SmartLogic</p>

<p>Justus Eapen - Full stack developer @ SmartLogic</p>

<p>Introduced to Elixir by an old colleague. </p>

<p>1:20 - What Elixir projects do you have in production? </p>

<p>Several client projects in production. Several Mobile Apps with APIs powered by Phoenix and Elixir. </p>

<p>Baltimore Water Taxi. </p>

<p>A digital marketplace.</p>

<p>And more!</p>

<p>1:57 - Advantages and disadvantages to using Elixir.</p>

<p>We made the switch when a colleague was stoked about Functional Programming and introduced us to Elixir. We were won over by the performance and rich feature sets, OTP, etc.</p>

<p>2:43 - Where are we hosting our Elixir Apps?</p>

<ul>
<li>Heroku </li>
<li>AWS </li>
<li>Linode </li>
<li>Digital Ocean </li>
</ul>

<p>6:20Deployment process, tools, scripting</p>

<ul>
<li>Ansible - for underlying VPS’s, servers, and more recently deployment itself. (Similar to Capistrano).<br></li>
<li>Distillery<br></li>
<li>Mix.release </li>
</ul>

<p>7:18 - Zero Downtime Deployments</p>

<ul>
<li>Old school load balancers and rolling restarts </li>
</ul>

<p>7:46 - What are the performance metrics like? Comparatively.</p>

<ul>
<li>Ruby ends up with memory leaks. That doesn’t happen with Elixir. </li>
<li>Memory utilization is flat and low no matter what. </li>
<li>“Phenomenal response times” </li>
</ul>

<p>8:54 - How does Eric think about clustered applications in Elixir?</p>

<ul>
<li>Going Multi Node (<a href="https://www.youtube.com/watch?v=lCUKQnkjajo" rel="nofollow">https://www.youtube.com/watch?v=lCUKQnkjajo</a>) </li>
<li><a href="http://erlang.org/doc/man/pg2.html" rel="nofollow">Pg2</a> - process groups </li>
<li><a href="http://erlang.org/doc/man/mnesia.html" rel="nofollow">Mnesia</a> distributed database (beware!) </li>
<li>“Just sending messages to pids because Erlang is great” </li>
<li><a href="https://github.com/bitwalker/swarm" rel="nofollow">Swarm</a> / <a href="https://github.com/derekkraan/horde" rel="nofollow">Horde</a> </li>
</ul>

<p>12:40 - How do we handle background tasks?</p>

<ul>
<li>Started with <a href="https://github.com/edgurgel/verk" rel="nofollow">verk</a> </li>
<li>Recently becoming more comfortable with spinning up <a href="https://hexdocs.pm/elixir/GenServer.html" rel="nofollow">GenServers</a> </li>
<li>“The language itself is built to be concurrent.” </li>
</ul>

<p>15:06 What libraries are we using in prod?</p>

<ul>
<li>First thing: You don’t need a whole lot because the language is so well designed. </li>
<li><a href="https://phoenixframework.org/" rel="nofollow">Phoenix</a> - web framework </li>
<li><a href="https://hexdocs.pm/ecto/Ecto.html" rel="nofollow">Ecto</a> - sort of an ORM </li>
<li><a href="https://github.com/bitwalker/distillery" rel="nofollow">Distillery</a> - for releases </li>
<li><a href="https://github.com/thoughtbot/bamboo" rel="nofollow">Bamboo</a> - for sending emails </li>
<li><a href="https://github.com/c-rack/quantum-elixir" rel="nofollow">Quantum</a> - for task scheduling </li>
<li><a href="https://github.com/bitwalker/timex" rel="nofollow">Timex</a> - for dates and times, and timezones </li>
<li><a href="https://github.com/whitfin/cachex" rel="nofollow">Cachex</a> - for caching </li>
</ul>

<p>18:20- What third party integrations have we attempted</p>

<ul>
<li>Stripe </li>
<li>Square </li>
<li>Twilio </li>
<li>Mindbody </li>
</ul>

<p>Always building our own clients.  Using <a href="https://github.com/edgurgel/httpoison" rel="nofollow">HTTPoison</a></p>

<p>19:58Has Elixir ever saved the day in production?</p>

<p>It’s saved many days by PREVENTING ISSUES. Systems are architected for reliability and fault-tolerance.</p>

<p>21:48 - Where do supervision trees come from? What is OTP?</p>

<ul>
<li>OTP is an Erlang standard lib </li>
<li>Includes supervision trees, genservers, ETS, and a lot of stuff we don’t even know about! </li>
<li><a href="http://erlang.org/doc/man/gen_tcp.html" rel="nofollow">gen_tcp</a> </li>
<li>Mnesia </li>
<li><a href="http://erlang.org/doc/man/dets.html" rel="nofollow">dets</a> </li>
</ul>

<p>23:43- Tips for devs considering running elixir in production.</p>

<ul>
<li>Jump in and read the docs </li>
<li>Understand how systems boot, distillery releases, config providers, etc. </li>
<li>“Good server monitoring hygiene” </li>
<li>“DIVE IN!” 
19:54 Outro</li>
</ul>

<p>Learn more about how SmartLogic uses <a href="https://smr.tl/2Hyslu8" rel="nofollow">Phoenix and Elixir.</a></p><p>Special Guest: Dan Ivovich.</p><p>Links:</p><ul><li><a href="https://www.youtube.com/watch?v=lCUKQnkjajo" title="Going Multi-Node" rel="nofollow">Going Multi-Node</a></li><li><a href="http://erlang.org/doc/man/pg2.html" title="PG2" rel="nofollow">PG2</a></li><li><a href="http://erlang.org/doc/man/mnesia.html" title="mnesia" rel="nofollow">mnesia</a></li><li><a href="https://github.com/bitwalker/swarm" title="Swarm" rel="nofollow">Swarm</a></li><li><a href="https://github.com/derekkraan/horde" title="Horde" rel="nofollow">Horde</a></li><li><a href="https://github.com/edgurgel/verk" title="Verk" rel="nofollow">Verk</a></li><li><a href="https://github.com/thoughtbot/bamboo" title="Bamboo" rel="nofollow">Bamboo</a></li><li><a href="https://github.com/quantum-elixir/quantum-core" title="Quantum" rel="nofollow">Quantum</a></li><li><a href="https://github.com/whitfin/cachex" title="Cachex" rel="nofollow">Cachex</a></li></ul>
      ]]></itunes:summary>
    </item>
    
  </channel>
</rss>
