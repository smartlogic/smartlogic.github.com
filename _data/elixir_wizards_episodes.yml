---
- title: Season 3 Trailer
  slug: s3-trailer
  link: https://podcast.smartlogic.io/s3-trailer
  guid: ba3a7fde-7592-4074-906d-1689a9801712
  pubDate: Tue, 19 Nov 2019 06:00:00 -0500
  description: "Welcome back to Season 3! Our theme this time around is Working with
    Elixir. Listen for more on our theme, upcoming guests, and our new name. \n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/ba3a7fde-7592-4074-906d-1689a9801712.mp3
    length: '2412548'
    type: audio/mp3
  itunes:
    episodeType: trailer
    season: '3'
    author: SmartLogic LLC
    subtitle: Welcome back to Season 3! Our theme this time around is Working with
      Elixir. Listen for more on our theme, upcoming guests, and our new name.
    duration: '1:40'
    explicit: 'no'
    keywords: elixir, phoenix
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>Welcome back to Season 3! Our theme this time around is
      Working with Elixir. Listen for more on our theme, upcoming guests, and our
      new name.</p>\n      "
  contentEncoded: "\n        <p>Welcome back to Season 3! Our theme this time around
    is Working with Elixir. Listen for more on our theme, upcoming guests, and our
    new name.</p>\n      "
- title: Season 2 Trailer
  slug: season-2-trailer
  link: https://podcast.smartlogic.io/season-2-trailer
  guid: 2301755d-d5af-4c53-b044-2d84b35b340f
  pubDate: Tue, 09 Jul 2019 06:00:00 -0400
  description: "We’re excited to announce our season two topic, Elixir Internals.
    In this season we talk with developers behind some of the most popular Elixir
    libraries, including Witchcraft, ElixirScript, Distillery, Ecto, and more! \n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/2301755d-d5af-4c53-b044-2d84b35b340f.mp3
    length: '2507438'
    type: audio/mpeg
  itunes:
    episodeType: trailer
    season: '2'
    author: SmartLogic LLC
    subtitle: We’re excited to announce our season two topic, Elixir Internals. In
      this season we talk with developers behind some of the most popular Elixir libraries,
      including Witchcraft, ElixirScript, Distillery, Ecto, and more!
    duration: '1:26'
    explicit: 'no'
    keywords: ''
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>We’re excited to announce our season two topic, Elixir
      Internals. In this season we talk with developers behind some of the most popular
      Elixir libraries, including Witchcraft, ElixirScript, Distillery, Ecto, and
      more!</p>\n      "
  contentEncoded: "\n        <p>We’re excited to announce our season two topic, Elixir
    Internals. In this season we talk with developers behind some of the most popular
    Elixir libraries, including Witchcraft, ElixirScript, Distillery, Ecto, and more!</p>\n
    \     "
- title: Smart Software Season 1 Trailer
  slug: season-1-trailer
  link: https://podcast.smartlogic.io/season-1-trailer
  guid: 8e2c78f1-af3a-4c6a-b1bc-413be9fb1e72
  pubDate: Mon, 25 Feb 2019 10:00:00 -0500
  description: "Welcome to the first season of Smart Software with SmartLogic. We'll
    be interviewing several companies about how they use Elixir in Production this
    season. In this preview episode, we introduce ourselves and some of the topics
    we’ll be covering.\nLearn more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8)
    \n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/8e2c78f1-af3a-4c6a-b1bc-413be9fb1e72.mp3
    length: '1009172'
    type: audio/mp3
  itunes:
    episodeType: trailer
    season: '1'
    author: SmartLogic LLC
    subtitle: Welcome to the first season of Smart Software with SmartLogic. We'll
      be interviewing several companies about how they use Elixir in Production this
      season. In this preview episode, we introduce ourselves and some of the topics
      we’ll be covering.
    duration: '1:24'
    explicit: 'no'
    keywords: elixir, phoenix, production
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>Welcome to the first season of Smart Software with SmartLogic.
      We&#39;ll be interviewing several companies about how they use Elixir in Production
      this season. In this preview episode, we introduce ourselves and some of the
      topics we’ll be covering.</p>\n\n<p>Learn more about how SmartLogic uses <a
      href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix and Elixir.</a></p>\n
      \     "
  contentEncoded: "\n        <p>Welcome to the first season of Smart Software with
    SmartLogic. We&#39;ll be interviewing several companies about how they use Elixir
    in Production this season. In this preview episode, we introduce ourselves and
    some of the topics we’ll be covering.</p>\n\n<p>Learn more about how SmartLogic
    uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix and Elixir.</a></p>\n
    \     "
- title: Alex Garibay and Mike Binns from DockYard on Hiring and Training
  slug: s3e13-binns-garibay
  link: https://podcast.smartlogic.io/s3e13-binns-garibay
  guid: 1cd7d8f6-8965-4bd2-b159-1580e133bb6f
  pubDate: Thu, 20 Feb 2020 06:00:00 -0500
  description: "Today on the show, we’re joined by Mike Binns and Alex Garibay of
    DockYard. In this episode, Mike and Alex share their journeys of how they came
    to work at DockYard and give us a view into DockYard’s hiring and training processes,
    systems, and philosophies. Here they share what they enjoy most about working
    at DockYard and their emphasis on being supported in your continual growth as
    an employee and human being.\nKey Points from This Episode:\nFind out how Mike
    and Alex both got their jobs at DockYard in 2016.\nWorking for a fully remote
    company: Mike and Alex share their experiences.\nThe amount of languages used
    at DockYard and what the day-to-day looks like.\nReact VS Ember: Find out DockYard’s
    opinion on the debate between the two.\nHow to know whether you should be using
    JavaScript or Live View on your projects.\nThe importance of inclusion and empowerment
    in the onboarding process at DockYard.\nHow to support and train new employees
    in “soft” skills, such as communication.\nPersonal strategies Mike and Alex use
    to help “soften the blow” of feedback and criticism. \nDiscover what DockYard
    does to support the learning growth of their employees.\nLearn more about DockYard
    Friday and the exciting projects that have emerged from it.\nHelpful resources
    for learning Elixir and how to remain a curious learner as a developer.\nFind
    out the top skills that make a great engineering manager at DockYard today.\nLinks
    Mentioned in Today’s Episode:\nMike Binns on Twitter — https://twitter.com/1stAvenger\nMike
    Binns on LinkedIn — https://www.linkedin.com/in/mikebinns\nAlex Garibay — https://alexgaribay.com/\nAlex
    Garibay on Twitter — https://twitter.com/AlexGaribay\nAlex Garibay on LinkedIn
    — https://www.linkedin.com/in/alexandergaribay/\nDockYard — https://DockYard.com/\nSmartLogic
    — https://smartlogic.io/ \nRailsConf — https://railsconf.com/\nChris McCord —
    http://chrismccord.com/\nEmber — https://emberjs.com/\nLive View — https://support.google.com/maps/thread/11554255?hl=en\nElixir
    in Action — https://www.amazon.com/Elixir-Action-Sa%C5%A1a-Juri-cacute/dp/1617295027
    \nElixir Conf 2014 Keynote by Dave Thomas — https://www.youtube.com/watch?v=5hDVftaPQwY\nSarah
    Drasner — https://sarahdrasnerdesign.com/\nLonestar Elixir — https://lonestarelixir.com/\nProgramming
    Phoenix — https://www.amazon.com/Programming-Phoenix-Productive-Reliable-Fast/dp/1680501453\nJason
    Goldberger — https://twitter.com/jsonlouis Special Guests: Alex Garibay and Mike
    Binns.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/1cd7d8f6-8965-4bd2-b159-1580e133bb6f.mp3
    length: '38304122'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '3'
    author: SmartLogic LLC
    subtitle: Mike Binns and Alex Garibay of DockYard share their journeys of how
      they came to work at DockYard and give us a fascinating peek behind-the-scenes
      into DockYard’s hiring and training processes, systems, and philosophies.
    duration: '26:11'
    explicit: 'no'
    keywords: DockYard, elixir, phoenix
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>Today on the show, we’re joined by Mike Binns and Alex
      Garibay of DockYard. In this episode, Mike and Alex share their journeys of
      how they came to work at DockYard and give us a view into DockYard’s hiring
      and training processes, systems, and philosophies. Here they share what they
      enjoy most about working at DockYard and their emphasis on being supported in
      your continual growth as an employee and human being.</p>\n\n<p>Key Points from
      This Episode:</p>\n\n<ul>\n<li>Find out how Mike and Alex both got their jobs
      at DockYard in 2016.</li>\n<li>Working for a fully remote company: Mike and
      Alex share their experiences.</li>\n<li>The amount of languages used at DockYard
      and what the day-to-day looks like.</li>\n<li>React VS Ember: Find out DockYard’s
      opinion on the debate between the two.</li>\n<li>How to know whether you should
      be using JavaScript or Live View on your projects.</li>\n<li>The importance
      of inclusion and empowerment in the onboarding process at DockYard.</li>\n<li>How
      to support and train new employees in “soft” skills, such as communication.</li>\n<li>Personal
      strategies Mike and Alex use to help “soften the blow” of feedback and criticism.
      </li>\n<li>Discover what DockYard does to support the learning growth of their
      employees.</li>\n<li>Learn more about DockYard Friday and the exciting projects
      that have emerged from it.</li>\n<li>Helpful resources for learning Elixir and
      how to remain a curious learner as a developer.</li>\n<li>Find out the top skills
      that make a great engineering manager at DockYard today.</li>\n</ul>\n\n<p>Links
      Mentioned in Today’s Episode:</p>\n\n<p>Mike Binns on Twitter — <a href=\"https://twitter.com/1stAvenger\"
      rel=\"nofollow\">https://twitter.com/1stAvenger</a><br>\nMike Binns on LinkedIn
      — <a href=\"https://www.linkedin.com/in/mikebinns\" rel=\"nofollow\">https://www.linkedin.com/in/mikebinns</a><br>\nAlex
      Garibay — <a href=\"https://alexgaribay.com/\" rel=\"nofollow\">https://alexgaribay.com/</a><br>\nAlex
      Garibay on Twitter — <a href=\"https://twitter.com/_AlexGaribay\" rel=\"nofollow\">https://twitter.com/_AlexGaribay</a><br>\nAlex
      Garibay on LinkedIn — <a href=\"https://www.linkedin.com/in/alexandergaribay/\"
      rel=\"nofollow\">https://www.linkedin.com/in/alexandergaribay/</a><br>\nDockYard
      — <a href=\"https://DockYard.com/\" rel=\"nofollow\">https://DockYard.com/</a><br>\nSmartLogic
      — <a href=\"https://smartlogic.io/\" rel=\"nofollow\">https://smartlogic.io/</a>
      <br>\nRailsConf — <a href=\"https://railsconf.com/\" rel=\"nofollow\">https://railsconf.com/</a><br>\nChris
      McCord — <a href=\"http://chrismccord.com/\" rel=\"nofollow\">http://chrismccord.com/</a><br>\nEmber
      — <a href=\"https://emberjs.com/\" rel=\"nofollow\">https://emberjs.com/</a><br>\nLive
      View — <a href=\"https://support.google.com/maps/thread/11554255?hl=en\" rel=\"nofollow\">https://support.google.com/maps/thread/11554255?hl=en</a><br>\nElixir
      in Action — <a href=\"https://www.amazon.com/Elixir-Action-Sa%C5%A1a-Juri-cacute/dp/1617295027\"
      rel=\"nofollow\">https://www.amazon.com/Elixir-Action-Sa%C5%A1a-Juri-cacute/dp/1617295027</a>
      <br>\nElixir Conf 2014 Keynote by Dave Thomas — <a href=\"https://www.youtube.com/watch?v=5hDVftaPQwY\"
      rel=\"nofollow\">https://www.youtube.com/watch?v=5hDVftaPQwY</a><br>\nSarah
      Drasner — <a href=\"https://sarahdrasnerdesign.com/\" rel=\"nofollow\">https://sarahdrasnerdesign.com/</a><br>\nLonestar
      Elixir — <a href=\"https://lonestarelixir.com/\" rel=\"nofollow\">https://lonestarelixir.com/</a><br>\nProgramming
      Phoenix — <a href=\"https://www.amazon.com/Programming-Phoenix-Productive-Reliable-Fast/dp/1680501453\"
      rel=\"nofollow\">https://www.amazon.com/Programming-Phoenix-Productive-Reliable-Fast/dp/1680501453</a><br>\nJason
      Goldberger — <a href=\"https://twitter.com/jsonlouis_\" rel=\"nofollow\">https://twitter.com/jsonlouis_</a></p><p>Special
      Guests: Alex Garibay and Mike Binns.</p>\n      "
  contentEncoded: "\n        <p>Today on the show, we’re joined by Mike Binns and
    Alex Garibay of DockYard. In this episode, Mike and Alex share their journeys
    of how they came to work at DockYard and give us a view into DockYard’s hiring
    and training processes, systems, and philosophies. Here they share what they enjoy
    most about working at DockYard and their emphasis on being supported in your continual
    growth as an employee and human being.</p>\n\n<p>Key Points from This Episode:</p>\n\n<ul>\n<li>Find
    out how Mike and Alex both got their jobs at DockYard in 2016.</li>\n<li>Working
    for a fully remote company: Mike and Alex share their experiences.</li>\n<li>The
    amount of languages used at DockYard and what the day-to-day looks like.</li>\n<li>React
    VS Ember: Find out DockYard’s opinion on the debate between the two.</li>\n<li>How
    to know whether you should be using JavaScript or Live View on your projects.</li>\n<li>The
    importance of inclusion and empowerment in the onboarding process at DockYard.</li>\n<li>How
    to support and train new employees in “soft” skills, such as communication.</li>\n<li>Personal
    strategies Mike and Alex use to help “soften the blow” of feedback and criticism.
    </li>\n<li>Discover what DockYard does to support the learning growth of their
    employees.</li>\n<li>Learn more about DockYard Friday and the exciting projects
    that have emerged from it.</li>\n<li>Helpful resources for learning Elixir and
    how to remain a curious learner as a developer.</li>\n<li>Find out the top skills
    that make a great engineering manager at DockYard today.</li>\n</ul>\n\n<p>Links
    Mentioned in Today’s Episode:</p>\n\n<p>Mike Binns on Twitter — <a href=\"https://twitter.com/1stAvenger\"
    rel=\"nofollow\">https://twitter.com/1stAvenger</a><br>\nMike Binns on LinkedIn
    — <a href=\"https://www.linkedin.com/in/mikebinns\" rel=\"nofollow\">https://www.linkedin.com/in/mikebinns</a><br>\nAlex
    Garibay — <a href=\"https://alexgaribay.com/\" rel=\"nofollow\">https://alexgaribay.com/</a><br>\nAlex
    Garibay on Twitter — <a href=\"https://twitter.com/_AlexGaribay\" rel=\"nofollow\">https://twitter.com/_AlexGaribay</a><br>\nAlex
    Garibay on LinkedIn — <a href=\"https://www.linkedin.com/in/alexandergaribay/\"
    rel=\"nofollow\">https://www.linkedin.com/in/alexandergaribay/</a><br>\nDockYard
    — <a href=\"https://DockYard.com/\" rel=\"nofollow\">https://DockYard.com/</a><br>\nSmartLogic
    — <a href=\"https://smartlogic.io/\" rel=\"nofollow\">https://smartlogic.io/</a>
    <br>\nRailsConf — <a href=\"https://railsconf.com/\" rel=\"nofollow\">https://railsconf.com/</a><br>\nChris
    McCord — <a href=\"http://chrismccord.com/\" rel=\"nofollow\">http://chrismccord.com/</a><br>\nEmber
    — <a href=\"https://emberjs.com/\" rel=\"nofollow\">https://emberjs.com/</a><br>\nLive
    View — <a href=\"https://support.google.com/maps/thread/11554255?hl=en\" rel=\"nofollow\">https://support.google.com/maps/thread/11554255?hl=en</a><br>\nElixir
    in Action — <a href=\"https://www.amazon.com/Elixir-Action-Sa%C5%A1a-Juri-cacute/dp/1617295027\"
    rel=\"nofollow\">https://www.amazon.com/Elixir-Action-Sa%C5%A1a-Juri-cacute/dp/1617295027</a>
    <br>\nElixir Conf 2014 Keynote by Dave Thomas — <a href=\"https://www.youtube.com/watch?v=5hDVftaPQwY\"
    rel=\"nofollow\">https://www.youtube.com/watch?v=5hDVftaPQwY</a><br>\nSarah Drasner
    — <a href=\"https://sarahdrasnerdesign.com/\" rel=\"nofollow\">https://sarahdrasnerdesign.com/</a><br>\nLonestar
    Elixir — <a href=\"https://lonestarelixir.com/\" rel=\"nofollow\">https://lonestarelixir.com/</a><br>\nProgramming
    Phoenix — <a href=\"https://www.amazon.com/Programming-Phoenix-Productive-Reliable-Fast/dp/1680501453\"
    rel=\"nofollow\">https://www.amazon.com/Programming-Phoenix-Productive-Reliable-Fast/dp/1680501453</a><br>\nJason
    Goldberger — <a href=\"https://twitter.com/jsonlouis_\" rel=\"nofollow\">https://twitter.com/jsonlouis_</a></p><p>Special
    Guests: Alex Garibay and Mike Binns.</p>\n      "
- title: Sean Lewis from Divvy on Performance, Hiring and Training
  slug: s3e12-divvy
  link: https://podcast.smartlogic.io/s3e12-divvy
  guid: 37389f65-249a-4e59-bdac-c71a646d2b23
  pubDate: Thu, 13 Feb 2020 06:00:00 -0500
  description: "Today on Elixir Wizards we are delighted to be joined by Sean Lewis,
    a senior backend architect at Divvy. One of the many impressive facts about Sean
    is that he is entirely self-taught, from dabbling in Python and coding to eventually
    writing a bunch of Ruby tests and working his way up in the product development
    sphere. In his free time, he likes to play around with electronics and work on
    other tech-related projects such as developing custom smart home devices. In this
    episode, Sean discusses his recent Meetup talk on the implementation of Broadway
    and explains Divvy’s tech stack choices that include React, Elixir, and Python.
    He dives into the topic of hiring for Elixir, outlining the challenges and providing
    strategies and resources to equip new developers in the area of functional programming.
    For Sean, the most important aspect of onboarding is teaching newcomers to ask
    the right questions since this is the foundation of the problem-solving process.
    He shares about Divvy’s approach to recruitment, his role as mentor, how they
    go about retaining and continuously growing their developers, the importance of
    being teachable, and then Sean concludes by giving listeners practical advice
    for ensuring data fidelity.\nKey Points From This Episode:\nSean’s self-taught
    journey and role as senior backend architect at Divvy. \nThe smart home projects
    he has recently worked on, including a smart garage. \nAn overview of Broadway
    and Sean’s Meetup talk regarding implementation. \nThe straightforward tech stack
    at Divvy: React, Elixir, and Python. \nThe difficulty of hiring for Elixir and
    finding fintech companies that use Elixir. \nStrategies and resources for training
    new engineers on Elixir and functional programming. \nWhy fintech works well with
    functional programming in the context of authorization. \nTraining state-minimization
    as a primary concern.\nOnboarding: a process of teaching developers to ask the
    right questions. \nDivvy’s approach to finding and recruiting new employees. \nThoughts
    on why so many Utahn companies use Elixir and the city’s exponential growth. \nHow
    Sean was recruited by Divvy, his progression to architect, and his role as a mentor.
    \nCritical practices for onboarding developers, including assimilating them into
    the culture. \nHow Devvy continues to grow and retain its engineers. \nThe importance
    of challenging yourself, constantly learning, and staying teachable. \nImplementing
    high-quality checkpoints and other advice for ensuring data fidelity. \nLinks
    Mentioned in Today’s Episode:\nSean Lewis on LinkedIn — https://www.linkedin.com/in/sean-lewis-40375077/\nSean
    Lewis on Twitter — https://twitter.com/fricsean?lang=en\nSean Lewis on GitHub
    — https://github.com/SophisticaSean\nDivvy — https://getdivvy.com\nRuby — https://www.ruby-lang.org/en/\nBroadway
    — https://hexdocs.pm/broadway/amazon-sqs.html\nUtah Elixir Meetup — https://www.meetup.com/utah-elixir\nReact
    — https://reactjs.org\nElixir — https://elixir-lang.org\nSusumu Yamazaki on Twitter
    — https://twitter.com/zacky1972\nDomain Modeling Made Functional — https://www.amazon.com/Domain-Modeling-Made-Functional-Domain-Driven-ebook/dp/B07B44BPFB\nSlack
    — https://slack.com/\nMongoDB — https://www.mongodb.com\nPostgreSQL — https://www.postgresql.org\nElixir
    Wizards Podcast — https://podcast.smartlogic.io\nSmartLogic — https://smartlogic.io/
    \n Special Guest: Sean Lewis.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/37389f65-249a-4e59-bdac-c71a646d2b23.mp3
    length: '50367014'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '3'
    author: SmartLogic LLC
    subtitle: Today on Elixir Wizards we are delighted to be joined by Sean Lewis,
      a senior backend architect at Divvy. One of the many impressive facts about
      Sean is that he is entirely self-taught, from dabbling in Python and coding
      to eventually writing a bunch of Ruby tests and working his way up in the product
      development sphere. In his free time, he likes to play around with electronics
      and work on other tech-related projects such as developing custom smart home
      devices. In this episode, Sean discusses his recent Meetup talk on the implementation
      of Broadway and explains Divvy’s tech stack choices that include React, Elixir,
      and Python. He dives into the topic of hiring for Elixir, outlining the challenges
      and providing strategies and resources to equip new developers in the area of
      functional programming. For Sean, the most important aspect of onboarding is
      teaching newcomers to ask the right questions since this is the foundation of
      the problem-solving process. He shares about Divvy’s approach to recruitment,
      his role as mentor, how they go about retaining and continuously growing their
      developers, the importance of being teachable, and then Sean concludes by giving
      listeners practical advice for ensuring data fidelity.
    duration: '34:34'
    explicit: 'no'
    keywords: elixir, phoenix
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>Today on Elixir Wizards we are delighted to be joined by
      Sean Lewis, a senior backend architect at Divvy. One of the many impressive
      facts about Sean is that he is entirely self-taught, from dabbling in Python
      and coding to eventually writing a bunch of Ruby tests and working his way up
      in the product development sphere. In his free time, he likes to play around
      with electronics and work on other tech-related projects such as developing
      custom smart home devices. In this episode, Sean discusses his recent Meetup
      talk on the implementation of Broadway and explains Divvy’s tech stack choices
      that include React, Elixir, and Python. He dives into the topic of hiring for
      Elixir, outlining the challenges and providing strategies and resources to equip
      new developers in the area of functional programming. For Sean, the most important
      aspect of onboarding is teaching newcomers to ask the right questions since
      this is the foundation of the problem-solving process. He shares about Divvy’s
      approach to recruitment, his role as mentor, how they go about retaining and
      continuously growing their developers, the importance of being teachable, and
      then Sean concludes by giving listeners practical advice for ensuring data fidelity.</p>\n\n<p><strong>Key
      Points From This Episode:</strong></p>\n\n<ul>\n<li>Sean’s self-taught journey
      and role as senior backend architect at Divvy. </li>\n<li>The smart home projects
      he has recently worked on, including a smart garage. </li>\n<li>An overview
      of Broadway and Sean’s Meetup talk regarding implementation. </li>\n<li>The
      straightforward tech stack at Divvy: React, Elixir, and Python. </li>\n<li>The
      difficulty of hiring for Elixir and finding fintech companies that use Elixir.
      </li>\n<li>Strategies and resources for training new engineers on Elixir and
      functional programming. </li>\n<li>Why fintech works well with functional programming
      in the context of authorization. </li>\n<li>Training state-minimization as a
      primary concern.</li>\n<li>Onboarding: a process of teaching developers to ask
      the right questions. </li>\n<li>Divvy’s approach to finding and recruiting new
      employees. </li>\n<li>Thoughts on why so many Utahn companies use Elixir and
      the city’s exponential growth. </li>\n<li>How Sean was recruited by Divvy, his
      progression to architect, and his role as a mentor. </li>\n<li>Critical practices
      for onboarding developers, including assimilating them into the culture. </li>\n<li>How
      Devvy continues to grow and retain its engineers. </li>\n<li>The importance
      of challenging yourself, constantly learning, and staying teachable. </li>\n<li>Implementing
      high-quality checkpoints and other advice for ensuring data fidelity. </li>\n</ul>\n\n<p><strong>Links
      Mentioned in Today’s Episode:</strong></p>\n\n<p>Sean Lewis on LinkedIn — <a
      href=\"https://www.linkedin.com/in/sean-lewis-40375077/\" rel=\"nofollow\">https://www.linkedin.com/in/sean-lewis-40375077/</a><br>\nSean
      Lewis on Twitter — <a href=\"https://twitter.com/fricsean?lang=en\" rel=\"nofollow\">https://twitter.com/fricsean?lang=en</a><br>\nSean
      Lewis on GitHub — <a href=\"https://github.com/SophisticaSean\" rel=\"nofollow\">https://github.com/SophisticaSean</a><br>\nDivvy
      — <a href=\"https://getdivvy.com\" rel=\"nofollow\">https://getdivvy.com</a><br>\nRuby
      — <a href=\"https://www.ruby-lang.org/en/\" rel=\"nofollow\">https://www.ruby-lang.org/en/</a><br>\nBroadway
      — <a href=\"https://hexdocs.pm/broadway/amazon-sqs.html\" rel=\"nofollow\">https://hexdocs.pm/broadway/amazon-sqs.html</a><br>\nUtah
      Elixir Meetup — <a href=\"https://www.meetup.com/utah-elixir\" rel=\"nofollow\">https://www.meetup.com/utah-elixir</a><br>\nReact
      — <a href=\"https://reactjs.org\" rel=\"nofollow\">https://reactjs.org</a><br>\nElixir
      — <a href=\"https://elixir-lang.org\" rel=\"nofollow\">https://elixir-lang.org</a><br>\nSusumu
      Yamazaki on Twitter — <a href=\"https://twitter.com/zacky1972\" rel=\"nofollow\">https://twitter.com/zacky1972</a><br>\nDomain
      Modeling Made Functional — <a href=\"https://www.amazon.com/Domain-Modeling-Made-Functional-Domain-Driven-ebook/dp/B07B44BPFB\"
      rel=\"nofollow\">https://www.amazon.com/Domain-Modeling-Made-Functional-Domain-Driven-ebook/dp/B07B44BPFB</a><br>\nSlack
      — <a href=\"https://slack.com/\" rel=\"nofollow\">https://slack.com/</a><br>\nMongoDB
      — <a href=\"https://www.mongodb.com\" rel=\"nofollow\">https://www.mongodb.com</a><br>\nPostgreSQL
      — <a href=\"https://www.postgresql.org\" rel=\"nofollow\">https://www.postgresql.org</a><br>\nElixir
      Wizards Podcast — <a href=\"https://podcast.smartlogic.io\" rel=\"nofollow\">https://podcast.smartlogic.io</a><br>\nSmartLogic
      — <a href=\"https://smartlogic.io/\" rel=\"nofollow\">https://smartlogic.io/</a>
      </p><p>Special Guest: Sean Lewis.</p>\n      "
  contentEncoded: "\n        <p>Today on Elixir Wizards we are delighted to be joined
    by Sean Lewis, a senior backend architect at Divvy. One of the many impressive
    facts about Sean is that he is entirely self-taught, from dabbling in Python and
    coding to eventually writing a bunch of Ruby tests and working his way up in the
    product development sphere. In his free time, he likes to play around with electronics
    and work on other tech-related projects such as developing custom smart home devices.
    In this episode, Sean discusses his recent Meetup talk on the implementation of
    Broadway and explains Divvy’s tech stack choices that include React, Elixir, and
    Python. He dives into the topic of hiring for Elixir, outlining the challenges
    and providing strategies and resources to equip new developers in the area of
    functional programming. For Sean, the most important aspect of onboarding is teaching
    newcomers to ask the right questions since this is the foundation of the problem-solving
    process. He shares about Divvy’s approach to recruitment, his role as mentor,
    how they go about retaining and continuously growing their developers, the importance
    of being teachable, and then Sean concludes by giving listeners practical advice
    for ensuring data fidelity.</p>\n\n<p><strong>Key Points From This Episode:</strong></p>\n\n<ul>\n<li>Sean’s
    self-taught journey and role as senior backend architect at Divvy. </li>\n<li>The
    smart home projects he has recently worked on, including a smart garage. </li>\n<li>An
    overview of Broadway and Sean’s Meetup talk regarding implementation. </li>\n<li>The
    straightforward tech stack at Divvy: React, Elixir, and Python. </li>\n<li>The
    difficulty of hiring for Elixir and finding fintech companies that use Elixir.
    </li>\n<li>Strategies and resources for training new engineers on Elixir and functional
    programming. </li>\n<li>Why fintech works well with functional programming in
    the context of authorization. </li>\n<li>Training state-minimization as a primary
    concern.</li>\n<li>Onboarding: a process of teaching developers to ask the right
    questions. </li>\n<li>Divvy’s approach to finding and recruiting new employees.
    </li>\n<li>Thoughts on why so many Utahn companies use Elixir and the city’s exponential
    growth. </li>\n<li>How Sean was recruited by Divvy, his progression to architect,
    and his role as a mentor. </li>\n<li>Critical practices for onboarding developers,
    including assimilating them into the culture. </li>\n<li>How Devvy continues to
    grow and retain its engineers. </li>\n<li>The importance of challenging yourself,
    constantly learning, and staying teachable. </li>\n<li>Implementing high-quality
    checkpoints and other advice for ensuring data fidelity. </li>\n</ul>\n\n<p><strong>Links
    Mentioned in Today’s Episode:</strong></p>\n\n<p>Sean Lewis on LinkedIn — <a href=\"https://www.linkedin.com/in/sean-lewis-40375077/\"
    rel=\"nofollow\">https://www.linkedin.com/in/sean-lewis-40375077/</a><br>\nSean
    Lewis on Twitter — <a href=\"https://twitter.com/fricsean?lang=en\" rel=\"nofollow\">https://twitter.com/fricsean?lang=en</a><br>\nSean
    Lewis on GitHub — <a href=\"https://github.com/SophisticaSean\" rel=\"nofollow\">https://github.com/SophisticaSean</a><br>\nDivvy
    — <a href=\"https://getdivvy.com\" rel=\"nofollow\">https://getdivvy.com</a><br>\nRuby
    — <a href=\"https://www.ruby-lang.org/en/\" rel=\"nofollow\">https://www.ruby-lang.org/en/</a><br>\nBroadway
    — <a href=\"https://hexdocs.pm/broadway/amazon-sqs.html\" rel=\"nofollow\">https://hexdocs.pm/broadway/amazon-sqs.html</a><br>\nUtah
    Elixir Meetup — <a href=\"https://www.meetup.com/utah-elixir\" rel=\"nofollow\">https://www.meetup.com/utah-elixir</a><br>\nReact
    — <a href=\"https://reactjs.org\" rel=\"nofollow\">https://reactjs.org</a><br>\nElixir
    — <a href=\"https://elixir-lang.org\" rel=\"nofollow\">https://elixir-lang.org</a><br>\nSusumu
    Yamazaki on Twitter — <a href=\"https://twitter.com/zacky1972\" rel=\"nofollow\">https://twitter.com/zacky1972</a><br>\nDomain
    Modeling Made Functional — <a href=\"https://www.amazon.com/Domain-Modeling-Made-Functional-Domain-Driven-ebook/dp/B07B44BPFB\"
    rel=\"nofollow\">https://www.amazon.com/Domain-Modeling-Made-Functional-Domain-Driven-ebook/dp/B07B44BPFB</a><br>\nSlack
    — <a href=\"https://slack.com/\" rel=\"nofollow\">https://slack.com/</a><br>\nMongoDB
    — <a href=\"https://www.mongodb.com\" rel=\"nofollow\">https://www.mongodb.com</a><br>\nPostgreSQL
    — <a href=\"https://www.postgresql.org\" rel=\"nofollow\">https://www.postgresql.org</a><br>\nElixir
    Wizards Podcast — <a href=\"https://podcast.smartlogic.io\" rel=\"nofollow\">https://podcast.smartlogic.io</a><br>\nSmartLogic
    — <a href=\"https://smartlogic.io/\" rel=\"nofollow\">https://smartlogic.io/</a>
    </p><p>Special Guest: Sean Lewis.</p>\n      "
- title: Paul Schoenfelder and Hans Elias Josephsen on Lumen and Performance
  slug: s3e11-lumen
  link: https://podcast.smartlogic.io/s3e11-lumen
  guid: 5c493edc-c294-4fdd-b9f9-86a091800d96
  pubDate: Thu, 06 Feb 2020 06:00:00 -0500
  description: "In line with our current working-with-Elixir theme, today we’re talking
    about performance with Paul Schoenfelder and Hans Elias Josephsen from DockYard.
    The two have been working on Lumen, and in this episode, they discuss how this
    project is incorporated with WebAssembly, a binary instruction format that ultimately
    allows Elixir to be run in the browser and preserve the semantics of the language.
    Paul and Hans talk about the specific aspects of Lumen they are working on; the
    data flow and process of writing Elixir; and the compiler, interpreter and run-time
    functions involved. Joining in this conversation, you will also hear how they
    approached starting developing Lumen as a brand new compiler, researching, the
    aspects Paul wanted to tackle first, and when users can expect Lumen to be released.
    We also talk about the performance concerns they encountered along the way, the
    many reasons why Rust was their programming language of choice, and their thoughts
    on generic associated types in Rust. \nKey Points From This Episode:\n• How Paul
    and Hans got introduced to Elixir and working for DockYard.\n• An overview of
    what Lumen is and how it relates to WebAssembly. \n• WebAssembly code to run Elixir
    in the browser and preserve the semantics of the language. \n• The different aspects
    of the Lumen project that Paul and Hans are involved in. \n• The data flow and
    process when writing Elixir and how the compiler function features.\n• Taking
    advantage of optimizations that can be performed on the code that is generated.
    \n• An explanation of the interpreter and run-time parts of the project. \n• How
    they approached the major task of starting with a brand new compiler. \n• The
    process of researching and why Paul wanted to get a frontend in place first. \n•
    The production readiness of Lumen and when they expect to release it. \n• Performance
    concerns they encountered during development. \n• The relevance of code size for
    the WebAssembly backend to be usable.  \n• Why Rust was the best choice for building
    the compiler. \n• Using Elixir to generate a standard binary that can run on any
    machine. \n• A description of generic associated types in Rust and why they are
    controversial. \nLinks Mentioned in Today’s Episode:\nPaul Schoenfelder on LinkedIn
    — https://www.linkedin.com/in/gotbones/\nPaul Schoenfelder on Twitter — https://twitter.com/gotbones?lang=en\nHans
    Elias Josephsen on Twitter — https://twitter.com/hansihe\nDockYard — https://dockyard.com\nElixir
    — https://elixir-lang.org\nWebAssembly — https://webassembly.org\nRust — https://www.rust-lang.org\nJavaScript
    — https://www.javascript.com\nC++ — http://www.cplusplus.com\nSmartLogic — https://smartlogic.io/
    \n Special Guests: Hans Elias Josephsen and Paul Schoenfelder.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/5c493edc-c294-4fdd-b9f9-86a091800d96.mp3
    length: '75445954'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '3'
    author: SmartLogic LLC
    subtitle: Paul Schoenfelder and Hans Elias Josephsen from DockYard have been working
      on Lumen, and in this episode, we discuss how this project is incorporated with
      WebAssembly, a binary instruction format that ultimately allows Elixir to be
      run in the browser and preserve the semantics of the language. We talk specifics
      - the data flow and process of writing Elixir, the compiler, interpreter, and
      run-time functions involved, Rust as the programming language of choice, and
      when users can expect Lumen to be released.
    duration: '51:59'
    explicit: 'no'
    keywords: elixir, lumen, rust
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>In line with our current working-with-Elixir theme, today
      we’re talking about performance with Paul Schoenfelder and Hans Elias Josephsen
      from DockYard. The two have been working on Lumen, and in this episode, they
      discuss how this project is incorporated with WebAssembly, a binary instruction
      format that ultimately allows Elixir to be run in the browser and preserve the
      semantics of the language. Paul and Hans talk about the specific aspects of
      Lumen they are working on; the data flow and process of writing Elixir; and
      the compiler, interpreter and run-time functions involved. Joining in this conversation,
      you will also hear how they approached starting developing Lumen as a brand
      new compiler, researching, the aspects Paul wanted to tackle first, and when
      users can expect Lumen to be released. We also talk about the performance concerns
      they encountered along the way, the many reasons why Rust was their programming
      language of choice, and their thoughts on generic associated types in Rust.
      </p>\n\n<p>Key Points From This Episode:</p>\n\n<p>• How Paul and Hans got introduced
      to Elixir and working for DockYard.<br>\n• An overview of what Lumen is and
      how it relates to WebAssembly. <br>\n• WebAssembly code to run Elixir in the
      browser and preserve the semantics of the language. <br>\n• The different aspects
      of the Lumen project that Paul and Hans are involved in. <br>\n• The data flow
      and process when writing Elixir and how the compiler function features.<br>\n•
      Taking advantage of optimizations that can be performed on the code that is
      generated. <br>\n• An explanation of the interpreter and run-time parts of the
      project. <br>\n• How they approached the major task of starting with a brand
      new compiler. <br>\n• The process of researching and why Paul wanted to get
      a frontend in place first. <br>\n• The production readiness of Lumen and when
      they expect to release it. <br>\n• Performance concerns they encountered during
      development. <br>\n• The relevance of code size for the WebAssembly backend
      to be usable.<br><br>\n• Why Rust was the best choice for building the compiler.
      <br>\n• Using Elixir to generate a standard binary that can run on any machine.
      <br>\n• A description of generic associated types in Rust and why they are controversial.
      </p>\n\n<p>Links Mentioned in Today’s Episode:</p>\n\n<p>Paul Schoenfelder on
      LinkedIn — <a href=\"https://www.linkedin.com/in/gotbones/\" rel=\"nofollow\">https://www.linkedin.com/in/gotbones/</a><br>\nPaul
      Schoenfelder on Twitter — <a href=\"https://twitter.com/gotbones?lang=en\" rel=\"nofollow\">https://twitter.com/gotbones?lang=en</a><br>\nHans
      Elias Josephsen on Twitter — <a href=\"https://twitter.com/hansihe\" rel=\"nofollow\">https://twitter.com/hansihe</a><br>\nDockYard
      — <a href=\"https://dockyard.com\" rel=\"nofollow\">https://dockyard.com</a><br>\nElixir
      — <a href=\"https://elixir-lang.org\" rel=\"nofollow\">https://elixir-lang.org</a><br>\nWebAssembly
      — <a href=\"https://webassembly.org\" rel=\"nofollow\">https://webassembly.org</a><br>\nRust
      — <a href=\"https://www.rust-lang.org\" rel=\"nofollow\">https://www.rust-lang.org</a><br>\nJavaScript
      — <a href=\"https://www.javascript.com\" rel=\"nofollow\">https://www.javascript.com</a><br>\nC++
      — <a href=\"http://www.cplusplus.com\" rel=\"nofollow\">http://www.cplusplus.com</a><br>\nSmartLogic
      — <a href=\"https://smartlogic.io/\" rel=\"nofollow\">https://smartlogic.io/</a>
      </p><p>Special Guests: Hans Elias Josephsen and Paul Schoenfelder.</p>\n      "
  contentEncoded: "\n        <p>In line with our current working-with-Elixir theme,
    today we’re talking about performance with Paul Schoenfelder and Hans Elias Josephsen
    from DockYard. The two have been working on Lumen, and in this episode, they discuss
    how this project is incorporated with WebAssembly, a binary instruction format
    that ultimately allows Elixir to be run in the browser and preserve the semantics
    of the language. Paul and Hans talk about the specific aspects of Lumen they are
    working on; the data flow and process of writing Elixir; and the compiler, interpreter
    and run-time functions involved. Joining in this conversation, you will also hear
    how they approached starting developing Lumen as a brand new compiler, researching,
    the aspects Paul wanted to tackle first, and when users can expect Lumen to be
    released. We also talk about the performance concerns they encountered along the
    way, the many reasons why Rust was their programming language of choice, and their
    thoughts on generic associated types in Rust. </p>\n\n<p>Key Points From This
    Episode:</p>\n\n<p>• How Paul and Hans got introduced to Elixir and working for
    DockYard.<br>\n• An overview of what Lumen is and how it relates to WebAssembly.
    <br>\n• WebAssembly code to run Elixir in the browser and preserve the semantics
    of the language. <br>\n• The different aspects of the Lumen project that Paul
    and Hans are involved in. <br>\n• The data flow and process when writing Elixir
    and how the compiler function features.<br>\n• Taking advantage of optimizations
    that can be performed on the code that is generated. <br>\n• An explanation of
    the interpreter and run-time parts of the project. <br>\n• How they approached
    the major task of starting with a brand new compiler. <br>\n• The process of researching
    and why Paul wanted to get a frontend in place first. <br>\n• The production readiness
    of Lumen and when they expect to release it. <br>\n• Performance concerns they
    encountered during development. <br>\n• The relevance of code size for the WebAssembly
    backend to be usable.<br><br>\n• Why Rust was the best choice for building the
    compiler. <br>\n• Using Elixir to generate a standard binary that can run on any
    machine. <br>\n• A description of generic associated types in Rust and why they
    are controversial. </p>\n\n<p>Links Mentioned in Today’s Episode:</p>\n\n<p>Paul
    Schoenfelder on LinkedIn — <a href=\"https://www.linkedin.com/in/gotbones/\" rel=\"nofollow\">https://www.linkedin.com/in/gotbones/</a><br>\nPaul
    Schoenfelder on Twitter — <a href=\"https://twitter.com/gotbones?lang=en\" rel=\"nofollow\">https://twitter.com/gotbones?lang=en</a><br>\nHans
    Elias Josephsen on Twitter — <a href=\"https://twitter.com/hansihe\" rel=\"nofollow\">https://twitter.com/hansihe</a><br>\nDockYard
    — <a href=\"https://dockyard.com\" rel=\"nofollow\">https://dockyard.com</a><br>\nElixir
    — <a href=\"https://elixir-lang.org\" rel=\"nofollow\">https://elixir-lang.org</a><br>\nWebAssembly
    — <a href=\"https://webassembly.org\" rel=\"nofollow\">https://webassembly.org</a><br>\nRust
    — <a href=\"https://www.rust-lang.org\" rel=\"nofollow\">https://www.rust-lang.org</a><br>\nJavaScript
    — <a href=\"https://www.javascript.com\" rel=\"nofollow\">https://www.javascript.com</a><br>\nC++
    — <a href=\"http://www.cplusplus.com\" rel=\"nofollow\">http://www.cplusplus.com</a><br>\nSmartLogic
    — <a href=\"https://smartlogic.io/\" rel=\"nofollow\">https://smartlogic.io/</a>
    </p><p>Special Guests: Hans Elias Josephsen and Paul Schoenfelder.</p>\n      "
- title: Sophie DeBenedetto and Meryl Dakin on Training and Building Elixir Projects
    Under Constraints
  slug: s3e10-debenedetto-dakin
  link: https://podcast.smartlogic.io/s3e10-debenedetto-dakin
  guid: 37d41249-7185-40c3-a4c3-3d761103ed16
  pubDate: Thu, 30 Jan 2020 06:00:00 -0500
  description: "Today on the show we are joined by Sophie DeBenedetto from GitHub
    and Meryl Dakin from Frame.io to talk about the processes involved in training
    others and building Elixir projects. They share about studying and working together
    at the Flatiron School and what they do now in their respective new roles at Github
    and Frame.io. During their time at Flatiron, they worked on various projects,
    often collaborating with engineering teams from other companies and having to
    train these team members in Elixir. They talk about how they managed to develop
    new features while simultaneously onboarding new people and getting everyone on
    the same page. For them, the pair programming model had been most beneficial,
    and they discuss the habits and practices they implemented to encourage team members,
    optimize each learning experience, and share knowledge during training events.
    Sophie and Meryl also share the Elixir-specific challenges they encountered while
    developing applications for 2U, how Elixir’s failure-first programming capability
    guided them, how they prepare for training workshops, and the productivity hacks
    that keep them focused and energized. \nKey Points From This Episode:\n• How Sophie
    and Meryl know each other from working and studying at the Flatiron School. \n•
    Frame.io as a tool that facilitates the communication between video editors and
    clients. \n• Meryl’s new role as a full-stack developer working with Elixir and
    React. \n• The projects they worked on at Flatiron and partnering with various
    companies like 2U. \n• Their secret to developing new features while also introducing
    new team members to Elixir.  \n• The benefits of pair programming and teaching
    a programming language to others. \n• Reserving time to celebrate wins and knowledge
    share during training events. \n• Key lessons they learned from their collaboration
    with the 2U team. \n• Elixir-specific challenges during the development of the
    applications project with 2U. \n• How Elixir’s failure-first programming capability
    ultimately helps developers. \n• Sophie and Meryl’s experience using LiveView
    at Flatiron and the problems encountered. \n• The work that went into preparing
    for training workshops. \n• Advice for teaching someone who is not technical to
    become a working developer.\n• Productivity hacks to stay focused and regain energy.
    \nLinks Mentioned in Today’s Episode:\nSophie DeBenedetto on LinkedIn — https://www.linkedin.com/in/sophiedebenedetto/\nSophie
    DeBenedetto on Twitter — https://twitter.com/sm_debenedetto\nMeryl Dakin in LinkedIn
    — https://www.linkedin.com/in/meryldakin/\nMeryl Dakin on Twitter — https://twitter.com/meryldakin\nEric
    Oestrich — https://oestrich.org\nFrame.io — https://frame.io\nGitHub — https://github.com\nFlatiron
    School — https://flatironschool.com\nElixir — https://elixir-lang.org\nReact —
    https://reactjs.org\n2U — https://2u.com\nKubernetes — https://kubernetes.io\nRuby
    — https://www.ruby-lang.org/en/\nElixir School — https://elixirschool.com/en/\nDrawing
    on the Right Side of the Brain — https://www.amazon.com/Drawing-Right-Side-Brain-Definitive/dp/1585429201\nEtsy
    — https://www.etsy.com\nEMPEX NYC Conference — https://empex.co/nyc.html\nSmartLogic
    — https://smartlogic.io/ \n Special Guests: Meryl Dakin and Sophie DeBenedetto.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/37d41249-7185-40c3-a4c3-3d761103ed16.mp3
    length: '65675346'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '3'
    author: SmartLogic LLC
    subtitle: 'Sophie DeBenedetto from GitHub and Meryl Dakin from Frame.io talk about
      specific ways to develop new features while simultaneously managing team members
      and other projects. We discuss Elixir-specific challenges encountered while
      developing applications for 2U, how Elixir’s failure-first programming capability
      guided them, how they prepare for training workshops, and the productivity hacks
      that keep them focused and energized. '
    duration: '45:12'
    explicit: 'no'
    keywords: elixir, 2U,Frame.io,github
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>Today on the show we are joined by Sophie DeBenedetto from
      GitHub and Meryl Dakin from Frame.io to talk about the processes involved in
      training others and building Elixir projects. They share about studying and
      working together at the Flatiron School and what they do now in their respective
      new roles at Github and Frame.io. During their time at Flatiron, they worked
      on various projects, often collaborating with engineering teams from other companies
      and having to train these team members in Elixir. They talk about how they managed
      to develop new features while simultaneously onboarding new people and getting
      everyone on the same page. For them, the pair programming model had been most
      beneficial, and they discuss the habits and practices they implemented to encourage
      team members, optimize each learning experience, and share knowledge during
      training events. Sophie and Meryl also share the Elixir-specific challenges
      they encountered while developing applications for 2U, how Elixir’s failure-first
      programming capability guided them, how they prepare for training workshops,
      and the productivity hacks that keep them focused and energized. </p>\n\n<p>Key
      Points From This Episode:</p>\n\n<p>• How Sophie and Meryl know each other from
      working and studying at the Flatiron School. <br>\n• Frame.io as a tool that
      facilitates the communication between video editors and clients. <br>\n• Meryl’s
      new role as a full-stack developer working with Elixir and React. <br>\n• The
      projects they worked on at Flatiron and partnering with various companies like
      2U. <br>\n• Their secret to developing new features while also introducing new
      team members to Elixir.<br><br>\n• The benefits of pair programming and teaching
      a programming language to others. <br>\n• Reserving time to celebrate wins and
      knowledge share during training events. <br>\n• Key lessons they learned from
      their collaboration with the 2U team. <br>\n• Elixir-specific challenges during
      the development of the applications project with 2U. <br>\n• How Elixir’s failure-first
      programming capability ultimately helps developers. <br>\n• Sophie and Meryl’s
      experience using LiveView at Flatiron and the problems encountered. <br>\n•
      The work that went into preparing for training workshops. <br>\n• Advice for
      teaching someone who is not technical to become a working developer.<br>\n•
      Productivity hacks to stay focused and regain energy. </p>\n\n<p>Links Mentioned
      in Today’s Episode:</p>\n\n<p>Sophie DeBenedetto on LinkedIn — <a href=\"https://www.linkedin.com/in/sophiedebenedetto/\"
      rel=\"nofollow\">https://www.linkedin.com/in/sophiedebenedetto/</a><br>\nSophie
      DeBenedetto on Twitter — <a href=\"https://twitter.com/sm_debenedetto\" rel=\"nofollow\">https://twitter.com/sm_debenedetto</a><br>\nMeryl
      Dakin in LinkedIn — <a href=\"https://www.linkedin.com/in/meryldakin/\" rel=\"nofollow\">https://www.linkedin.com/in/meryldakin/</a><br>\nMeryl
      Dakin on Twitter — <a href=\"https://twitter.com/meryldakin\" rel=\"nofollow\">https://twitter.com/meryldakin</a><br>\nEric
      Oestrich — <a href=\"https://oestrich.org\" rel=\"nofollow\">https://oestrich.org</a><br>\nFrame.io
      — <a href=\"https://frame.io\" rel=\"nofollow\">https://frame.io</a><br>\nGitHub
      — <a href=\"https://github.com\" rel=\"nofollow\">https://github.com</a><br>\nFlatiron
      School — <a href=\"https://flatironschool.com\" rel=\"nofollow\">https://flatironschool.com</a><br>\nElixir
      — <a href=\"https://elixir-lang.org\" rel=\"nofollow\">https://elixir-lang.org</a><br>\nReact
      — <a href=\"https://reactjs.org\" rel=\"nofollow\">https://reactjs.org</a><br>\n2U
      — <a href=\"https://2u.com\" rel=\"nofollow\">https://2u.com</a><br>\nKubernetes
      — <a href=\"https://kubernetes.io\" rel=\"nofollow\">https://kubernetes.io</a><br>\nRuby
      — <a href=\"https://www.ruby-lang.org/en/\" rel=\"nofollow\">https://www.ruby-lang.org/en/</a><br>\nElixir
      School — <a href=\"https://elixirschool.com/en/\" rel=\"nofollow\">https://elixirschool.com/en/</a><br>\nDrawing
      on the Right Side of the Brain — <a href=\"https://www.amazon.com/Drawing-Right-Side-Brain-Definitive/dp/1585429201\"
      rel=\"nofollow\">https://www.amazon.com/Drawing-Right-Side-Brain-Definitive/dp/1585429201</a><br>\nEtsy
      — <a href=\"https://www.etsy.com\" rel=\"nofollow\">https://www.etsy.com</a><br>\nEMPEX
      NYC Conference — <a href=\"https://empex.co/nyc.html\" rel=\"nofollow\">https://empex.co/nyc.html</a><br>\nSmartLogic
      — <a href=\"https://smartlogic.io/\" rel=\"nofollow\">https://smartlogic.io/</a>
      </p><p>Special Guests: Meryl Dakin and Sophie DeBenedetto.</p>\n      "
  contentEncoded: "\n        <p>Today on the show we are joined by Sophie DeBenedetto
    from GitHub and Meryl Dakin from Frame.io to talk about the processes involved
    in training others and building Elixir projects. They share about studying and
    working together at the Flatiron School and what they do now in their respective
    new roles at Github and Frame.io. During their time at Flatiron, they worked on
    various projects, often collaborating with engineering teams from other companies
    and having to train these team members in Elixir. They talk about how they managed
    to develop new features while simultaneously onboarding new people and getting
    everyone on the same page. For them, the pair programming model had been most
    beneficial, and they discuss the habits and practices they implemented to encourage
    team members, optimize each learning experience, and share knowledge during training
    events. Sophie and Meryl also share the Elixir-specific challenges they encountered
    while developing applications for 2U, how Elixir’s failure-first programming capability
    guided them, how they prepare for training workshops, and the productivity hacks
    that keep them focused and energized. </p>\n\n<p>Key Points From This Episode:</p>\n\n<p>•
    How Sophie and Meryl know each other from working and studying at the Flatiron
    School. <br>\n• Frame.io as a tool that facilitates the communication between
    video editors and clients. <br>\n• Meryl’s new role as a full-stack developer
    working with Elixir and React. <br>\n• The projects they worked on at Flatiron
    and partnering with various companies like 2U. <br>\n• Their secret to developing
    new features while also introducing new team members to Elixir.<br><br>\n• The
    benefits of pair programming and teaching a programming language to others. <br>\n•
    Reserving time to celebrate wins and knowledge share during training events. <br>\n•
    Key lessons they learned from their collaboration with the 2U team. <br>\n• Elixir-specific
    challenges during the development of the applications project with 2U. <br>\n•
    How Elixir’s failure-first programming capability ultimately helps developers.
    <br>\n• Sophie and Meryl’s experience using LiveView at Flatiron and the problems
    encountered. <br>\n• The work that went into preparing for training workshops.
    <br>\n• Advice for teaching someone who is not technical to become a working developer.<br>\n•
    Productivity hacks to stay focused and regain energy. </p>\n\n<p>Links Mentioned
    in Today’s Episode:</p>\n\n<p>Sophie DeBenedetto on LinkedIn — <a href=\"https://www.linkedin.com/in/sophiedebenedetto/\"
    rel=\"nofollow\">https://www.linkedin.com/in/sophiedebenedetto/</a><br>\nSophie
    DeBenedetto on Twitter — <a href=\"https://twitter.com/sm_debenedetto\" rel=\"nofollow\">https://twitter.com/sm_debenedetto</a><br>\nMeryl
    Dakin in LinkedIn — <a href=\"https://www.linkedin.com/in/meryldakin/\" rel=\"nofollow\">https://www.linkedin.com/in/meryldakin/</a><br>\nMeryl
    Dakin on Twitter — <a href=\"https://twitter.com/meryldakin\" rel=\"nofollow\">https://twitter.com/meryldakin</a><br>\nEric
    Oestrich — <a href=\"https://oestrich.org\" rel=\"nofollow\">https://oestrich.org</a><br>\nFrame.io
    — <a href=\"https://frame.io\" rel=\"nofollow\">https://frame.io</a><br>\nGitHub
    — <a href=\"https://github.com\" rel=\"nofollow\">https://github.com</a><br>\nFlatiron
    School — <a href=\"https://flatironschool.com\" rel=\"nofollow\">https://flatironschool.com</a><br>\nElixir
    — <a href=\"https://elixir-lang.org\" rel=\"nofollow\">https://elixir-lang.org</a><br>\nReact
    — <a href=\"https://reactjs.org\" rel=\"nofollow\">https://reactjs.org</a><br>\n2U
    — <a href=\"https://2u.com\" rel=\"nofollow\">https://2u.com</a><br>\nKubernetes
    — <a href=\"https://kubernetes.io\" rel=\"nofollow\">https://kubernetes.io</a><br>\nRuby
    — <a href=\"https://www.ruby-lang.org/en/\" rel=\"nofollow\">https://www.ruby-lang.org/en/</a><br>\nElixir
    School — <a href=\"https://elixirschool.com/en/\" rel=\"nofollow\">https://elixirschool.com/en/</a><br>\nDrawing
    on the Right Side of the Brain — <a href=\"https://www.amazon.com/Drawing-Right-Side-Brain-Definitive/dp/1585429201\"
    rel=\"nofollow\">https://www.amazon.com/Drawing-Right-Side-Brain-Definitive/dp/1585429201</a><br>\nEtsy
    — <a href=\"https://www.etsy.com\" rel=\"nofollow\">https://www.etsy.com</a><br>\nEMPEX
    NYC Conference — <a href=\"https://empex.co/nyc.html\" rel=\"nofollow\">https://empex.co/nyc.html</a><br>\nSmartLogic
    — <a href=\"https://smartlogic.io/\" rel=\"nofollow\">https://smartlogic.io/</a>
    </p><p>Special Guests: Meryl Dakin and Sophie DeBenedetto.</p>\n      "
- title: Brooklyn Zelenka on Functional Programming
  slug: s3e9-zelenka
  link: https://podcast.smartlogic.io/s3e9-zelenka
  guid: 590ef7b4-3a91-4c74-9325-2568d7adecdb
  pubDate: Thu, 23 Jan 2020 06:00:00 -0500
  description: "In today’s episode we have one of our favorite recurring guests, Brooklyn
    Zelenka, joining us once again! Brooklyn has been on the show in both the first
    and second seasons to speak about Elixir and functional programming. In those
    conversations, it came up that this topic is far from exhausted, and since Season
    3's theme is working with Elixir, we thought it would be great to have Brooklyn
    on for a third time. Today, Brooklyn does not speak to Elixir specifically though,
    but on functional programming more broadly. Fission, her company which is working
    on developing next-generation hostless apps, actually uses Haskel, but Brooklyn
    has a ton of experience across the board. She gives us some great insights into
    what makes the functional versus OOP paradigm great and helps us to understand
    some of the inner workings of both worlds, talking about abstraction, application,
    data orientation, and more. Interestingly, Brooklyn does employ some imperative
    programming in her company through the use of Typescript, but uses a functional
    style to get around the context switch. We spend some time toward the end of the
    show digging deeper into macros, and Brooklyn helps to revise understandings of
    them as code which writes more code as well as clarifies the term 'homoiconic'
    as it relates to ASTs. Brooklyn covers a whole lot more today so hop on for a
    deep dive into functional programming with today's great guest.\nKey Points From
    This Episode:\n• Why Brooklyn uses FPE: it can be reused and reasoned about.\n•
    Two things that functions provide: abstraction and application.\n• Data orientation
    and hiding information: imperative vs functional paradigms.\n• Understanding imperative
    programming: it’s less structured and hard to reason about.\n• Challenges experienced
    imperative programmers face with functional programming.\n• Differences between
    Elixir, Erlang, Haskel, Elm, and Clojure.\n• Using Clojure: tradeoffs, distinctions,
    tooling, flexibility, and compatibility with Java.\n• The language Brooklyn could
    use if only one existed: Racket.\n• Bridging functional and imperative paradigms
    through disciplined use of style.\n• Segfaults in Haskell related to its compatibility
    with lib C.\n• How to use Musl instead of lib C by employing docker files.\n•
    Algebraic types and why static types aren’t hindrances in functional languages.\n•
    Preferences for tests or proofs and their role in finding types valuable.\n• Macros
    as compile-time functions that are difficult to debug.\n• A definition of a ‘homoiconic’:
    high-level syntax which represents the AST.\n• What makes C macros different from
    Lisp ones.\n• Architecture in Elixir and the need for a more user-friendly Haskell.\nLinks
    Mentioned in Today’s Episode:\nSmartLogic — https://smartlogic.io/ \nBrooklyn
    Zelenka on LinkedIn — https://www.linkedin.com/in/brooklynzelenka/\nFission —
    https://fission.codes/\nSeven Languages in Seven Weeks — https://www.amazon.com/Seven-Languages-Weeks-Programming-Programmers/dp/193435659X\nChris
    Keathley — https://keathley.io/\nHackers and Painters — https://www.amazon.com/Hackers-Painters-Big-Ideas-Computer/dp/1449389554\nPaul
    Graham — http://www.paulgraham.com/\n Special Guest: Brooklyn Zelenka.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/590ef7b4-3a91-4c74-9325-2568d7adecdb.mp3
    length: '57370076'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '3'
    author: SmartLogic LLC
    subtitle: In today’s episode we have one of our favorite recurring guests, Brooklyn
      Zelenka, joining us once again! Brooklyn has been on the show in both the first
      and second seasons to speak about Elixir and functional programming. In those
      conversations, it came up that this topic is far from exhausted, and since Season
      3's theme is working with Elixir, we thought it would be great to have Brooklyn
      on for a third time. Today, Brooklyn does not speak to Elixir specifically though,
      but on functional programming more broadly. Fission, her company which is working
      on developing next-generation hostless apps, actually uses Haskel, but Brooklyn
      has a ton of experience across the board. She gives us some great insights into
      what makes the functional versus OOP paradigm great and helps us to understand
      some of the inner workings of both worlds, talking about abstraction, application,
      data orientation, and more. Interestingly, Brooklyn does employ some imperative
      programming in her company through the use of Typescript, but uses a functional
      style to get around the context switch. We spend some time toward the end of
      the show digging deeper into macros, and Brooklyn helps to revise understandings
      of them as code which writes more code as well as clarifies the term 'homoiconic'
      as it relates to ASTs. Brooklyn covers a whole lot more today so hop on for
      a deep dive into functional programming with today's great guest.
    duration: '39:26'
    explicit: 'no'
    keywords: elixir, phoenix, fission
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>In today’s episode we have one of our favorite recurring
      guests, Brooklyn Zelenka, joining us once again! Brooklyn has been on the show
      in both the first and second seasons to speak about Elixir and functional programming.
      In those conversations, it came up that this topic is far from exhausted, and
      since Season 3&#39;s theme is working with Elixir, we thought it would be great
      to have Brooklyn on for a third time. Today, Brooklyn does not speak to Elixir
      specifically though, but on functional programming more broadly. Fission, her
      company which is working on developing next-generation hostless apps, actually
      uses Haskel, but Brooklyn has a ton of experience across the board. She gives
      us some great insights into what makes the functional versus OOP paradigm great
      and helps us to understand some of the inner workings of both worlds, talking
      about abstraction, application, data orientation, and more. Interestingly, Brooklyn
      does employ some imperative programming in her company through the use of Typescript,
      but uses a functional style to get around the context switch. We spend some
      time toward the end of the show digging deeper into macros, and Brooklyn helps
      to revise understandings of them as code which writes more code as well as clarifies
      the term &#39;homoiconic&#39; as it relates to ASTs. Brooklyn covers a whole
      lot more today so hop on for a deep dive into functional programming with today&#39;s
      great guest.</p>\n\n<p><strong>Key Points From This Episode:</strong></p>\n\n<p>•
      Why Brooklyn uses FPE: it can be reused and reasoned about.<br>\n• Two things
      that functions provide: abstraction and application.<br>\n• Data orientation
      and hiding information: imperative vs functional paradigms.<br>\n• Understanding
      imperative programming: it’s less structured and hard to reason about.<br>\n•
      Challenges experienced imperative programmers face with functional programming.<br>\n•
      Differences between Elixir, Erlang, Haskel, Elm, and Clojure.<br>\n• Using Clojure:
      tradeoffs, distinctions, tooling, flexibility, and compatibility with Java.<br>\n•
      The language Brooklyn could use if only one existed: Racket.<br>\n• Bridging
      functional and imperative paradigms through disciplined use of style.<br>\n•
      Segfaults in Haskell related to its compatibility with lib C.<br>\n• How to
      use Musl instead of lib C by employing docker files.<br>\n• Algebraic types
      and why static types aren’t hindrances in functional languages.<br>\n• Preferences
      for tests or proofs and their role in finding types valuable.<br>\n• Macros
      as compile-time functions that are difficult to debug.<br>\n• A definition of
      a ‘homoiconic’: high-level syntax which represents the AST.<br>\n• What makes
      C macros different from Lisp ones.<br>\n• Architecture in Elixir and the need
      for a more user-friendly Haskell.</p>\n\n<p><strong>Links Mentioned in Today’s
      Episode:</strong></p>\n\n<p>SmartLogic — <a href=\"https://smartlogic.io/\"
      rel=\"nofollow\">https://smartlogic.io/</a> <br>\nBrooklyn Zelenka on LinkedIn
      — <a href=\"https://www.linkedin.com/in/brooklynzelenka/\" rel=\"nofollow\">https://www.linkedin.com/in/brooklynzelenka/</a><br>\nFission
      — <a href=\"https://fission.codes/\" rel=\"nofollow\">https://fission.codes/</a><br>\nSeven
      Languages in Seven Weeks — <a href=\"https://www.amazon.com/Seven-Languages-Weeks-Programming-Programmers/dp/193435659X\"
      rel=\"nofollow\">https://www.amazon.com/Seven-Languages-Weeks-Programming-Programmers/dp/193435659X</a><br>\nChris
      Keathley — <a href=\"https://keathley.io/\" rel=\"nofollow\">https://keathley.io/</a><br>\nHackers
      and Painters — <a href=\"https://www.amazon.com/Hackers-Painters-Big-Ideas-Computer/dp/1449389554\"
      rel=\"nofollow\">https://www.amazon.com/Hackers-Painters-Big-Ideas-Computer/dp/1449389554</a><br>\nPaul
      Graham — <a href=\"http://www.paulgraham.com/\" rel=\"nofollow\">http://www.paulgraham.com/</a></p><p>Special
      Guest: Brooklyn Zelenka.</p>\n      "
  contentEncoded: "\n        <p>In today’s episode we have one of our favorite recurring
    guests, Brooklyn Zelenka, joining us once again! Brooklyn has been on the show
    in both the first and second seasons to speak about Elixir and functional programming.
    In those conversations, it came up that this topic is far from exhausted, and
    since Season 3&#39;s theme is working with Elixir, we thought it would be great
    to have Brooklyn on for a third time. Today, Brooklyn does not speak to Elixir
    specifically though, but on functional programming more broadly. Fission, her
    company which is working on developing next-generation hostless apps, actually
    uses Haskel, but Brooklyn has a ton of experience across the board. She gives
    us some great insights into what makes the functional versus OOP paradigm great
    and helps us to understand some of the inner workings of both worlds, talking
    about abstraction, application, data orientation, and more. Interestingly, Brooklyn
    does employ some imperative programming in her company through the use of Typescript,
    but uses a functional style to get around the context switch. We spend some time
    toward the end of the show digging deeper into macros, and Brooklyn helps to revise
    understandings of them as code which writes more code as well as clarifies the
    term &#39;homoiconic&#39; as it relates to ASTs. Brooklyn covers a whole lot more
    today so hop on for a deep dive into functional programming with today&#39;s great
    guest.</p>\n\n<p><strong>Key Points From This Episode:</strong></p>\n\n<p>• Why
    Brooklyn uses FPE: it can be reused and reasoned about.<br>\n• Two things that
    functions provide: abstraction and application.<br>\n• Data orientation and hiding
    information: imperative vs functional paradigms.<br>\n• Understanding imperative
    programming: it’s less structured and hard to reason about.<br>\n• Challenges
    experienced imperative programmers face with functional programming.<br>\n• Differences
    between Elixir, Erlang, Haskel, Elm, and Clojure.<br>\n• Using Clojure: tradeoffs,
    distinctions, tooling, flexibility, and compatibility with Java.<br>\n• The language
    Brooklyn could use if only one existed: Racket.<br>\n• Bridging functional and
    imperative paradigms through disciplined use of style.<br>\n• Segfaults in Haskell
    related to its compatibility with lib C.<br>\n• How to use Musl instead of lib
    C by employing docker files.<br>\n• Algebraic types and why static types aren’t
    hindrances in functional languages.<br>\n• Preferences for tests or proofs and
    their role in finding types valuable.<br>\n• Macros as compile-time functions
    that are difficult to debug.<br>\n• A definition of a ‘homoiconic’: high-level
    syntax which represents the AST.<br>\n• What makes C macros different from Lisp
    ones.<br>\n• Architecture in Elixir and the need for a more user-friendly Haskell.</p>\n\n<p><strong>Links
    Mentioned in Today’s Episode:</strong></p>\n\n<p>SmartLogic — <a href=\"https://smartlogic.io/\"
    rel=\"nofollow\">https://smartlogic.io/</a> <br>\nBrooklyn Zelenka on LinkedIn
    — <a href=\"https://www.linkedin.com/in/brooklynzelenka/\" rel=\"nofollow\">https://www.linkedin.com/in/brooklynzelenka/</a><br>\nFission
    — <a href=\"https://fission.codes/\" rel=\"nofollow\">https://fission.codes/</a><br>\nSeven
    Languages in Seven Weeks — <a href=\"https://www.amazon.com/Seven-Languages-Weeks-Programming-Programmers/dp/193435659X\"
    rel=\"nofollow\">https://www.amazon.com/Seven-Languages-Weeks-Programming-Programmers/dp/193435659X</a><br>\nChris
    Keathley — <a href=\"https://keathley.io/\" rel=\"nofollow\">https://keathley.io/</a><br>\nHackers
    and Painters — <a href=\"https://www.amazon.com/Hackers-Painters-Big-Ideas-Computer/dp/1449389554\"
    rel=\"nofollow\">https://www.amazon.com/Hackers-Painters-Big-Ideas-Computer/dp/1449389554</a><br>\nPaul
    Graham — <a href=\"http://www.paulgraham.com/\" rel=\"nofollow\">http://www.paulgraham.com/</a></p><p>Special
    Guest: Brooklyn Zelenka.</p>\n      "
- title: Bruce and Maggie Tate from Groxio on Training
  slug: s3e8-groxio
  link: https://podcast.smartlogic.io/s3e8-groxio
  guid: f54652e5-c7c3-4165-9c4b-0ddd2ca2d14b
  pubDate: Thu, 16 Jan 2020 06:00:00 -0500
  description: "Groxio is a great platform that allows programmers to learn new languages
    easily and broaden their horizons. Our guests today are the team behind Groxio,
    Bruce and Maggie Tate! In our discussion, we cover the basics and the not so basics
    of what they do, from how they got into the Elixir world and founded Groxio to
    the conferences they run and the books they have published. We also talk about
    the benefits of learning multiple languages and Bruce makes a strong argument
    for the influence that smaller coding languages have had on his Elixir skills.
    Maggie and Bruce open up about having a professional and personal partnership
    and how they manage their marriage and businesses side by side. To finish off
    we hear about all the exciting things to expect at the Lone Star Conference this
    year and how it is going to be even better than last year's!\nKey Points From
    This Episode:\n• Bruce and Maggie's background in Elixir and how they started
    Groxio. \n• What sets Groxio apart from similar technical education companies.
    \ \n• The inspiration that Bruce got from the Crystal and Pony languages.\n• How
    curiosity and dopamine are linked; following new and interesting pathways. \n•
    Maggie and Bruce's personal and professional partnership and how they manage it.
    \n• The Elixir books that still need to be written and under-appreciated published
    ones.\n• A guide to Bruce's books and which to read for particular applications.
    \n• Running a conference; the stressful and fun parts for Maggie and Bruce.\n•
    Aspirations for the conferences and what to expect at this year's events. \n•
    Exciting speakers that will be appearing at the Lone Star Conference. \n• The
    controversy around the new Lone Star bat logo! \n• A few special plugs from our
    guests for things they are passionate about.\nLinks Mentioned in Today’s Episode:\nSmartLogic
    — https://smartlogic.io/ \nBruce and Maggie Tate — https://grox.io/about\nBruce
    Tate on Twitter — https://twitter.com/redrapids\nMaggie Tate on Twitter — https://twitter.com/gardenertate\nGroxio
    — https://grox.io/\nGig City Elixir — https://www.gigcityelixir.com/\nLone Star
    Elixir — https://lonestarelixir.com/\nCrystal — https://crystal-lang.org/\nPony
    — https://www.ponylang.io/\nJoe Armstrong — https://joearms.github.io/\nElixir
    in Action — https://www.amazon.com/Elixir-Action-Sa%C5%A1a-Juri-cacute/dp/161729201X\nDesigning
    Elixir Systems — https://www.amazon.com/Designing-Elixir-Systems-OTP-Self-healing/dp/1680506617/\nAndrea
    Leopardi — https://confengine.com/user/andrea-leopardi\n Special Guests: Bruce
    Tate and Maggie Tate.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/f54652e5-c7c3-4165-9c4b-0ddd2ca2d14b.mp3
    length: '55402558'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '3'
    author: SmartLogic LLC
    subtitle: Groxio is a great platform that allows programmers to learn new languages
      easily and broaden their horizons. Our guests today are the team behind Groxio,
      Bruce and Maggie Tate! In our discussion, we cover the basics and the not so
      basics of what they do, from how they got into the Elixir world and founded
      Groxio to the conferences they run and the books they have published. We also
      talk about the benefits of learning multiple languages and Bruce makes a strong
      argument for the influence that smaller coding languages have had on his Elixir
      skills. Maggie and Bruce open up about having a professional and personal partnership
      and how they manage their marriage and businesses side by side. To finish off
      we hear about all the exciting things to expect at the Lone Star Conference
      this year and how it is going to be even better than last year's!
    duration: '38:04'
    explicit: 'no'
    keywords: elixir, phoenix, groxio, lonestar elixir
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>Groxio is a great platform that allows programmers to learn
      new languages easily and broaden their horizons. Our guests today are the team
      behind Groxio, Bruce and Maggie Tate! In our discussion, we cover the basics
      and the not so basics of what they do, from how they got into the Elixir world
      and founded Groxio to the conferences they run and the books they have published.
      We also talk about the benefits of learning multiple languages and Bruce makes
      a strong argument for the influence that smaller coding languages have had on
      his Elixir skills. Maggie and Bruce open up about having a professional and
      personal partnership and how they manage their marriage and businesses side
      by side. To finish off we hear about all the exciting things to expect at the
      Lone Star Conference this year and how it is going to be even better than last
      year&#39;s!</p>\n\n<p><strong>Key Points From This Episode:</strong></p>\n\n<p>•
      Bruce and Maggie&#39;s background in Elixir and how they started Groxio. <br>\n•
      What sets Groxio apart from similar technical education companies.<br><br>\n•
      The inspiration that Bruce got from the Crystal and Pony languages.<br>\n• How
      curiosity and dopamine are linked; following new and interesting pathways. <br>\n•
      Maggie and Bruce&#39;s personal and professional partnership and how they manage
      it. <br>\n• The Elixir books that still need to be written and under-appreciated
      published ones.<br>\n• A guide to Bruce&#39;s books and which to read for particular
      applications. <br>\n• Running a conference; the stressful and fun parts for
      Maggie and Bruce.<br>\n• Aspirations for the conferences and what to expect
      at this year&#39;s events. <br>\n• Exciting speakers that will be appearing
      at the Lone Star Conference. <br>\n• The controversy around the new Lone Star
      bat logo! <br>\n• A few special plugs from our guests for things they are passionate
      about.</p>\n\n<p><strong>Links Mentioned in Today’s Episode:</strong></p>\n\n<p>SmartLogic
      — <a href=\"https://smartlogic.io/\" rel=\"nofollow\">https://smartlogic.io/</a>
      <br>\nBruce and Maggie Tate — <a href=\"https://grox.io/about\" rel=\"nofollow\">https://grox.io/about</a><br>\nBruce
      Tate on Twitter — <a href=\"https://twitter.com/redrapids\" rel=\"nofollow\">https://twitter.com/redrapids</a><br>\nMaggie
      Tate on Twitter — <a href=\"https://twitter.com/gardenertate\" rel=\"nofollow\">https://twitter.com/gardenertate</a><br>\nGroxio
      — <a href=\"https://grox.io/\" rel=\"nofollow\">https://grox.io/</a><br>\nGig
      City Elixir — <a href=\"https://www.gigcityelixir.com/\" rel=\"nofollow\">https://www.gigcityelixir.com/</a><br>\nLone
      Star Elixir — <a href=\"https://lonestarelixir.com/\" rel=\"nofollow\">https://lonestarelixir.com/</a><br>\nCrystal
      — <a href=\"https://crystal-lang.org/\" rel=\"nofollow\">https://crystal-lang.org/</a><br>\nPony
      — <a href=\"https://www.ponylang.io/\" rel=\"nofollow\">https://www.ponylang.io/</a><br>\nJoe
      Armstrong — <a href=\"https://joearms.github.io/\" rel=\"nofollow\">https://joearms.github.io/</a><br>\nElixir
      in Action — <a href=\"https://www.amazon.com/Elixir-Action-Sa%C5%A1a-Juri-cacute/dp/161729201X\"
      rel=\"nofollow\">https://www.amazon.com/Elixir-Action-Sa%C5%A1a-Juri-cacute/dp/161729201X</a><br>\nDesigning
      Elixir Systems — <a href=\"https://www.amazon.com/Designing-Elixir-Systems-OTP-Self-healing/dp/1680506617/\"
      rel=\"nofollow\">https://www.amazon.com/Designing-Elixir-Systems-OTP-Self-healing/dp/1680506617/</a><br>\nAndrea
      Leopardi — <a href=\"https://confengine.com/user/andrea-leopardi\" rel=\"nofollow\">https://confengine.com/user/andrea-leopardi</a></p><p>Special
      Guests: Bruce Tate and Maggie Tate.</p>\n      "
  contentEncoded: "\n        <p>Groxio is a great platform that allows programmers
    to learn new languages easily and broaden their horizons. Our guests today are
    the team behind Groxio, Bruce and Maggie Tate! In our discussion, we cover the
    basics and the not so basics of what they do, from how they got into the Elixir
    world and founded Groxio to the conferences they run and the books they have published.
    We also talk about the benefits of learning multiple languages and Bruce makes
    a strong argument for the influence that smaller coding languages have had on
    his Elixir skills. Maggie and Bruce open up about having a professional and personal
    partnership and how they manage their marriage and businesses side by side. To
    finish off we hear about all the exciting things to expect at the Lone Star Conference
    this year and how it is going to be even better than last year&#39;s!</p>\n\n<p><strong>Key
    Points From This Episode:</strong></p>\n\n<p>• Bruce and Maggie&#39;s background
    in Elixir and how they started Groxio. <br>\n• What sets Groxio apart from similar
    technical education companies.<br><br>\n• The inspiration that Bruce got from
    the Crystal and Pony languages.<br>\n• How curiosity and dopamine are linked;
    following new and interesting pathways. <br>\n• Maggie and Bruce&#39;s personal
    and professional partnership and how they manage it. <br>\n• The Elixir books
    that still need to be written and under-appreciated published ones.<br>\n• A guide
    to Bruce&#39;s books and which to read for particular applications. <br>\n• Running
    a conference; the stressful and fun parts for Maggie and Bruce.<br>\n• Aspirations
    for the conferences and what to expect at this year&#39;s events. <br>\n• Exciting
    speakers that will be appearing at the Lone Star Conference. <br>\n• The controversy
    around the new Lone Star bat logo! <br>\n• A few special plugs from our guests
    for things they are passionate about.</p>\n\n<p><strong>Links Mentioned in Today’s
    Episode:</strong></p>\n\n<p>SmartLogic — <a href=\"https://smartlogic.io/\" rel=\"nofollow\">https://smartlogic.io/</a>
    <br>\nBruce and Maggie Tate — <a href=\"https://grox.io/about\" rel=\"nofollow\">https://grox.io/about</a><br>\nBruce
    Tate on Twitter — <a href=\"https://twitter.com/redrapids\" rel=\"nofollow\">https://twitter.com/redrapids</a><br>\nMaggie
    Tate on Twitter — <a href=\"https://twitter.com/gardenertate\" rel=\"nofollow\">https://twitter.com/gardenertate</a><br>\nGroxio
    — <a href=\"https://grox.io/\" rel=\"nofollow\">https://grox.io/</a><br>\nGig
    City Elixir — <a href=\"https://www.gigcityelixir.com/\" rel=\"nofollow\">https://www.gigcityelixir.com/</a><br>\nLone
    Star Elixir — <a href=\"https://lonestarelixir.com/\" rel=\"nofollow\">https://lonestarelixir.com/</a><br>\nCrystal
    — <a href=\"https://crystal-lang.org/\" rel=\"nofollow\">https://crystal-lang.org/</a><br>\nPony
    — <a href=\"https://www.ponylang.io/\" rel=\"nofollow\">https://www.ponylang.io/</a><br>\nJoe
    Armstrong — <a href=\"https://joearms.github.io/\" rel=\"nofollow\">https://joearms.github.io/</a><br>\nElixir
    in Action — <a href=\"https://www.amazon.com/Elixir-Action-Sa%C5%A1a-Juri-cacute/dp/161729201X\"
    rel=\"nofollow\">https://www.amazon.com/Elixir-Action-Sa%C5%A1a-Juri-cacute/dp/161729201X</a><br>\nDesigning
    Elixir Systems — <a href=\"https://www.amazon.com/Designing-Elixir-Systems-OTP-Self-healing/dp/1680506617/\"
    rel=\"nofollow\">https://www.amazon.com/Designing-Elixir-Systems-OTP-Self-healing/dp/1680506617/</a><br>\nAndrea
    Leopardi — <a href=\"https://confengine.com/user/andrea-leopardi\" rel=\"nofollow\">https://confengine.com/user/andrea-leopardi</a></p><p>Special
    Guests: Bruce Tate and Maggie Tate.</p>\n      "
- title: Dan Ivovich from SmartLogic on Hiring and Training
  slug: s3e7-ivovich
  link: https://podcast.smartlogic.io/s3e7-ivovich
  guid: ea443f10-25a6-4570-9fe8-20e7f6624671
  pubDate: Thu, 09 Jan 2020 06:00:00 -0500
  description: "On today's show, we are joined by Dan Ivovich from our team here at
    SmartLogic! Dan is the Director of Development Operations and has already been
    a guest and cohost a few times on the show. Today we are talking about hiring
    and training and his experience with these tasks at the company and especially
    concerning Elixir. We discuss the challenges Dan has faced in recruiting and the
    ways in which SmartLogic has lined up resumes and possible candidates through
    events and meetups. Dan explains some of the difficulties that are common for
    programmers transitioning into Elixir and how the company approaches the tasks
    of onboarding and ongoing support. We also get into Dan's favorite resources and
    tools for staying abreast of Elixir and his recommendations for practices to learn
    fast as a newcomer before he explains how he thinks about continual learning and
    expanding his own skillset. The conversation finishes with some thoughts and reflections
    on functional programming from our guest, so make sure to tune in for all of that
    and more!\nKey Points From This Episode:\nDan's role at SmartLogic and how he
    leads the team. \nRecruiting new employees; collecting resumes and attending events.
    \nChallenges posed by recruiting good Elixir programmers and who to look for.
    \ \nSticking points for people transitioning into Elixir from other languages.
    \nThe stack at SmartLogic and the number of projects based in Elixir. \nOnboarding
    at the company; skills that are transferable to Elixir. \nProfessional development
    and ongoing support for team members. \nDan's favorite tools and resources for
    learning Elixir. \nContinual learning and Dan's strategies for growing his skillset.\nA
    simple definition of functional programming and Dan's early experiences with it.
    \nLinks Mentioned in Today’s Episode:\nSmartLogic — https://smartlogic.io/ \nDan
    Ivovich — https://www.danivovich.com/\nDan Ivovich on Twitter — https://twitter.com/danivovich\nElixirConf
    — https://elixirconf.com/events\nJava — https://www.java.com/\nRuby — https://www.ruby-lang.org/\nPython
    — https://www.python.org/\nRails — https://rubyonrails.org/\nRust — https://www.rust-lang.org/\nGO
    — https://golang.org/\nTwitch — https://www.twitch.tv/\nBruce Tate — https://codesync.global/speaker/bruce-tate/\nScala
    — https://www.scala-lang.org/ Special Guest: Dan Ivovich.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/ea443f10-25a6-4570-9fe8-20e7f6624671.mp3
    length: '33205850'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '3'
    author: SmartLogic LLC
    subtitle: On today's show, we are joined by Dan Ivovich from our team here at
      SmartLogic! Dan is the Director of Development Operations and has already been
      a guest and cohost a few times on the show. Today we are talking about hiring
      and training and his experience with these tasks at the company and especially
      concerning Elixir. We discuss the challenges Dan has faced in recruiting and
      the ways in which SmartLogic has lined up resumes and possible candidates through
      events and meetups. Dan explains some of the difficulties that are common for
      programmers transitioning into Elixir and how the company approaches the tasks
      of onboarding and ongoing support. We also get into Dan's favorite resources
      and tools for staying abreast of Elixir and his recommendations for practices
      to learn fast as a newcomer before he explains how he thinks about continual
      learning and expanding his own skillset. The conversation finishes with some
      thoughts and reflections on functional programming from our guest, so make sure
      to tune in for all of that and more!
    duration: '22:39'
    explicit: 'no'
    keywords: ''
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>On today&#39;s show, we are joined by Dan Ivovich from
      our team here at SmartLogic! Dan is the Director of Development Operations and
      has already been a guest and cohost a few times on the show. Today we are talking
      about hiring and training and his experience with these tasks at the company
      and especially concerning Elixir. We discuss the challenges Dan has faced in
      recruiting and the ways in which SmartLogic has lined up resumes and possible
      candidates through events and meetups. Dan explains some of the difficulties
      that are common for programmers transitioning into Elixir and how the company
      approaches the tasks of onboarding and ongoing support. We also get into Dan&#39;s
      favorite resources and tools for staying abreast of Elixir and his recommendations
      for practices to learn fast as a newcomer before he explains how he thinks about
      continual learning and expanding his own skillset. The conversation finishes
      with some thoughts and reflections on functional programming from our guest,
      so make sure to tune in for all of that and more!</p>\n\n<p><strong>Key Points
      From This Episode:</strong></p>\n\n<ul>\n<li>Dan&#39;s role at SmartLogic and
      how he leads the team. </li>\n<li>Recruiting new employees; collecting resumes
      and attending events. </li>\n<li>Challenges posed by recruiting good Elixir
      programmers and who to look for.<br></li>\n<li>Sticking points for people transitioning
      into Elixir from other languages. </li>\n<li>The stack at SmartLogic and the
      number of projects based in Elixir. </li>\n<li>Onboarding at the company; skills
      that are transferable to Elixir. </li>\n<li>Professional development and ongoing
      support for team members. </li>\n<li>Dan&#39;s favorite tools and resources
      for learning Elixir. </li>\n<li>Continual learning and Dan&#39;s strategies
      for growing his skillset.</li>\n<li>A simple definition of functional programming
      and Dan&#39;s early experiences with it. </li>\n</ul>\n\n<p><strong>Links Mentioned
      in Today’s Episode:</strong></p>\n\n<p>SmartLogic — <a href=\"https://smartlogic.io/\"
      rel=\"nofollow\">https://smartlogic.io/</a> <br>\nDan Ivovich — <a href=\"https://www.danivovich.com/\"
      rel=\"nofollow\">https://www.danivovich.com/</a><br>\nDan Ivovich on Twitter
      — <a href=\"https://twitter.com/danivovich\" rel=\"nofollow\">https://twitter.com/danivovich</a><br>\nElixirConf
      — <a href=\"https://elixirconf.com/events\" rel=\"nofollow\">https://elixirconf.com/events</a><br>\nJava
      — <a href=\"https://www.java.com/\" rel=\"nofollow\">https://www.java.com/</a><br>\nRuby
      — <a href=\"https://www.ruby-lang.org/\" rel=\"nofollow\">https://www.ruby-lang.org/</a><br>\nPython
      — <a href=\"https://www.python.org/\" rel=\"nofollow\">https://www.python.org/</a><br>\nRails
      — <a href=\"https://rubyonrails.org/\" rel=\"nofollow\">https://rubyonrails.org/</a><br>\nRust
      — <a href=\"https://www.rust-lang.org/\" rel=\"nofollow\">https://www.rust-lang.org/</a><br>\nGO
      — <a href=\"https://golang.org/\" rel=\"nofollow\">https://golang.org/</a><br>\nTwitch
      — <a href=\"https://www.twitch.tv/\" rel=\"nofollow\">https://www.twitch.tv/</a><br>\nBruce
      Tate — <a href=\"https://codesync.global/speaker/bruce-tate/\" rel=\"nofollow\">https://codesync.global/speaker/bruce-tate/</a><br>\nScala
      — <a href=\"https://www.scala-lang.org/\" rel=\"nofollow\">https://www.scala-lang.org/</a></p><p>Special
      Guest: Dan Ivovich.</p>\n      "
  contentEncoded: "\n        <p>On today&#39;s show, we are joined by Dan Ivovich
    from our team here at SmartLogic! Dan is the Director of Development Operations
    and has already been a guest and cohost a few times on the show. Today we are
    talking about hiring and training and his experience with these tasks at the company
    and especially concerning Elixir. We discuss the challenges Dan has faced in recruiting
    and the ways in which SmartLogic has lined up resumes and possible candidates
    through events and meetups. Dan explains some of the difficulties that are common
    for programmers transitioning into Elixir and how the company approaches the tasks
    of onboarding and ongoing support. We also get into Dan&#39;s favorite resources
    and tools for staying abreast of Elixir and his recommendations for practices
    to learn fast as a newcomer before he explains how he thinks about continual learning
    and expanding his own skillset. The conversation finishes with some thoughts and
    reflections on functional programming from our guest, so make sure to tune in
    for all of that and more!</p>\n\n<p><strong>Key Points From This Episode:</strong></p>\n\n<ul>\n<li>Dan&#39;s
    role at SmartLogic and how he leads the team. </li>\n<li>Recruiting new employees;
    collecting resumes and attending events. </li>\n<li>Challenges posed by recruiting
    good Elixir programmers and who to look for.<br></li>\n<li>Sticking points for
    people transitioning into Elixir from other languages. </li>\n<li>The stack at
    SmartLogic and the number of projects based in Elixir. </li>\n<li>Onboarding at
    the company; skills that are transferable to Elixir. </li>\n<li>Professional development
    and ongoing support for team members. </li>\n<li>Dan&#39;s favorite tools and
    resources for learning Elixir. </li>\n<li>Continual learning and Dan&#39;s strategies
    for growing his skillset.</li>\n<li>A simple definition of functional programming
    and Dan&#39;s early experiences with it. </li>\n</ul>\n\n<p><strong>Links Mentioned
    in Today’s Episode:</strong></p>\n\n<p>SmartLogic — <a href=\"https://smartlogic.io/\"
    rel=\"nofollow\">https://smartlogic.io/</a> <br>\nDan Ivovich — <a href=\"https://www.danivovich.com/\"
    rel=\"nofollow\">https://www.danivovich.com/</a><br>\nDan Ivovich on Twitter —
    <a href=\"https://twitter.com/danivovich\" rel=\"nofollow\">https://twitter.com/danivovich</a><br>\nElixirConf
    — <a href=\"https://elixirconf.com/events\" rel=\"nofollow\">https://elixirconf.com/events</a><br>\nJava
    — <a href=\"https://www.java.com/\" rel=\"nofollow\">https://www.java.com/</a><br>\nRuby
    — <a href=\"https://www.ruby-lang.org/\" rel=\"nofollow\">https://www.ruby-lang.org/</a><br>\nPython
    — <a href=\"https://www.python.org/\" rel=\"nofollow\">https://www.python.org/</a><br>\nRails
    — <a href=\"https://rubyonrails.org/\" rel=\"nofollow\">https://rubyonrails.org/</a><br>\nRust
    — <a href=\"https://www.rust-lang.org/\" rel=\"nofollow\">https://www.rust-lang.org/</a><br>\nGO
    — <a href=\"https://golang.org/\" rel=\"nofollow\">https://golang.org/</a><br>\nTwitch
    — <a href=\"https://www.twitch.tv/\" rel=\"nofollow\">https://www.twitch.tv/</a><br>\nBruce
    Tate — <a href=\"https://codesync.global/speaker/bruce-tate/\" rel=\"nofollow\">https://codesync.global/speaker/bruce-tate/</a><br>\nScala
    — <a href=\"https://www.scala-lang.org/\" rel=\"nofollow\">https://www.scala-lang.org/</a></p><p>Special
    Guest: Dan Ivovich.</p>\n      "
- title: Eric Meadows Jönsson on Hex and Working with Elixir
  slug: s3e6-jonsson
  link: https://podcast.smartlogic.io/s3e6-jonsson
  guid: ef0d105d-13f1-4803-8837-341f56782510
  pubDate: Thu, 02 Jan 2020 06:00:00 -0500
  description: "We are happy to be joined in this episode by Eric Meadows Jönsson,
    creator of the hexpm package manager, and an amazing resource who works tirelessly
    to build the Elixir community. Eric presently works at Brex and was part of the
    core team at Forza previously. In keeping with our current topic of all things
    working with Elixir, Eric takes a deep dive into the work he is doing to optimize
    various interfaces at Brex. He gives us the rundown on the static compile-time
    checking project he is working on, talking about his aims to build in different
    warnings and what we can expect from the new release in that regard. You’ll also
    hear about Eric’s journey learning Elixir and how he had to change his OOP mindset
    when he got introduced to functional programming at university. He shares the
    story behind hexpm and Mint, his thoughts about the future of Hex, and some of
    the processes around accessing the private repositories on its website. We also
    hear more about Eric’s hiring procedure while working at Forza, how he teaches
    functional programming to students at ElixirConf, and some of the major performance
    bottlenecks he experiences using Hex. Tap into the incredible resource that is
    Eric and hear more about how you can link with him online to learn further in
    the future by tuning in!\nKey Points From This Episode:\nJose Valim, the Ecto
    library, and Eric’s journey with Elixir since 2012 at a coding camp.\nEarly-stage
    static compile-time checks that Eric is adding to the compiler at Brex.\nWhether
    the static compile-time checks Eric is adding constitute a type system or not.\nStatic
    compile-time checks in the current system such as undefined function warnings.\nFeatures
    of the new static compile-time check release: refactored checks, etc.\nCurrently,
    these checks happen at compile-time, or when Elixir compiles into the byte code.\nWhether
    these checks will move into BEAM: currently it’s in Elixir and at an early stage.\nThe
    Erlang compiler already does type inference during compilation. \nEric’s Erlang
    proficiency and why he had to brush up on it through using Elixir.\nWhat makes
    Eric helpful with Hex: his debugging skills and availability to answer questions.\nHow
    Eric got started with Hex adding an intake for Git packages.\nThe story behind
    Hex regarding ties to Elixir and Devinus from Pool Boy.\nTodd’s perspective on
    Eric as a smart and nice mentor who sleeps very little.\nChanges that Eric sees
    happening in Elixir.\nHex will no longer support older Elixir versions so that
    it can enable better maintenance.\nAnother change will be a refactoring of the
    resolution version algorithm.\nSecurity-related updates that Todd has been working
    on.\nPrivate versus public repositories on the hex.pm website.\nHiring challenges
    at Forza and how Eric found the right team out of scarce people.\nEric looks for
    people who love being programmers and have a passion for learning.\nTactics Eric
    uses to train functional programming such as hosting ElixirConf workshops.\nImportant
    fundamentals in functional programming: using data structures to model data, etc.\nDifferences
    between functional and object-oriented programming: data vs classes.\nThe role
    of types in Eric coming to understand functional programming better.\nPerformance
    bottlenecks in Hex such as dependency resolution.\nHow every package manager/resolver
    compromises, exemplified by NPM and Rebar3.\nOrigins of Mint: wanting http2 support
    for Hex, and more.\nLinks Mentioned in Today’s Episode:\nSmartLogic — https://smartlogic.io/
    \nEric Meadows Jönsson on GitHub – https://github.com/ericmj\nEric Meadows Jönsson
    on Hexpm — https://hex.pm/users/ericmj\nBrex — https://brex.com/\nTodd Resudek
    on LinkedIn — https://www.linkedin.com/in/toddresudek\nJustus Eapen on LinkedIn
    — https://www.linkedin.com/in/justuseapen/\nEric Oestreich on LinkedIn — https://www.linkedin.com/in/eric-oestreich-8b55aab/\nhexpm
    on GitHub — https://github.com/hexpm\nGoogle Summer of Code — https://summerofcode.withgoogle.com/\nJose
    Valim on GitHib — https://github.com/josevalim\nPool Boy — https://github.com/devinus/poolboy\nDevin
    Alexander Torres — https://github.com/devinus\nVoitech — https://www.voitech.biz/\nHex
    — https://hex.pm/\nhexpm specifications — https://github.com/hexpm/specifications\nSlack
    — https://slack.com\nIRC —https://hexchat.github.io/\nForza — https://www.forzafootball.com/women\nElixirConf
    — https://elixirconf.com/events\nChalmers University — https://www.chalmers.se/en/Pages/default.aspx\nFastly
    — https://www.fastly.com/\nNPM — https://www.npmjs.com/\nRebar 3 — https://github.com/erlang/rebar3\nMint
    — https://www.mint-lang.com/\nRuby Gems — https://rubygems.org/\nAndrea Leopardi
    on GitHub — https://github.com/whatyouhide?tab=overview&org=ForzaElixir\n Special
    Guest: Todd Resudek.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/ef0d105d-13f1-4803-8837-341f56782510.mp3
    length: '54101602'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '3'
    author: SmartLogic LLC
    subtitle: We are happy to be joined in this episode by Eric Meadows Jönsson, creator
      of the hexpm package manager, and an amazing resource who works tirelessly to
      build the Elixir community. Eric presently works at Brex and was part of the
      core team at Forza previously. In keeping with our current topic of all things
      working with Elixir, Eric takes a deep dive into the work he is doing to optimize
      various interfaces at Brex. He gives us the rundown on the static compile-time
      checking project he is working on, talking about his aims to build in different
      warnings and what we can expect from the new release in that regard. You’ll
      also hear about Eric’s journey learning Elixir and how he had to change his
      OOP mindset when he got introduced to functional programming at university.
      He shares the story behind hexpm and Mint, his thoughts about the future of
      Hex, and some of the processes around accessing the private repositories on
      its website. We also hear more about Eric’s hiring procedure while working at
      Forza, how he teaches functional programming to students at ElixirConf, and
      some of the major performance bottlenecks he experiences using Hex. Tap into
      the incredible resource that is Eric and hear more about how you can link with
      him online to learn further in the future by tuning in!
    duration: '37:10'
    explicit: 'no'
    keywords: hex, elixir, mint
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>We are happy to be joined in this episode by Eric Meadows
      Jönsson, creator of the hexpm package manager, and an amazing resource who works
      tirelessly to build the Elixir community. Eric presently works at Brex and was
      part of the core team at Forza previously. In keeping with our current topic
      of all things working with Elixir, Eric takes a deep dive into the work he is
      doing to optimize various interfaces at Brex. He gives us the rundown on the
      static compile-time checking project he is working on, talking about his aims
      to build in different warnings and what we can expect from the new release in
      that regard. You’ll also hear about Eric’s journey learning Elixir and how he
      had to change his OOP mindset when he got introduced to functional programming
      at university. He shares the story behind hexpm and Mint, his thoughts about
      the future of Hex, and some of the processes around accessing the private repositories
      on its website. We also hear more about Eric’s hiring procedure while working
      at Forza, how he teaches functional programming to students at ElixirConf, and
      some of the major performance bottlenecks he experiences using Hex. Tap into
      the incredible resource that is Eric and hear more about how you can link with
      him online to learn further in the future by tuning in!</p>\n\n<p><strong>Key
      Points From This Episode:</strong></p>\n\n<ul>\n<li>Jose Valim, the Ecto library,
      and Eric’s journey with Elixir since 2012 at a coding camp.</li>\n<li>Early-stage
      static compile-time checks that Eric is adding to the compiler at Brex.</li>\n<li>Whether
      the static compile-time checks Eric is adding constitute a type system or not.</li>\n<li>Static
      compile-time checks in the current system such as undefined function warnings.</li>\n<li>Features
      of the new static compile-time check release: refactored checks, etc.</li>\n<li>Currently,
      these checks happen at compile-time, or when Elixir compiles into the byte code.</li>\n<li>Whether
      these checks will move into BEAM: currently it’s in Elixir and at an early stage.</li>\n<li>The
      Erlang compiler already does type inference during compilation. </li>\n<li>Eric’s
      Erlang proficiency and why he had to brush up on it through using Elixir.</li>\n<li>What
      makes Eric helpful with Hex: his debugging skills and availability to answer
      questions.</li>\n<li>How Eric got started with Hex adding an intake for Git
      packages.</li>\n<li>The story behind Hex regarding ties to Elixir and Devinus
      from Pool Boy.</li>\n<li>Todd’s perspective on Eric as a smart and nice mentor
      who sleeps very little.</li>\n<li>Changes that Eric sees happening in Elixir.</li>\n<li>Hex
      will no longer support older Elixir versions so that it can enable better maintenance.</li>\n<li>Another
      change will be a refactoring of the resolution version algorithm.</li>\n<li>Security-related
      updates that Todd has been working on.</li>\n<li>Private versus public repositories
      on the hex.pm website.</li>\n<li>Hiring challenges at Forza and how Eric found
      the right team out of scarce people.</li>\n<li>Eric looks for people who love
      being programmers and have a passion for learning.</li>\n<li>Tactics Eric uses
      to train functional programming such as hosting ElixirConf workshops.</li>\n<li>Important
      fundamentals in functional programming: using data structures to model data,
      etc.</li>\n<li>Differences between functional and object-oriented programming:
      data vs classes.</li>\n<li>The role of types in Eric coming to understand functional
      programming better.</li>\n<li>Performance bottlenecks in Hex such as dependency
      resolution.</li>\n<li>How every package manager/resolver compromises, exemplified
      by NPM and Rebar3.</li>\n<li>Origins of Mint: wanting http2 support for Hex,
      and more.</li>\n</ul>\n\n<p><strong>Links Mentioned in Today’s Episode:</strong></p>\n\n<p>SmartLogic
      — <a href=\"https://smartlogic.io/\" rel=\"nofollow\">https://smartlogic.io/</a>
      <br>\nEric Meadows Jönsson on GitHub – <a href=\"https://github.com/ericmj\"
      rel=\"nofollow\">https://github.com/ericmj</a><br>\nEric Meadows Jönsson on
      Hexpm — <a href=\"https://hex.pm/users/ericmj\" rel=\"nofollow\">https://hex.pm/users/ericmj</a><br>\nBrex
      — <a href=\"https://brex.com/\" rel=\"nofollow\">https://brex.com/</a><br>\nTodd
      Resudek on LinkedIn — <a href=\"https://www.linkedin.com/in/toddresudek\" rel=\"nofollow\">https://www.linkedin.com/in/toddresudek</a><br>\nJustus
      Eapen on LinkedIn — <a href=\"https://www.linkedin.com/in/justuseapen/\" rel=\"nofollow\">https://www.linkedin.com/in/justuseapen/</a><br>\nEric
      Oestreich on LinkedIn — <a href=\"https://www.linkedin.com/in/eric-oestreich-8b55aab/\"
      rel=\"nofollow\">https://www.linkedin.com/in/eric-oestreich-8b55aab/</a><br>\nhexpm
      on GitHub — <a href=\"https://github.com/hexpm\" rel=\"nofollow\">https://github.com/hexpm</a><br>\nGoogle
      Summer of Code — <a href=\"https://summerofcode.withgoogle.com/\" rel=\"nofollow\">https://summerofcode.withgoogle.com/</a><br>\nJose
      Valim on GitHib — <a href=\"https://github.com/josevalim\" rel=\"nofollow\">https://github.com/josevalim</a><br>\nPool
      Boy — <a href=\"https://github.com/devinus/poolboy\" rel=\"nofollow\">https://github.com/devinus/poolboy</a><br>\nDevin
      Alexander Torres — <a href=\"https://github.com/devinus\" rel=\"nofollow\">https://github.com/devinus</a><br>\nVoitech
      — <a href=\"https://www.voitech.biz/\" rel=\"nofollow\">https://www.voitech.biz/</a><br>\nHex
      — <a href=\"https://hex.pm/\" rel=\"nofollow\">https://hex.pm/</a><br>\nhexpm
      specifications — <a href=\"https://github.com/hexpm/specifications\" rel=\"nofollow\">https://github.com/hexpm/specifications</a><br>\nSlack
      — <a href=\"https://slack.com\" rel=\"nofollow\">https://slack.com</a><br>\nIRC
      —<a href=\"https://hexchat.github.io/\" rel=\"nofollow\">https://hexchat.github.io/</a><br>\nForza
      — <a href=\"https://www.forzafootball.com/women\" rel=\"nofollow\">https://www.forzafootball.com/women</a><br>\nElixirConf
      — <a href=\"https://elixirconf.com/events\" rel=\"nofollow\">https://elixirconf.com/events</a><br>\nChalmers
      University — <a href=\"https://www.chalmers.se/en/Pages/default.aspx\" rel=\"nofollow\">https://www.chalmers.se/en/Pages/default.aspx</a><br>\nFastly
      — <a href=\"https://www.fastly.com/\" rel=\"nofollow\">https://www.fastly.com/</a><br>\nNPM
      — <a href=\"https://www.npmjs.com/\" rel=\"nofollow\">https://www.npmjs.com/</a><br>\nRebar
      3 — <a href=\"https://github.com/erlang/rebar3\" rel=\"nofollow\">https://github.com/erlang/rebar3</a><br>\nMint
      — <a href=\"https://www.mint-lang.com/\" rel=\"nofollow\">https://www.mint-lang.com/</a><br>\nRuby
      Gems — <a href=\"https://rubygems.org/\" rel=\"nofollow\">https://rubygems.org/</a><br>\nAndrea
      Leopardi on GitHub — <a href=\"https://github.com/whatyouhide?tab=overview&org=ForzaElixir\"
      rel=\"nofollow\">https://github.com/whatyouhide?tab=overview&amp;org=ForzaElixir</a></p><p>Special
      Guest: Todd Resudek.</p>\n      "
  contentEncoded: "\n        <p>We are happy to be joined in this episode by Eric
    Meadows Jönsson, creator of the hexpm package manager, and an amazing resource
    who works tirelessly to build the Elixir community. Eric presently works at Brex
    and was part of the core team at Forza previously. In keeping with our current
    topic of all things working with Elixir, Eric takes a deep dive into the work
    he is doing to optimize various interfaces at Brex. He gives us the rundown on
    the static compile-time checking project he is working on, talking about his aims
    to build in different warnings and what we can expect from the new release in
    that regard. You’ll also hear about Eric’s journey learning Elixir and how he
    had to change his OOP mindset when he got introduced to functional programming
    at university. He shares the story behind hexpm and Mint, his thoughts about the
    future of Hex, and some of the processes around accessing the private repositories
    on its website. We also hear more about Eric’s hiring procedure while working
    at Forza, how he teaches functional programming to students at ElixirConf, and
    some of the major performance bottlenecks he experiences using Hex. Tap into the
    incredible resource that is Eric and hear more about how you can link with him
    online to learn further in the future by tuning in!</p>\n\n<p><strong>Key Points
    From This Episode:</strong></p>\n\n<ul>\n<li>Jose Valim, the Ecto library, and
    Eric’s journey with Elixir since 2012 at a coding camp.</li>\n<li>Early-stage
    static compile-time checks that Eric is adding to the compiler at Brex.</li>\n<li>Whether
    the static compile-time checks Eric is adding constitute a type system or not.</li>\n<li>Static
    compile-time checks in the current system such as undefined function warnings.</li>\n<li>Features
    of the new static compile-time check release: refactored checks, etc.</li>\n<li>Currently,
    these checks happen at compile-time, or when Elixir compiles into the byte code.</li>\n<li>Whether
    these checks will move into BEAM: currently it’s in Elixir and at an early stage.</li>\n<li>The
    Erlang compiler already does type inference during compilation. </li>\n<li>Eric’s
    Erlang proficiency and why he had to brush up on it through using Elixir.</li>\n<li>What
    makes Eric helpful with Hex: his debugging skills and availability to answer questions.</li>\n<li>How
    Eric got started with Hex adding an intake for Git packages.</li>\n<li>The story
    behind Hex regarding ties to Elixir and Devinus from Pool Boy.</li>\n<li>Todd’s
    perspective on Eric as a smart and nice mentor who sleeps very little.</li>\n<li>Changes
    that Eric sees happening in Elixir.</li>\n<li>Hex will no longer support older
    Elixir versions so that it can enable better maintenance.</li>\n<li>Another change
    will be a refactoring of the resolution version algorithm.</li>\n<li>Security-related
    updates that Todd has been working on.</li>\n<li>Private versus public repositories
    on the hex.pm website.</li>\n<li>Hiring challenges at Forza and how Eric found
    the right team out of scarce people.</li>\n<li>Eric looks for people who love
    being programmers and have a passion for learning.</li>\n<li>Tactics Eric uses
    to train functional programming such as hosting ElixirConf workshops.</li>\n<li>Important
    fundamentals in functional programming: using data structures to model data, etc.</li>\n<li>Differences
    between functional and object-oriented programming: data vs classes.</li>\n<li>The
    role of types in Eric coming to understand functional programming better.</li>\n<li>Performance
    bottlenecks in Hex such as dependency resolution.</li>\n<li>How every package
    manager/resolver compromises, exemplified by NPM and Rebar3.</li>\n<li>Origins
    of Mint: wanting http2 support for Hex, and more.</li>\n</ul>\n\n<p><strong>Links
    Mentioned in Today’s Episode:</strong></p>\n\n<p>SmartLogic — <a href=\"https://smartlogic.io/\"
    rel=\"nofollow\">https://smartlogic.io/</a> <br>\nEric Meadows Jönsson on GitHub
    – <a href=\"https://github.com/ericmj\" rel=\"nofollow\">https://github.com/ericmj</a><br>\nEric
    Meadows Jönsson on Hexpm — <a href=\"https://hex.pm/users/ericmj\" rel=\"nofollow\">https://hex.pm/users/ericmj</a><br>\nBrex
    — <a href=\"https://brex.com/\" rel=\"nofollow\">https://brex.com/</a><br>\nTodd
    Resudek on LinkedIn — <a href=\"https://www.linkedin.com/in/toddresudek\" rel=\"nofollow\">https://www.linkedin.com/in/toddresudek</a><br>\nJustus
    Eapen on LinkedIn — <a href=\"https://www.linkedin.com/in/justuseapen/\" rel=\"nofollow\">https://www.linkedin.com/in/justuseapen/</a><br>\nEric
    Oestreich on LinkedIn — <a href=\"https://www.linkedin.com/in/eric-oestreich-8b55aab/\"
    rel=\"nofollow\">https://www.linkedin.com/in/eric-oestreich-8b55aab/</a><br>\nhexpm
    on GitHub — <a href=\"https://github.com/hexpm\" rel=\"nofollow\">https://github.com/hexpm</a><br>\nGoogle
    Summer of Code — <a href=\"https://summerofcode.withgoogle.com/\" rel=\"nofollow\">https://summerofcode.withgoogle.com/</a><br>\nJose
    Valim on GitHib — <a href=\"https://github.com/josevalim\" rel=\"nofollow\">https://github.com/josevalim</a><br>\nPool
    Boy — <a href=\"https://github.com/devinus/poolboy\" rel=\"nofollow\">https://github.com/devinus/poolboy</a><br>\nDevin
    Alexander Torres — <a href=\"https://github.com/devinus\" rel=\"nofollow\">https://github.com/devinus</a><br>\nVoitech
    — <a href=\"https://www.voitech.biz/\" rel=\"nofollow\">https://www.voitech.biz/</a><br>\nHex
    — <a href=\"https://hex.pm/\" rel=\"nofollow\">https://hex.pm/</a><br>\nhexpm
    specifications — <a href=\"https://github.com/hexpm/specifications\" rel=\"nofollow\">https://github.com/hexpm/specifications</a><br>\nSlack
    — <a href=\"https://slack.com\" rel=\"nofollow\">https://slack.com</a><br>\nIRC
    —<a href=\"https://hexchat.github.io/\" rel=\"nofollow\">https://hexchat.github.io/</a><br>\nForza
    — <a href=\"https://www.forzafootball.com/women\" rel=\"nofollow\">https://www.forzafootball.com/women</a><br>\nElixirConf
    — <a href=\"https://elixirconf.com/events\" rel=\"nofollow\">https://elixirconf.com/events</a><br>\nChalmers
    University — <a href=\"https://www.chalmers.se/en/Pages/default.aspx\" rel=\"nofollow\">https://www.chalmers.se/en/Pages/default.aspx</a><br>\nFastly
    — <a href=\"https://www.fastly.com/\" rel=\"nofollow\">https://www.fastly.com/</a><br>\nNPM
    — <a href=\"https://www.npmjs.com/\" rel=\"nofollow\">https://www.npmjs.com/</a><br>\nRebar
    3 — <a href=\"https://github.com/erlang/rebar3\" rel=\"nofollow\">https://github.com/erlang/rebar3</a><br>\nMint
    — <a href=\"https://www.mint-lang.com/\" rel=\"nofollow\">https://www.mint-lang.com/</a><br>\nRuby
    Gems — <a href=\"https://rubygems.org/\" rel=\"nofollow\">https://rubygems.org/</a><br>\nAndrea
    Leopardi on GitHub — <a href=\"https://github.com/whatyouhide?tab=overview&org=ForzaElixir\"
    rel=\"nofollow\">https://github.com/whatyouhide?tab=overview&amp;org=ForzaElixir</a></p><p>Special
    Guest: Todd Resudek.</p>\n      "
- title: Chris Keathley on Performance and Functional Programming
  slug: s3e5-keathley
  link: https://podcast.smartlogic.io/s3e5-keathley
  guid: b26cdd89-0d68-4466-9714-44c278932651
  pubDate: Thu, 19 Dec 2019 06:00:00 -0500
  description: "Our guest on the show today is blogger, software cowboy, and podcast
    host Chris Keathley. Chris is a senior engineer at Bleacher Report, co-host of
    Elixir Outlaws, and writer of an assemblage of open-source software. He joins
    us today to speak about his new projects, his journey with functional programming,
    and what it is like to run Bleacher Report’s infrastructure on Elixir. Chris gives
    us the lowdown on Norm, a data validating interface he recently completed, weighing
    in on how it is different from Dialyzer and what it can offer as far as scalability.
    We hear more about how Chris got introduced to Elixir through Haskell, why he
    wishes he learned Clojure sooner, and why Ruby on Rails isn’t going anywhere soon.
    \nChris also gets into the tradeoffs these languages make to correlate with Erlang.
    He argues that Elixir can only be more widely adopted if more people build cool
    things in it, and then lays out some of its power in supporting Bleacher Report’s
    user interface. We pick Chris’s brain about what his company is trying to optimize
    at the moment and hear about their preference for capacity over speed, and their
    techniques for failing gracefully during traffic spikes. Chris tells us how much
    he loves Elixir due to its use of ETS and other functionality which allows Bleacher
    Report to keep running even above capacity. Finally, we hear about some of the
    observability practices that Bleacher Report uses when deploying new systems and
    predicting future spikes. Plug in for a great conversation and hear why you should
    get building with Elixir now!\nKey Points From This Episode:\nChris’s explanation
    of Norm, his new software that describes data moving through a system.\nChris’s
    introduction to functional programming through learning Haskell, Clojure, and
    Elixir.\nWhat makes a great functional language: immutable data and first class
    functions.\nThings that make Clojure great, such as its thought out, holistic
    design.\nCharacteristics of Cons lists versus RRB trees, and what makes the latter
    better.\nAn acknowledgment of the necessity of the tradeoffs Elixir makes to interact
    with Erlang.\nA little bit about the language Chris wrote to do the admin of code
    challenges in.\nWhy Ruby (on Rails) will not be replaced by Elixir due to commoditization
    that surrounds it.\nAn argument that Elixir can only be more widely adopted if
    more people build with it.\nWhy any language can build any program thus comparisons
    between them are arbitrary.\nWhere Chris sets the bar as to when something is
    performant.\nChris’s preference for high user capacity capability over speed of
    delivery at Bleacher Report.\nOptimization projects at Bleacher Report such as
    using few boxes and handling traffic spikes.\nThings Chris loves about Elixir
    such as its ability to deliver more from its boxes.\nElixir’s use of ETS and how
    Chris coded a complex problem in half a day using it.\nHow Chris detects spikes
    using time series, StatsD, and other observability tools.\nLinks Mentioned in
    Today’s Episode:\nSmartLogic — https://smartlogic.io/ \nChris Keathley on GitHub
    — https://github.com/keathley\nChris Keathley Blog — https://keathley.io/\nElixirConf
    2019, Contracts for Building Reliable Systems presented by Chris Keathley — https://www.youtube.com/watch?v=tpo3JUyVIjQ\nThe
    Big Elixir 2019 - Keynote: Adoption - Brian Cardarella — https://www.youtube.com/watch?v=ghpIiQKRfQ4\nBleacher
    Report — https://bleacherreport.com/\nElixir Outlaws Podcast — https://elixiroutlaws.com/\nNorm
    — https://github.com/keathley/norm\nDialyzer — http://erlang.org/doc/man/dialyzer.html\nHaskell
    — https://www.haskell.org/\nClojure — https://clojure.org/\nErlang — https://www.erlang.org/\nChris
    Okasaki — https://github.com/chrisokasaki\nDiscord — https://discordapp.com/company\nStatsD
    — https://www.datadoghq.com/blog/statsd/\nPrometheus — https://prometheus.io/\nOpentracing
    — https://opentracing.io/ Special Guest: Chris Keathley.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/b26cdd89-0d68-4466-9714-44c278932651.mp3
    length: '52191819'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '3'
    author: SmartLogic LLC
    subtitle: Our guest on the show today is blogger, software cowboy, and podcast
      host Chris Keathley. Chris is a senior engineer at Bleacher Report, co-host
      of Elixir Outlaws, and writer of an assemblage of open-source software. He joins
      us today to speak about his new projects, his journey with functional programming,
      and what it is like to run Bleacher Report’s infrastructure on Elixir.
    duration: '35:26'
    explicit: 'no'
    keywords: elixir, phoenix
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>Our guest on the show today is blogger, software cowboy,
      and podcast host Chris Keathley. Chris is a senior engineer at Bleacher Report,
      co-host of Elixir Outlaws, and writer of an assemblage of open-source software.
      He joins us today to speak about his new projects, his journey with functional
      programming, and what it is like to run Bleacher Report’s infrastructure on
      Elixir. Chris gives us the lowdown on Norm, a data validating interface he recently
      completed, weighing in on how it is different from Dialyzer and what it can
      offer as far as scalability. We hear more about how Chris got introduced to
      Elixir through Haskell, why he wishes he learned Clojure sooner, and why Ruby
      on Rails isn’t going anywhere soon. </p>\n\n<p>Chris also gets into the tradeoffs
      these languages make to correlate with Erlang. He argues that Elixir can only
      be more widely adopted if more people build cool things in it, and then lays
      out some of its power in supporting Bleacher Report’s user interface. We pick
      Chris’s brain about what his company is trying to optimize at the moment and
      hear about their preference for capacity over speed, and their techniques for
      failing gracefully during traffic spikes. Chris tells us how much he loves Elixir
      due to its use of ETS and other functionality which allows Bleacher Report to
      keep running even above capacity. Finally, we hear about some of the observability
      practices that Bleacher Report uses when deploying new systems and predicting
      future spikes. Plug in for a great conversation and hear why you should get
      building with Elixir now!</p>\n\n<p><strong>Key Points From This Episode:</strong></p>\n\n<ul>\n<li>Chris’s
      explanation of Norm, his new software that describes data moving through a system.</li>\n<li>Chris’s
      introduction to functional programming through learning Haskell, Clojure, and
      Elixir.</li>\n<li>What makes a great functional language: immutable data and
      first class functions.</li>\n<li>Things that make Clojure great, such as its
      thought out, holistic design.</li>\n<li>Characteristics of Cons lists versus
      RRB trees, and what makes the latter better.</li>\n<li>An acknowledgment of
      the necessity of the tradeoffs Elixir makes to interact with Erlang.</li>\n<li>A
      little bit about the language Chris wrote to do the admin of code challenges
      in.</li>\n<li>Why Ruby (on Rails) will not be replaced by Elixir due to commoditization
      that surrounds it.</li>\n<li>An argument that Elixir can only be more widely
      adopted if more people build with it.</li>\n<li>Why any language can build any
      program thus comparisons between them are arbitrary.</li>\n<li>Where Chris sets
      the bar as to when something is performant.</li>\n<li>Chris’s preference for
      high user capacity capability over speed of delivery at Bleacher Report.</li>\n<li>Optimization
      projects at Bleacher Report such as using few boxes and handling traffic spikes.</li>\n<li>Things
      Chris loves about Elixir such as its ability to deliver more from its boxes.</li>\n<li>Elixir’s
      use of ETS and how Chris coded a complex problem in half a day using it.</li>\n<li>How
      Chris detects spikes using time series, StatsD, and other observability tools.</li>\n</ul>\n\n<p>Links
      Mentioned in Today’s Episode:</p>\n\n<p>SmartLogic — <a href=\"https://smartlogic.io/\"
      rel=\"nofollow\">https://smartlogic.io/</a> <br>\nChris Keathley on GitHub —
      <a href=\"https://github.com/keathley\" rel=\"nofollow\">https://github.com/keathley</a><br>\nChris
      Keathley Blog — <a href=\"https://keathley.io/\" rel=\"nofollow\">https://keathley.io/</a><br>\nElixirConf
      2019, Contracts for Building Reliable Systems presented by Chris Keathley —
      <a href=\"https://www.youtube.com/watch?v=tpo3JUyVIjQ\" rel=\"nofollow\">https://www.youtube.com/watch?v=tpo3JUyVIjQ</a><br>\nThe
      Big Elixir 2019 - Keynote: Adoption - Brian Cardarella — <a href=\"https://www.youtube.com/watch?v=ghpIiQKRfQ4\"
      rel=\"nofollow\">https://www.youtube.com/watch?v=ghpIiQKRfQ4</a><br>\nBleacher
      Report — <a href=\"https://bleacherreport.com/\" rel=\"nofollow\">https://bleacherreport.com/</a><br>\nElixir
      Outlaws Podcast — <a href=\"https://elixiroutlaws.com/\" rel=\"nofollow\">https://elixiroutlaws.com/</a><br>\nNorm
      — <a href=\"https://github.com/keathley/norm\" rel=\"nofollow\">https://github.com/keathley/norm</a><br>\nDialyzer
      — <a href=\"http://erlang.org/doc/man/dialyzer.html\" rel=\"nofollow\">http://erlang.org/doc/man/dialyzer.html</a><br>\nHaskell
      — <a href=\"https://www.haskell.org/\" rel=\"nofollow\">https://www.haskell.org/</a><br>\nClojure
      — <a href=\"https://clojure.org/\" rel=\"nofollow\">https://clojure.org/</a><br>\nErlang
      — <a href=\"https://www.erlang.org/\" rel=\"nofollow\">https://www.erlang.org/</a><br>\nChris
      Okasaki — <a href=\"https://github.com/chrisokasaki\" rel=\"nofollow\">https://github.com/chrisokasaki</a><br>\nDiscord
      — <a href=\"https://discordapp.com/company\" rel=\"nofollow\">https://discordapp.com/company</a><br>\nStatsD
      — <a href=\"https://www.datadoghq.com/blog/statsd/\" rel=\"nofollow\">https://www.datadoghq.com/blog/statsd/</a><br>\nPrometheus
      — <a href=\"https://prometheus.io/\" rel=\"nofollow\">https://prometheus.io/</a><br>\nOpentracing
      — <a href=\"https://opentracing.io/\" rel=\"nofollow\">https://opentracing.io/</a></p><p>Special
      Guest: Chris Keathley.</p>\n      "
  contentEncoded: "\n        <p>Our guest on the show today is blogger, software cowboy,
    and podcast host Chris Keathley. Chris is a senior engineer at Bleacher Report,
    co-host of Elixir Outlaws, and writer of an assemblage of open-source software.
    He joins us today to speak about his new projects, his journey with functional
    programming, and what it is like to run Bleacher Report’s infrastructure on Elixir.
    Chris gives us the lowdown on Norm, a data validating interface he recently completed,
    weighing in on how it is different from Dialyzer and what it can offer as far
    as scalability. We hear more about how Chris got introduced to Elixir through
    Haskell, why he wishes he learned Clojure sooner, and why Ruby on Rails isn’t
    going anywhere soon. </p>\n\n<p>Chris also gets into the tradeoffs these languages
    make to correlate with Erlang. He argues that Elixir can only be more widely adopted
    if more people build cool things in it, and then lays out some of its power in
    supporting Bleacher Report’s user interface. We pick Chris’s brain about what
    his company is trying to optimize at the moment and hear about their preference
    for capacity over speed, and their techniques for failing gracefully during traffic
    spikes. Chris tells us how much he loves Elixir due to its use of ETS and other
    functionality which allows Bleacher Report to keep running even above capacity.
    Finally, we hear about some of the observability practices that Bleacher Report
    uses when deploying new systems and predicting future spikes. Plug in for a great
    conversation and hear why you should get building with Elixir now!</p>\n\n<p><strong>Key
    Points From This Episode:</strong></p>\n\n<ul>\n<li>Chris’s explanation of Norm,
    his new software that describes data moving through a system.</li>\n<li>Chris’s
    introduction to functional programming through learning Haskell, Clojure, and
    Elixir.</li>\n<li>What makes a great functional language: immutable data and first
    class functions.</li>\n<li>Things that make Clojure great, such as its thought
    out, holistic design.</li>\n<li>Characteristics of Cons lists versus RRB trees,
    and what makes the latter better.</li>\n<li>An acknowledgment of the necessity
    of the tradeoffs Elixir makes to interact with Erlang.</li>\n<li>A little bit
    about the language Chris wrote to do the admin of code challenges in.</li>\n<li>Why
    Ruby (on Rails) will not be replaced by Elixir due to commoditization that surrounds
    it.</li>\n<li>An argument that Elixir can only be more widely adopted if more
    people build with it.</li>\n<li>Why any language can build any program thus comparisons
    between them are arbitrary.</li>\n<li>Where Chris sets the bar as to when something
    is performant.</li>\n<li>Chris’s preference for high user capacity capability
    over speed of delivery at Bleacher Report.</li>\n<li>Optimization projects at
    Bleacher Report such as using few boxes and handling traffic spikes.</li>\n<li>Things
    Chris loves about Elixir such as its ability to deliver more from its boxes.</li>\n<li>Elixir’s
    use of ETS and how Chris coded a complex problem in half a day using it.</li>\n<li>How
    Chris detects spikes using time series, StatsD, and other observability tools.</li>\n</ul>\n\n<p>Links
    Mentioned in Today’s Episode:</p>\n\n<p>SmartLogic — <a href=\"https://smartlogic.io/\"
    rel=\"nofollow\">https://smartlogic.io/</a> <br>\nChris Keathley on GitHub — <a
    href=\"https://github.com/keathley\" rel=\"nofollow\">https://github.com/keathley</a><br>\nChris
    Keathley Blog — <a href=\"https://keathley.io/\" rel=\"nofollow\">https://keathley.io/</a><br>\nElixirConf
    2019, Contracts for Building Reliable Systems presented by Chris Keathley — <a
    href=\"https://www.youtube.com/watch?v=tpo3JUyVIjQ\" rel=\"nofollow\">https://www.youtube.com/watch?v=tpo3JUyVIjQ</a><br>\nThe
    Big Elixir 2019 - Keynote: Adoption - Brian Cardarella — <a href=\"https://www.youtube.com/watch?v=ghpIiQKRfQ4\"
    rel=\"nofollow\">https://www.youtube.com/watch?v=ghpIiQKRfQ4</a><br>\nBleacher
    Report — <a href=\"https://bleacherreport.com/\" rel=\"nofollow\">https://bleacherreport.com/</a><br>\nElixir
    Outlaws Podcast — <a href=\"https://elixiroutlaws.com/\" rel=\"nofollow\">https://elixiroutlaws.com/</a><br>\nNorm
    — <a href=\"https://github.com/keathley/norm\" rel=\"nofollow\">https://github.com/keathley/norm</a><br>\nDialyzer
    — <a href=\"http://erlang.org/doc/man/dialyzer.html\" rel=\"nofollow\">http://erlang.org/doc/man/dialyzer.html</a><br>\nHaskell
    — <a href=\"https://www.haskell.org/\" rel=\"nofollow\">https://www.haskell.org/</a><br>\nClojure
    — <a href=\"https://clojure.org/\" rel=\"nofollow\">https://clojure.org/</a><br>\nErlang
    — <a href=\"https://www.erlang.org/\" rel=\"nofollow\">https://www.erlang.org/</a><br>\nChris
    Okasaki — <a href=\"https://github.com/chrisokasaki\" rel=\"nofollow\">https://github.com/chrisokasaki</a><br>\nDiscord
    — <a href=\"https://discordapp.com/company\" rel=\"nofollow\">https://discordapp.com/company</a><br>\nStatsD
    — <a href=\"https://www.datadoghq.com/blog/statsd/\" rel=\"nofollow\">https://www.datadoghq.com/blog/statsd/</a><br>\nPrometheus
    — <a href=\"https://prometheus.io/\" rel=\"nofollow\">https://prometheus.io/</a><br>\nOpentracing
    — <a href=\"https://opentracing.io/\" rel=\"nofollow\">https://opentracing.io/</a></p><p>Special
    Guest: Chris Keathley.</p>\n      "
- title: Justin Schneck & Frank Hunleth on Nerves and Performance – Working with Elixir
  slug: s3e4-schneck-hunleth-nerves
  link: https://podcast.smartlogic.io/s3e4-schneck-hunleth-nerves
  guid: 2be72d78-cfcc-46e2-a0a5-753fc8a0c280
  pubDate: Thu, 12 Dec 2019 06:00:00 -0500
  description: "On today’s show, we welcome Justin Schneck and Frank Hunleth, luminaries
    from the Nerves team! We take a dive into the world of Nerves with them, covering
    themes of performance, problem-solving, transitioning to hardware, and breakthroughs
    in the field. We begin with a conversation on how Elixir handles performance issues
    on the range of devices they support and Frank gets into how the team solved an
    early boot time discrepancy between a PC and a Raspberry Pi board. Other big themes
    for today are ironing out the kinks in the system registry model and merging Erlang
    and into hard real-time. After squeezing some information out of the guys about
    their use of ugly code hacks we get into some visionary decisions as well as things
    the team wished they could have done differently at Elixir (see the release of
    the new networking stack). Finally, we end off with what Frank and Justin are
    excited about as far as developments in the Nerves community, so be sure to plug
    into this one!\n**Key Points From This Episode:\nWhat Justin did in Tokyo, from
    soaking in hot springs to debugging in Kanji.\nAn explanation of The Erlang Ecosystem
    Foundation, an embedded systems working group.\nThe use of the VintageNet library
    for setting up multi-hold nerve networks.\nHow Elixir handles performance issues
    on the range of devices they support.\nA breakdown of troubleshooting processes
    as far as acceleration with FPGAs.\nIssues with dependencies that occur when starting
    a network node on a Nerves device.\nHow Elixir is trying to evolve past the system
    registry model.\nIdentifying the challenge of reconfiguring early boot time which
    Elixir is facing.\nHow Elixir solved a load time discrepancy between a PC and
    the Raspberry Pi board.\nWhich situations require hardware when Elixir is too
    slow, such as video encoding.\nJapanese research into GPU, FPGA and SIMD optimization
    involving wrapping code blocks.\nMerging Erlang which is soft real-time into hard
    real-time.\nExamples of ugly but fast code hacks in Elixir.\nHacks and the pitfalls
    of system registry such as returning to a prompt when an app crashes.\nThings
    Elixir would have done differently in working with Nerves if could they rewind
    time.\nWhy releasing a new networking stack means Elixir could have done things
    differently.\nLessons Justin and Frank learned moving from OTP to functional programming
    at Elixir.\nExciting new developments and releases in the Nerves community.\nLinks
    Mentioned in Today’s Episode:\nNerves Project — https://nerves-project.org/\nSmartLogic
    — https://smartlogic.io/ \nElixirConf US — https://elixirconf.com/events\nThe
    Erlang Ecosystem Foundation — https://erlef.org/\nGRiSP — https://www.grisp.org/\nVintage
    Net — https://github.com/nerves-networking/vintage_net\nJoe Armstrong — https://joearms.github.io/\nErlang
    — https://www.erlang.org/\nLinux — https://www.linux.org/ Special Guest: Frank
    Hunleth.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/2be72d78-cfcc-46e2-a0a5-753fc8a0c280.mp3
    length: '57000054'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '3'
    author: SmartLogic LLC
    subtitle: On today’s show, we welcome Justin Schneck and Frank Hunleth, luminaries
      from the Nerves team! We take a dive into the world of Nerves with them, covering
      themes of performance, problem-solving, transitioning to hardware, and breakthroughs
      in the field. We begin with a conversation on how Elixir handles performance
      issues on the range of devices they support and Frank gets into how the team
      solved an early boot time discrepancy between a PC and a Raspberry Pi board.
      Other big themes for today are ironing out the kinks in the system registry
      model and merging Erlang and into hard real-time. After squeezing some information
      out of the guys about their use of ugly code hacks we get into some visionary
      decisions as well as things the team wished they could have done differently
      at Elixir (see the release of the new networking stack). Finally, we end off
      with what Frank and Justin are excited about as far as developments in the Nerves
      community, so be sure to plug into this one!
    duration: '38:47'
    explicit: 'no'
    keywords: elixir, nerves, erlang
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>On today’s show, we welcome Justin Schneck and Frank Hunleth,
      luminaries from the Nerves team! We take a dive into the world of Nerves with
      them, covering themes of performance, problem-solving, transitioning to hardware,
      and breakthroughs in the field. We begin with a conversation on how Elixir handles
      performance issues on the range of devices they support and Frank gets into
      how the team solved an early boot time discrepancy between a PC and a Raspberry
      Pi board. Other big themes for today are ironing out the kinks in the system
      registry model and merging Erlang and into hard real-time. After squeezing some
      information out of the guys about their use of ugly code hacks we get into some
      visionary decisions as well as things the team wished they could have done differently
      at Elixir (see the release of the new networking stack). Finally, we end off
      with what Frank and Justin are excited about as far as developments in the Nerves
      community, so be sure to plug into this one!</p>\n\n<p>**Key Points From This
      Episode:</p>\n\n<ul>\n<li>What Justin did in Tokyo, from soaking in hot springs
      to debugging in Kanji.</li>\n<li>An explanation of The Erlang Ecosystem Foundation,
      an embedded systems working group.</li>\n<li>The use of the VintageNet library
      for setting up multi-hold nerve networks.</li>\n<li>How Elixir handles performance
      issues on the range of devices they support.</li>\n<li>A breakdown of troubleshooting
      processes as far as acceleration with FPGAs.</li>\n<li>Issues with dependencies
      that occur when starting a network node on a Nerves device.</li>\n<li>How Elixir
      is trying to evolve past the system registry model.</li>\n<li>Identifying the
      challenge of reconfiguring early boot time which Elixir is facing.</li>\n<li>How
      Elixir solved a load time discrepancy between a PC and the Raspberry Pi board.</li>\n<li>Which
      situations require hardware when Elixir is too slow, such as video encoding.</li>\n<li>Japanese
      research into GPU, FPGA and SIMD optimization involving wrapping code blocks.</li>\n<li>Merging
      Erlang which is soft real-time into hard real-time.</li>\n<li>Examples of ugly
      but fast code hacks in Elixir.</li>\n<li>Hacks and the pitfalls of system registry
      such as returning to a prompt when an app crashes.</li>\n<li>Things Elixir would
      have done differently in working with Nerves if could they rewind time.</li>\n<li>Why
      releasing a new networking stack means Elixir could have done things differently.</li>\n<li>Lessons
      Justin and Frank learned moving from OTP to functional programming at Elixir.</li>\n<li>Exciting
      new developments and releases in the Nerves community.</li>\n</ul>\n\n<p>Links
      Mentioned in Today’s Episode:</p>\n\n<p>Nerves Project — <a href=\"https://nerves-project.org/\"
      rel=\"nofollow\">https://nerves-project.org/</a><br>\nSmartLogic — <a href=\"https://smartlogic.io/\"
      rel=\"nofollow\">https://smartlogic.io/</a> <br>\nElixirConf US — <a href=\"https://elixirconf.com/events\"
      rel=\"nofollow\">https://elixirconf.com/events</a><br>\nThe Erlang Ecosystem
      Foundation — <a href=\"https://erlef.org/\" rel=\"nofollow\">https://erlef.org/</a><br>\nGRiSP
      — <a href=\"https://www.grisp.org/\" rel=\"nofollow\">https://www.grisp.org/</a><br>\nVintage
      Net — <a href=\"https://github.com/nerves-networking/vintage_net\" rel=\"nofollow\">https://github.com/nerves-networking/vintage_net</a><br>\nJoe
      Armstrong — <a href=\"https://joearms.github.io/\" rel=\"nofollow\">https://joearms.github.io/</a><br>\nErlang
      — <a href=\"https://www.erlang.org/\" rel=\"nofollow\">https://www.erlang.org/</a><br>\nLinux
      — <a href=\"https://www.linux.org/\" rel=\"nofollow\">https://www.linux.org/</a></p><p>Special
      Guest: Frank Hunleth.</p>\n      "
  contentEncoded: "\n        <p>On today’s show, we welcome Justin Schneck and Frank
    Hunleth, luminaries from the Nerves team! We take a dive into the world of Nerves
    with them, covering themes of performance, problem-solving, transitioning to hardware,
    and breakthroughs in the field. We begin with a conversation on how Elixir handles
    performance issues on the range of devices they support and Frank gets into how
    the team solved an early boot time discrepancy between a PC and a Raspberry Pi
    board. Other big themes for today are ironing out the kinks in the system registry
    model and merging Erlang and into hard real-time. After squeezing some information
    out of the guys about their use of ugly code hacks we get into some visionary
    decisions as well as things the team wished they could have done differently at
    Elixir (see the release of the new networking stack). Finally, we end off with
    what Frank and Justin are excited about as far as developments in the Nerves community,
    so be sure to plug into this one!</p>\n\n<p>**Key Points From This Episode:</p>\n\n<ul>\n<li>What
    Justin did in Tokyo, from soaking in hot springs to debugging in Kanji.</li>\n<li>An
    explanation of The Erlang Ecosystem Foundation, an embedded systems working group.</li>\n<li>The
    use of the VintageNet library for setting up multi-hold nerve networks.</li>\n<li>How
    Elixir handles performance issues on the range of devices they support.</li>\n<li>A
    breakdown of troubleshooting processes as far as acceleration with FPGAs.</li>\n<li>Issues
    with dependencies that occur when starting a network node on a Nerves device.</li>\n<li>How
    Elixir is trying to evolve past the system registry model.</li>\n<li>Identifying
    the challenge of reconfiguring early boot time which Elixir is facing.</li>\n<li>How
    Elixir solved a load time discrepancy between a PC and the Raspberry Pi board.</li>\n<li>Which
    situations require hardware when Elixir is too slow, such as video encoding.</li>\n<li>Japanese
    research into GPU, FPGA and SIMD optimization involving wrapping code blocks.</li>\n<li>Merging
    Erlang which is soft real-time into hard real-time.</li>\n<li>Examples of ugly
    but fast code hacks in Elixir.</li>\n<li>Hacks and the pitfalls of system registry
    such as returning to a prompt when an app crashes.</li>\n<li>Things Elixir would
    have done differently in working with Nerves if could they rewind time.</li>\n<li>Why
    releasing a new networking stack means Elixir could have done things differently.</li>\n<li>Lessons
    Justin and Frank learned moving from OTP to functional programming at Elixir.</li>\n<li>Exciting
    new developments and releases in the Nerves community.</li>\n</ul>\n\n<p>Links
    Mentioned in Today’s Episode:</p>\n\n<p>Nerves Project — <a href=\"https://nerves-project.org/\"
    rel=\"nofollow\">https://nerves-project.org/</a><br>\nSmartLogic — <a href=\"https://smartlogic.io/\"
    rel=\"nofollow\">https://smartlogic.io/</a> <br>\nElixirConf US — <a href=\"https://elixirconf.com/events\"
    rel=\"nofollow\">https://elixirconf.com/events</a><br>\nThe Erlang Ecosystem Foundation
    — <a href=\"https://erlef.org/\" rel=\"nofollow\">https://erlef.org/</a><br>\nGRiSP
    — <a href=\"https://www.grisp.org/\" rel=\"nofollow\">https://www.grisp.org/</a><br>\nVintage
    Net — <a href=\"https://github.com/nerves-networking/vintage_net\" rel=\"nofollow\">https://github.com/nerves-networking/vintage_net</a><br>\nJoe
    Armstrong — <a href=\"https://joearms.github.io/\" rel=\"nofollow\">https://joearms.github.io/</a><br>\nErlang
    — <a href=\"https://www.erlang.org/\" rel=\"nofollow\">https://www.erlang.org/</a><br>\nLinux
    — <a href=\"https://www.linux.org/\" rel=\"nofollow\">https://www.linux.org/</a></p><p>Special
    Guest: Frank Hunleth.</p>\n      "
- title: Brad Traylor of Podium on Training & Hiring – Working with Elixir
  slug: s3e3-brad-traylor
  link: https://podcast.smartlogic.io/s3e3-brad-traylor
  guid: f816f14f-9675-4d38-a622-24dd6eb29cd1
  pubDate: Thu, 05 Dec 2019 06:00:00 -0500
  description: "Our theme this season is working with Elixir, and joining in the conversation
    today is Brad Traylor from Podium. Brad shares his expertise in hiring and training
    for Podium, a position he is passionate about since it gives him the opportunity
    to work on the people and tech side of things. We begin by hearing a bit of Brad’s
    background, when and how he was first introduced to Elixir and the standout qualities
    that attracted him to Podium. He discusses the hiring process, including what
    he looks for in an engineer, why they don’t recruit much but rather work with
    referrals, the step-by-step of onboarding new devs and the resources he recommends
    to anyone in the industry. Another great talk with a stand-up guy — be sure to
    tune in! \nKey Points From This Episode:\nWhen Brad was first exposed to Elixir
    and how he became the engineering manager. \nSearching for rocket ship startups
    and what specifically drew him to Podium. \nHaving a desire to work with the people
    and the tech side of the industry. \nThe growth trajectory of Podium from a management
    perspective. \nHiring predominantly from referrals rather than recruiting developers.
    \nThe biggest challenge with hiring Elixir devs, including the scarcity of good
    ones! \nTwo things Brad looks for when hiring engineers: the drive to learn and
    a cultural fit. \nThe benefit of hiring younger developers. \nThoughts on training
    different languages and adding them to Podium’s tech stack.\nAn overview of the
    typical onboarding process for a new engineer.\nElixir 101 and other ways they
    keep training and refining the skills of developers.  \nResources that Brad has
    recently learned and those he always recommends to devs. \n**Links Mentioned in
    Today’s Episode:\nBrad Traylor on LinkedIn — https://www.linkedin.com/in/bradtraylor\nBrad
    Traylor on Twitter — https://twitter.com/btjordan23\nPodium — https://www.podium.com\nSmartLogic
    — https://smartlogic.io/ \nElixir — https://elixir-lang.org\nUniversity of Michigan
    — https://umich.edu\nJava — https://www.java.com/en/\nPython — https://www.python.org\nRust
    — https://www.rust-lang.org\nRuby — https://www.ruby-lang.org/en/\nTypeScript
    — https://www.typescriptlang.org\nPragmatic Institute — https://www.pragmaticinstitute.com/courses\nThe
    Manager’s Path — https://www.amazon.com/Managers-Path-Leaders-Navigating-Growth-ebook/dp/B06XP3GJ7F\nCamile
    Fournier — https://twitter.com/skamille\n Special Guest: Brad Traylor.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/f816f14f-9675-4d38-a622-24dd6eb29cd1.mp3
    length: '40543140'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '3'
    author: SmartLogic LLC
    subtitle: Our theme this season is working with Elixir, and joining in the conversation
      today is Brad Traylor from Podium. Brad shares his expertise in hiring and training
      for Podium, a position he is passionate about since it gives him the opportunity
      to work on the people and tech side of things. We begin by hearing a bit of
      Brad’s background, when and how he was first introduced to Elixir and the standout
      qualities that attracted him to Podium. He discusses the hiring process, including
      what he looks for in an engineer, why they don’t recruit much but rather work
      with referrals, the step-by-step of onboarding new devs and the resources he
      recommends to anyone in the industry.
    duration: '27:21'
    explicit: 'no'
    keywords: elixir, phoenix
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>Our theme this season is working with Elixir, and joining
      in the conversation today is Brad Traylor from Podium. Brad shares his expertise
      in hiring and training for Podium, a position he is passionate about since it
      gives him the opportunity to work on the people and tech side of things. We
      begin by hearing a bit of Brad’s background, when and how he was first introduced
      to Elixir and the standout qualities that attracted him to Podium. He discusses
      the hiring process, including what he looks for in an engineer, why they don’t
      recruit much but rather work with referrals, the step-by-step of onboarding
      new devs and the resources he recommends to anyone in the industry. Another
      great talk with a stand-up guy — be sure to tune in! </p>\n\n<p><strong>Key
      Points From This Episode:</strong></p>\n\n<ul>\n<li>When Brad was first exposed
      to Elixir and how he became the engineering manager. </li>\n<li>Searching for
      rocket ship startups and what specifically drew him to Podium. </li>\n<li>Having
      a desire to work with the people and the tech side of the industry. </li>\n<li>The
      growth trajectory of Podium from a management perspective. </li>\n<li>Hiring
      predominantly from referrals rather than recruiting developers. </li>\n<li>The
      biggest challenge with hiring Elixir devs, including the scarcity of good ones!
      </li>\n<li>Two things Brad looks for when hiring engineers: the drive to learn
      and a cultural fit. </li>\n<li>The benefit of hiring younger developers. </li>\n<li>Thoughts
      on training different languages and adding them to Podium’s tech stack.</li>\n<li>An
      overview of the typical onboarding process for a new engineer.</li>\n<li>Elixir
      101 and other ways they keep training and refining the skills of developers.<br></li>\n<li>Resources
      that Brad has recently learned and those he always recommends to devs. </li>\n</ul>\n\n<p>**Links
      Mentioned in Today’s Episode:</p>\n\n<p>Brad Traylor on LinkedIn — <a href=\"https://www.linkedin.com/in/bradtraylor\"
      rel=\"nofollow\">https://www.linkedin.com/in/bradtraylor</a><br>\nBrad Traylor
      on Twitter — <a href=\"https://twitter.com/btjordan23\" rel=\"nofollow\">https://twitter.com/btjordan23</a><br>\nPodium
      — <a href=\"https://www.podium.com\" rel=\"nofollow\">https://www.podium.com</a><br>\nSmartLogic
      — <a href=\"https://smartlogic.io/\" rel=\"nofollow\">https://smartlogic.io/</a>
      <br>\nElixir — <a href=\"https://elixir-lang.org\" rel=\"nofollow\">https://elixir-lang.org</a><br>\nUniversity
      of Michigan — <a href=\"https://umich.edu\" rel=\"nofollow\">https://umich.edu</a><br>\nJava
      — <a href=\"https://www.java.com/en/\" rel=\"nofollow\">https://www.java.com/en/</a><br>\nPython
      — <a href=\"https://www.python.org\" rel=\"nofollow\">https://www.python.org</a><br>\nRust
      — <a href=\"https://www.rust-lang.org\" rel=\"nofollow\">https://www.rust-lang.org</a><br>\nRuby
      — <a href=\"https://www.ruby-lang.org/en/\" rel=\"nofollow\">https://www.ruby-lang.org/en/</a><br>\nTypeScript
      — <a href=\"https://www.typescriptlang.org\" rel=\"nofollow\">https://www.typescriptlang.org</a><br>\nPragmatic
      Institute — <a href=\"https://www.pragmaticinstitute.com/courses\" rel=\"nofollow\">https://www.pragmaticinstitute.com/courses</a><br>\nThe
      Manager’s Path — <a href=\"https://www.amazon.com/Managers-Path-Leaders-Navigating-Growth-ebook/dp/B06XP3GJ7F\"
      rel=\"nofollow\">https://www.amazon.com/Managers-Path-Leaders-Navigating-Growth-ebook/dp/B06XP3GJ7F</a><br>\nCamile
      Fournier — <a href=\"https://twitter.com/skamille\" rel=\"nofollow\">https://twitter.com/skamille</a></p><p>Special
      Guest: Brad Traylor.</p>\n      "
  contentEncoded: "\n        <p>Our theme this season is working with Elixir, and
    joining in the conversation today is Brad Traylor from Podium. Brad shares his
    expertise in hiring and training for Podium, a position he is passionate about
    since it gives him the opportunity to work on the people and tech side of things.
    We begin by hearing a bit of Brad’s background, when and how he was first introduced
    to Elixir and the standout qualities that attracted him to Podium. He discusses
    the hiring process, including what he looks for in an engineer, why they don’t
    recruit much but rather work with referrals, the step-by-step of onboarding new
    devs and the resources he recommends to anyone in the industry. Another great
    talk with a stand-up guy — be sure to tune in! </p>\n\n<p><strong>Key Points From
    This Episode:</strong></p>\n\n<ul>\n<li>When Brad was first exposed to Elixir
    and how he became the engineering manager. </li>\n<li>Searching for rocket ship
    startups and what specifically drew him to Podium. </li>\n<li>Having a desire
    to work with the people and the tech side of the industry. </li>\n<li>The growth
    trajectory of Podium from a management perspective. </li>\n<li>Hiring predominantly
    from referrals rather than recruiting developers. </li>\n<li>The biggest challenge
    with hiring Elixir devs, including the scarcity of good ones! </li>\n<li>Two things
    Brad looks for when hiring engineers: the drive to learn and a cultural fit. </li>\n<li>The
    benefit of hiring younger developers. </li>\n<li>Thoughts on training different
    languages and adding them to Podium’s tech stack.</li>\n<li>An overview of the
    typical onboarding process for a new engineer.</li>\n<li>Elixir 101 and other
    ways they keep training and refining the skills of developers.<br></li>\n<li>Resources
    that Brad has recently learned and those he always recommends to devs. </li>\n</ul>\n\n<p>**Links
    Mentioned in Today’s Episode:</p>\n\n<p>Brad Traylor on LinkedIn — <a href=\"https://www.linkedin.com/in/bradtraylor\"
    rel=\"nofollow\">https://www.linkedin.com/in/bradtraylor</a><br>\nBrad Traylor
    on Twitter — <a href=\"https://twitter.com/btjordan23\" rel=\"nofollow\">https://twitter.com/btjordan23</a><br>\nPodium
    — <a href=\"https://www.podium.com\" rel=\"nofollow\">https://www.podium.com</a><br>\nSmartLogic
    — <a href=\"https://smartlogic.io/\" rel=\"nofollow\">https://smartlogic.io/</a>
    <br>\nElixir — <a href=\"https://elixir-lang.org\" rel=\"nofollow\">https://elixir-lang.org</a><br>\nUniversity
    of Michigan — <a href=\"https://umich.edu\" rel=\"nofollow\">https://umich.edu</a><br>\nJava
    — <a href=\"https://www.java.com/en/\" rel=\"nofollow\">https://www.java.com/en/</a><br>\nPython
    — <a href=\"https://www.python.org\" rel=\"nofollow\">https://www.python.org</a><br>\nRust
    — <a href=\"https://www.rust-lang.org\" rel=\"nofollow\">https://www.rust-lang.org</a><br>\nRuby
    — <a href=\"https://www.ruby-lang.org/en/\" rel=\"nofollow\">https://www.ruby-lang.org/en/</a><br>\nTypeScript
    — <a href=\"https://www.typescriptlang.org\" rel=\"nofollow\">https://www.typescriptlang.org</a><br>\nPragmatic
    Institute — <a href=\"https://www.pragmaticinstitute.com/courses\" rel=\"nofollow\">https://www.pragmaticinstitute.com/courses</a><br>\nThe
    Manager’s Path — <a href=\"https://www.amazon.com/Managers-Path-Leaders-Navigating-Growth-ebook/dp/B06XP3GJ7F\"
    rel=\"nofollow\">https://www.amazon.com/Managers-Path-Leaders-Navigating-Growth-ebook/dp/B06XP3GJ7F</a><br>\nCamile
    Fournier — <a href=\"https://twitter.com/skamille\" rel=\"nofollow\">https://twitter.com/skamille</a></p><p>Special
    Guest: Brad Traylor.</p>\n      "
- title: José Valim, Creator of Elixir
  slug: s3-e2-jose-valim
  link: https://podcast.smartlogic.io/s3-e2-jose-valim
  guid: 13faacd6-6639-4fe7-a552-5f58e3dc2f3d
  pubDate: Tue, 26 Nov 2019 06:00:00 -0500
  description: "Today on Elixir Wizards we are joined by none other than José Valim,
    the inventor of Elixir! Coming from the Ruby on Rails world, José found his way
    to functional programming and we hear all about the evolution of his philosophy
    and thought process around the time of the creation of the language. He gives
    us some great insight into why functional programming is so appealing to him and
    the problems he wanted to solve by creating Elixir. We chat about other languages
    and his use of Erlang, Elixir's three biggest influences and some important characters
    in the story. José also shares a bit of personal, behind the scenes stuff about
    his schedule and how he tries to stay as productive as possible. We finish off
    the chat, talking about performance and the measures José has taken in this regard.
    For all this and more from a true Elixir wizard, be sure to tune in!\nKey Points
    From This Episode:\nJosé's thoughts on our recent podcast name-change!\nThe first
    steps for José in the process of writing a language.\nReason for José's decision
    to step out of the Ruby on Rails world. \nThe 'aha' moment that José had when
    moving into functional programming. \nSome of the inspiration for Elixir from
    other languages.\nA few of the people that have mentored and inspired José in
    his career. \nThe research and development phase for Elixir and José strategy
    for this. \nJosé's work habits, his typical day and the influence of his kids
    on his flow. \nWhy José still considers himself an Elixir programmer despite his
    proximity. \nElixir and machine learning; why the two are not more closely linked.
    \nSteps in the measurement process for José and Elixir. \nThe time that José has
    spent on the performance side of the language. \nSacrifices and substitution in
    optimizing Elixir's performance. \nSome of the things on the horizon that are
    exciting José. \nLinks Mentioned in Today’s Episode:\nSmartLogic (https://www.smartlogic.com)\nJosé
    Valim (https://github.com/josevalim)\nPlataformatec (http://plataformatec)\nHarry
    Potter (https://www.wizardingworld.com/)\nErlang (https://www.erlang.org/)\nRuby
    (https://www.ruby-lang.org/en/)\nClojure (https://clojure.org/)\nElixirConf (https://elixirconf.com/events)
    Special Guest: José Valim.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/13faacd6-6639-4fe7-a552-5f58e3dc2f3d.mp3
    length: '64040420'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '3'
    author: SmartLogic LLC
    subtitle: Today on Elixir Wizards we are joined by none other than José Valim,
      the inventor of Elixir! Coming from the Ruby on Rails world, José found his
      way to functional programming and we hear all about the evolution of his philosophy
      and thought process around the time of the creation of the language. He gives
      us some great insight into why functional programming is so appealing to him
      and the problems he wanted to solve by creating Elixir. We chat about other
      languages and his use of Erlang, Elixir's three biggest influences and some
      important characters in the story. José also shares a bit of personal, behind
      the scenes stuff about his schedule and how he tries to stay as productive as
      possible. We finish off the chat, talking about performance and the measures
      José has taken in this regard. For all this and more from a true Elixir wizard,
      be sure to tune in!
    duration: '43:40'
    explicit: 'no'
    keywords: elixir
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/episodes/1/13faacd6-6639-4fe7-a552-5f58e3dc2f3d/cover.jpg?v=1
    summary: "\n        <p>Today on Elixir Wizards we are joined by none other than
      José Valim, the inventor of Elixir! Coming from the Ruby on Rails world, José
      found his way to functional programming and we hear all about the evolution
      of his philosophy and thought process around the time of the creation of the
      language. He gives us some great insight into why functional programming is
      so appealing to him and the problems he wanted to solve by creating Elixir.
      We chat about other languages and his use of Erlang, Elixir&#39;s three biggest
      influences and some important characters in the story. José also shares a bit
      of personal, behind the scenes stuff about his schedule and how he tries to
      stay as productive as possible. We finish off the chat, talking about performance
      and the measures José has taken in this regard. For all this and more from a
      true Elixir wizard, be sure to tune in!</p>\n\n<p>Key Points From This Episode:</p>\n\n<ul>\n<li>José&#39;s
      thoughts on our recent podcast name-change!</li>\n<li>The first steps for José
      in the process of writing a language.</li>\n<li>Reason for José&#39;s decision
      to step out of the Ruby on Rails world. </li>\n<li>The &#39;aha&#39; moment
      that José had when moving into functional programming. </li>\n<li>Some of the
      inspiration for Elixir from other languages.</li>\n<li>A few of the people that
      have mentored and inspired José in his career. </li>\n<li>The research and development
      phase for Elixir and José strategy for this. </li>\n<li>José&#39;s work habits,
      his typical day and the influence of his kids on his flow. </li>\n<li>Why José
      still considers himself an Elixir programmer despite his proximity. </li>\n<li>Elixir
      and machine learning; why the two are not more closely linked. </li>\n<li>Steps
      in the measurement process for José and Elixir. </li>\n<li>The time that José
      has spent on the performance side of the language. </li>\n<li>Sacrifices and
      substitution in optimizing Elixir&#39;s performance. </li>\n<li>Some of the
      things on the horizon that are exciting José. </li>\n</ul>\n\n<p>Links Mentioned
      in Today’s Episode:</p>\n\n<p><a href=\"https://www.smartlogic.com\" rel=\"nofollow\">SmartLogic</a><br>\n<a
      href=\"https://github.com/josevalim\" rel=\"nofollow\">José Valim</a><br>\n<a
      href=\"http://plataformatec\" rel=\"nofollow\">Plataformatec</a><br>\n<a href=\"https://www.wizardingworld.com/\"
      rel=\"nofollow\">Harry Potter</a><br>\n<a href=\"https://www.erlang.org/\" rel=\"nofollow\">Erlang</a><br>\n<a
      href=\"https://www.ruby-lang.org/en/\" rel=\"nofollow\">Ruby</a><br>\n<a href=\"https://clojure.org/\"
      rel=\"nofollow\">Clojure</a><br>\n<a href=\"https://elixirconf.com/events\"
      rel=\"nofollow\">ElixirConf</a></p><p>Special Guest: José Valim.</p>\n      "
  contentEncoded: "\n        <p>Today on Elixir Wizards we are joined by none other
    than José Valim, the inventor of Elixir! Coming from the Ruby on Rails world,
    José found his way to functional programming and we hear all about the evolution
    of his philosophy and thought process around the time of the creation of the language.
    He gives us some great insight into why functional programming is so appealing
    to him and the problems he wanted to solve by creating Elixir. We chat about other
    languages and his use of Erlang, Elixir&#39;s three biggest influences and some
    important characters in the story. José also shares a bit of personal, behind
    the scenes stuff about his schedule and how he tries to stay as productive as
    possible. We finish off the chat, talking about performance and the measures José
    has taken in this regard. For all this and more from a true Elixir wizard, be
    sure to tune in!</p>\n\n<p>Key Points From This Episode:</p>\n\n<ul>\n<li>José&#39;s
    thoughts on our recent podcast name-change!</li>\n<li>The first steps for José
    in the process of writing a language.</li>\n<li>Reason for José&#39;s decision
    to step out of the Ruby on Rails world. </li>\n<li>The &#39;aha&#39; moment that
    José had when moving into functional programming. </li>\n<li>Some of the inspiration
    for Elixir from other languages.</li>\n<li>A few of the people that have mentored
    and inspired José in his career. </li>\n<li>The research and development phase
    for Elixir and José strategy for this. </li>\n<li>José&#39;s work habits, his
    typical day and the influence of his kids on his flow. </li>\n<li>Why José still
    considers himself an Elixir programmer despite his proximity. </li>\n<li>Elixir
    and machine learning; why the two are not more closely linked. </li>\n<li>Steps
    in the measurement process for José and Elixir. </li>\n<li>The time that José
    has spent on the performance side of the language. </li>\n<li>Sacrifices and substitution
    in optimizing Elixir&#39;s performance. </li>\n<li>Some of the things on the horizon
    that are exciting José. </li>\n</ul>\n\n<p>Links Mentioned in Today’s Episode:</p>\n\n<p><a
    href=\"https://www.smartlogic.com\" rel=\"nofollow\">SmartLogic</a><br>\n<a href=\"https://github.com/josevalim\"
    rel=\"nofollow\">José Valim</a><br>\n<a href=\"http://plataformatec\" rel=\"nofollow\">Plataformatec</a><br>\n<a
    href=\"https://www.wizardingworld.com/\" rel=\"nofollow\">Harry Potter</a><br>\n<a
    href=\"https://www.erlang.org/\" rel=\"nofollow\">Erlang</a><br>\n<a href=\"https://www.ruby-lang.org/en/\"
    rel=\"nofollow\">Ruby</a><br>\n<a href=\"https://clojure.org/\" rel=\"nofollow\">Clojure</a><br>\n<a
    href=\"https://elixirconf.com/events\" rel=\"nofollow\">ElixirConf</a></p><p>Special
    Guest: José Valim.</p>\n      "
- title: Dr Jim Freeze on Hiring, Training, and Functional Programming – Working with
    Elixir
  slug: s3e1-dr-freeze
  link: https://podcast.smartlogic.io/s3e1-dr-freeze
  guid: 7f21096c-8f00-4f06-9b4a-a0a8b554e28b
  pubDate: Thu, 21 Nov 2019 06:00:00 -0500
  description: "Welcome to Elixir Wizards, today we are joined by Dr. Jim Freeze to
    talk about his passion for and history in Elixir and functional programming. Dr.
    Freeze is one of the organizers of one of our favorite things in the world, Elixir
    Conf! He shares his story of coming to functional programming and his early days
    with Elixir, what he sees as the most important aspects of the conference before
    diving into what is on offer for those that attend. We talk about how employers
    can get Elixir newcomers up to speed on the language and the most effective ways
    Dr. Freeze stays abreast of developments in the field. Our guest also recommends
    a few resources for those wanting an introduction to Elixir and makes a great
    argument for the usefulness of a functional approach to programming. For all this
    and a whole bunch more, join us today!\nKey Points From This Episode:\nHow Dr.
    Freeze got started with Elixir and his programming background.\nA little bit about
    the early days of Elixir Conf and what the first events were like.  \nThe particulars
    of Dr. Freeze's doctorate and his title. \nEducation, networking and how Elixir
    Conf fits into the developer hiring game. \nThe training that is offered at the
    conference and the philosophy to serving attendees. \nDr. Freeze's recommendations
    for employers bringing newbies up to speed with Elixir. \nHow our guest continues
    his learning and stays focused on what is necessary.\nUseful resources and materials
    for Elixir, according to Dr. Freeze.\nContemplating functional programming and
    its key components. \nWhy to consider functional programming coming from an object-based
    background.\nThe biggest hurdles in moving over to functional programming and
    Elixir. \nFollowing the data and how much the simplicity of this directive can
    help. \nDr. Freeze's favorite thing in the functional world!\nLinks Mentioned
    in Today’s Episode:\nSmartLogic (https://www.smartlogic.com) \nDr. Jim Freeze
    on Twitter (https://twitter.com/jimfreeze)\nElixirConf (https://elixirconf.com/events) \nSophie
    DeBenedetto (http://sophiedebenedetto.nyc/)\nElixir Radar (https://elixirnation.io/references/elixir-radar-weekly-newsletter-on-elixir)\nPhoenix
    In Action (https://www.amazon.com/Phoenix-Action-Geoffrey-Lessel/dp/1617295043)\nGeoffrey
    Lessel (http://www.apple.com)\nSaša Jurić (https://codesync.global/speaker/sasa-juric/)\nSandi
    Metz (https://www.sandimetz.com) Special Guest: Dr. Jim Freeze.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/7f21096c-8f00-4f06-9b4a-a0a8b554e28b.mp3
    length: '38112382'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '3'
    author: SmartLogic LLC
    subtitle: Welcome to Elixir Wizards, today we are joined by Dr. Jim Freeze to
      talk about his passion for and history in Elixir and functional programming.
      Dr. Freeze is one of the organizers of one of our favorite things in the world,
      Elixir Conf! He shares his story of coming to functional programming and his
      early days with Elixir, what he sees as the most important aspects of the conference
      before diving into what is on offer for those that attend. We talk about how
      employers can get Elixir newcomers up to speed on the language and the most
      effective ways Dr. Freeze stays abreast of developments in the field. Our guest
      also recommends a few resources for those wanting an introduction to Elixir
      and makes a great argument for the usefulness of a functional approach to programming.
      For all this and a whole bunch more, join us today!
    duration: '25:40'
    explicit: 'no'
    keywords: elixirconf, functional programming, elixir
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/episodes/7/7f21096c-8f00-4f06-9b4a-a0a8b554e28b/cover.jpg?v=1
    summary: "\n        <p>Welcome to Elixir Wizards, today we are joined by Dr. Jim
      Freeze to talk about his passion for and history in Elixir and functional programming.
      Dr. Freeze is one of the organizers of one of our favorite things in the world,
      Elixir Conf! He shares his story of coming to functional programming and his
      early days with Elixir, what he sees as the most important aspects of the conference
      before diving into what is on offer for those that attend. We talk about how
      employers can get Elixir newcomers up to speed on the language and the most
      effective ways Dr. Freeze stays abreast of developments in the field. Our guest
      also recommends a few resources for those wanting an introduction to Elixir
      and makes a great argument for the usefulness of a functional approach to programming.
      For all this and a whole bunch more, join us today!</p>\n\n<p>Key Points From
      This Episode:</p>\n\n<ul>\n<li>How Dr. Freeze got started with Elixir and his
      programming background.</li>\n<li>A little bit about the early days of Elixir
      Conf and what the first events were like.<br></li>\n<li>The particulars of Dr.
      Freeze&#39;s doctorate and his title. </li>\n<li>Education, networking and how
      Elixir Conf fits into the developer hiring game. </li>\n<li>The training that
      is offered at the conference and the philosophy to serving attendees. </li>\n<li>Dr.
      Freeze&#39;s recommendations for employers bringing newbies up to speed with
      Elixir. </li>\n<li>How our guest continues his learning and stays focused on
      what is necessary.</li>\n<li>Useful resources and materials for Elixir, according
      to Dr. Freeze.</li>\n<li>Contemplating functional programming and its key components.
      </li>\n<li>Why to consider functional programming coming from an object-based
      background.</li>\n<li>The biggest hurdles in moving over to functional programming
      and Elixir. </li>\n<li>Following the data and how much the simplicity of this
      directive can help. </li>\n<li>Dr. Freeze&#39;s favorite thing in the functional
      world!</li>\n</ul>\n\n<p>Links Mentioned in Today’s Episode:<br>\n<a href=\"https://www.smartlogic.com\"
      rel=\"nofollow\">SmartLogic</a> <br>\n<a href=\"https://twitter.com/jimfreeze\"
      rel=\"nofollow\">Dr. Jim Freeze on Twitter</a><br>\n<a href=\"https://elixirconf.com/events\"
      rel=\"nofollow\">ElixirConf</a> <br>\n<a href=\"http://sophiedebenedetto.nyc/\"
      rel=\"nofollow\">Sophie DeBenedetto</a><br>\n<a href=\"https://elixirnation.io/references/elixir-radar-weekly-newsletter-on-elixir\"
      rel=\"nofollow\">Elixir Radar</a><br>\n<a href=\"https://www.amazon.com/Phoenix-Action-Geoffrey-Lessel/dp/1617295043\"
      rel=\"nofollow\">Phoenix In Action</a><br>\n<a href=\"http://www.apple.com\"
      rel=\"nofollow\">Geoffrey Lessel</a><br>\n<a href=\"https://codesync.global/speaker/sasa-juric/\"
      rel=\"nofollow\">Saša Jurić</a><br>\n<a href=\"https://www.sandimetz.com\" rel=\"nofollow\">Sandi
      Metz</a></p><p>Special Guest: Dr. Jim Freeze.</p>\n      "
  contentEncoded: "\n        <p>Welcome to Elixir Wizards, today we are joined by
    Dr. Jim Freeze to talk about his passion for and history in Elixir and functional
    programming. Dr. Freeze is one of the organizers of one of our favorite things
    in the world, Elixir Conf! He shares his story of coming to functional programming
    and his early days with Elixir, what he sees as the most important aspects of
    the conference before diving into what is on offer for those that attend. We talk
    about how employers can get Elixir newcomers up to speed on the language and the
    most effective ways Dr. Freeze stays abreast of developments in the field. Our
    guest also recommends a few resources for those wanting an introduction to Elixir
    and makes a great argument for the usefulness of a functional approach to programming.
    For all this and a whole bunch more, join us today!</p>\n\n<p>Key Points From
    This Episode:</p>\n\n<ul>\n<li>How Dr. Freeze got started with Elixir and his
    programming background.</li>\n<li>A little bit about the early days of Elixir
    Conf and what the first events were like.<br></li>\n<li>The particulars of Dr.
    Freeze&#39;s doctorate and his title. </li>\n<li>Education, networking and how
    Elixir Conf fits into the developer hiring game. </li>\n<li>The training that
    is offered at the conference and the philosophy to serving attendees. </li>\n<li>Dr.
    Freeze&#39;s recommendations for employers bringing newbies up to speed with Elixir.
    </li>\n<li>How our guest continues his learning and stays focused on what is necessary.</li>\n<li>Useful
    resources and materials for Elixir, according to Dr. Freeze.</li>\n<li>Contemplating
    functional programming and its key components. </li>\n<li>Why to consider functional
    programming coming from an object-based background.</li>\n<li>The biggest hurdles
    in moving over to functional programming and Elixir. </li>\n<li>Following the
    data and how much the simplicity of this directive can help. </li>\n<li>Dr. Freeze&#39;s
    favorite thing in the functional world!</li>\n</ul>\n\n<p>Links Mentioned in Today’s
    Episode:<br>\n<a href=\"https://www.smartlogic.com\" rel=\"nofollow\">SmartLogic</a> <br>\n<a
    href=\"https://twitter.com/jimfreeze\" rel=\"nofollow\">Dr. Jim Freeze on Twitter</a><br>\n<a
    href=\"https://elixirconf.com/events\" rel=\"nofollow\">ElixirConf</a> <br>\n<a
    href=\"http://sophiedebenedetto.nyc/\" rel=\"nofollow\">Sophie DeBenedetto</a><br>\n<a
    href=\"https://elixirnation.io/references/elixir-radar-weekly-newsletter-on-elixir\"
    rel=\"nofollow\">Elixir Radar</a><br>\n<a href=\"https://www.amazon.com/Phoenix-Action-Geoffrey-Lessel/dp/1617295043\"
    rel=\"nofollow\">Phoenix In Action</a><br>\n<a href=\"http://www.apple.com\" rel=\"nofollow\">Geoffrey
    Lessel</a><br>\n<a href=\"https://codesync.global/speaker/sasa-juric/\" rel=\"nofollow\">Saša
    Jurić</a><br>\n<a href=\"https://www.sandimetz.com\" rel=\"nofollow\">Sandi Metz</a></p><p>Special
    Guest: Dr. Jim Freeze.</p>\n      "
- title: Season Two Wrap
  slug: season-two-wrap
  link: https://podcast.smartlogic.io/season-two-wrap
  guid: e472382c-8b12-4b39-9e07-365dbdb8d77d
  pubDate: Thu, 03 Oct 2019 06:00:00 -0400
  description: "Welcome to the last episode of Season 2 of the podcast! We are taking
    this opportunity to recap what we covered in the season and talk about what we
    liked and what we didn't like so much. We do not have a guest for today's show
    so it is just Eric and Justus doing some reflection. We do want to take this opportunity
    to thank all of our guests that have appeared on this season and shared their
    expertise with us, we definitely feel we learned a lot during this time! In Season
    3 we will be focussing on functional programming, performance and teaching Elixir,
    so make sure to keep an eye out for when that drops in the future!\nKey Points
    From This Episode:\nThe possibility of longer episodes for next season \nReflections
    on ElixirConf and the time we spent there this year. \nThe upcoming conference
    in New Orleans that Eric is keynoting.  \nThoughts on the future of the podcast
    and the promise of Season 3. \nReach out! We want to hear from you! \nAnd much
    more! \nLinks Mentioned in Today’s Episode:\nSmartLogic — https://www.smartlogic.io\nBrooklyn
    Zelenka — https://github.com/expede\nBryan Joseph — https://github.com/bryanjos\nPaul
    Schoenfelder — https://github.com/bitwalker\nMeryl Dakin— https://github.com/meryldakin\nRené
    Föhring— https://twitter.com/rrrene\nMichal Muskala — https://michal.muskala.eu/\nTodd
    Resudek — https://www.linkedin.com/in/toddresudek/\nShanti Chellaram— https://github.com/shantiii\nSophie
    DeBenedetto — http://sophiedebenedetto.nyc/\nDave Lucia — https://www.linkedin.com/in/david-lucia-a395441b\nElixirConf
    — https://elixirconf.com/2019\nThe Big Elixir — https://www.thebigelixir.com/\nLe
    Petit Theatre — http://www.lepetittheatre.com\nLone Star Elixir — https://www.lonestarelixir.com\nThe
    Empire Strikes Back — https://www.rottentomatoes.com/m/empirestrikesback\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/e472382c-8b12-4b39-9e07-365dbdb8d77d.mp3
    length: '17799716'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '2'
    author: SmartLogic LLC
    subtitle: Welcome to the last episode of Season 2 of the podcast! We are taking
      this opportunity to recap what we covered in the season and talk about what
      we liked and what we didn't like so much. We do not have a guest for today's
      show so it is just Eric and Justus doing some reflection. We do want to take
      this opportunity to thank all of our guests that have appeared on this season
      and shared their expertise with us, we definitely feel we learned a lot during
      this time! In Season 3 we will be focussing on functional programming, performance
      and teaching Elixir, so make sure to keep an eye out for when that drops in
      the future!
    duration: '11:53'
    explicit: 'no'
    keywords: ''
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>Welcome to the last episode of Season 2 of the podcast!
      We are taking this opportunity to recap what we covered in the season and talk
      about what we liked and what we didn&#39;t like so much. We do not have a guest
      for today&#39;s show so it is just Eric and Justus doing some reflection. We
      do want to take this opportunity to thank all of our guests that have appeared
      on this season and shared their expertise with us, we definitely feel we learned
      a lot during this time! In Season 3 we will be focussing on functional programming,
      performance and teaching Elixir, so make sure to keep an eye out for when that
      drops in the future!</p>\n\n<p><strong>Key Points From This Episode:</strong></p>\n\n<ul>\n<li>The
      possibility of longer episodes for next season </li>\n<li>Reflections on ElixirConf
      and the time we spent there this year. </li>\n<li>The upcoming conference in
      New Orleans that Eric is keynoting.<br></li>\n<li>Thoughts on the future of
      the podcast and the promise of Season 3. </li>\n<li>Reach out! We want to hear
      from you! </li>\n<li>And much more! </li>\n</ul>\n\n<p><strong>Links Mentioned
      in Today’s Episode:</strong></p>\n\n<p>SmartLogic — <a href=\"https://www.smartlogic.io\"
      rel=\"nofollow\">https://www.smartlogic.io</a><br>\nBrooklyn Zelenka — <a href=\"https://github.com/expede\"
      rel=\"nofollow\">https://github.com/expede</a><br>\nBryan Joseph — <a href=\"https://github.com/bryanjos\"
      rel=\"nofollow\">https://github.com/bryanjos</a><br>\nPaul Schoenfelder — <a
      href=\"https://github.com/bitwalker\" rel=\"nofollow\">https://github.com/bitwalker</a><br>\nMeryl
      Dakin— <a href=\"https://github.com/meryldakin\" rel=\"nofollow\">https://github.com/meryldakin</a><br>\nRené
      Föhring— <a href=\"https://twitter.com/rrrene\" rel=\"nofollow\">https://twitter.com/rrrene</a><br>\nMichal
      Muskala — <a href=\"https://michal.muskala.eu/\" rel=\"nofollow\">https://michal.muskala.eu/</a><br>\nTodd
      Resudek — <a href=\"https://www.linkedin.com/in/toddresudek/\" rel=\"nofollow\">https://www.linkedin.com/in/toddresudek/</a><br>\nShanti
      Chellaram— <a href=\"https://github.com/shantiii\" rel=\"nofollow\">https://github.com/shantiii</a><br>\nSophie
      DeBenedetto — <a href=\"http://sophiedebenedetto.nyc/\" rel=\"nofollow\">http://sophiedebenedetto.nyc/</a><br>\nDave
      Lucia — <a href=\"https://www.linkedin.com/in/david-lucia-a395441b\" rel=\"nofollow\">https://www.linkedin.com/in/david-lucia-a395441b</a><br>\nElixirConf
      — <a href=\"https://elixirconf.com/2019\" rel=\"nofollow\">https://elixirconf.com/2019</a><br>\nThe
      Big Elixir — <a href=\"https://www.thebigelixir.com/\" rel=\"nofollow\">https://www.thebigelixir.com/</a><br>\nLe
      Petit Theatre — <a href=\"http://www.lepetittheatre.com\" rel=\"nofollow\">http://www.lepetittheatre.com</a><br>\nLone
      Star Elixir — <a href=\"https://www.lonestarelixir.com\" rel=\"nofollow\">https://www.lonestarelixir.com</a><br>\nThe
      Empire Strikes Back — <a href=\"https://www.rottentomatoes.com/m/empire_strikes_back\"
      rel=\"nofollow\">https://www.rottentomatoes.com/m/empire_strikes_back</a></p>\n
      \     "
  contentEncoded: "\n        <p>Welcome to the last episode of Season 2 of the podcast!
    We are taking this opportunity to recap what we covered in the season and talk
    about what we liked and what we didn&#39;t like so much. We do not have a guest
    for today&#39;s show so it is just Eric and Justus doing some reflection. We do
    want to take this opportunity to thank all of our guests that have appeared on
    this season and shared their expertise with us, we definitely feel we learned
    a lot during this time! In Season 3 we will be focussing on functional programming,
    performance and teaching Elixir, so make sure to keep an eye out for when that
    drops in the future!</p>\n\n<p><strong>Key Points From This Episode:</strong></p>\n\n<ul>\n<li>The
    possibility of longer episodes for next season </li>\n<li>Reflections on ElixirConf
    and the time we spent there this year. </li>\n<li>The upcoming conference in New
    Orleans that Eric is keynoting.<br></li>\n<li>Thoughts on the future of the podcast
    and the promise of Season 3. </li>\n<li>Reach out! We want to hear from you! </li>\n<li>And
    much more! </li>\n</ul>\n\n<p><strong>Links Mentioned in Today’s Episode:</strong></p>\n\n<p>SmartLogic
    — <a href=\"https://www.smartlogic.io\" rel=\"nofollow\">https://www.smartlogic.io</a><br>\nBrooklyn
    Zelenka — <a href=\"https://github.com/expede\" rel=\"nofollow\">https://github.com/expede</a><br>\nBryan
    Joseph — <a href=\"https://github.com/bryanjos\" rel=\"nofollow\">https://github.com/bryanjos</a><br>\nPaul
    Schoenfelder — <a href=\"https://github.com/bitwalker\" rel=\"nofollow\">https://github.com/bitwalker</a><br>\nMeryl
    Dakin— <a href=\"https://github.com/meryldakin\" rel=\"nofollow\">https://github.com/meryldakin</a><br>\nRené
    Föhring— <a href=\"https://twitter.com/rrrene\" rel=\"nofollow\">https://twitter.com/rrrene</a><br>\nMichal
    Muskala — <a href=\"https://michal.muskala.eu/\" rel=\"nofollow\">https://michal.muskala.eu/</a><br>\nTodd
    Resudek — <a href=\"https://www.linkedin.com/in/toddresudek/\" rel=\"nofollow\">https://www.linkedin.com/in/toddresudek/</a><br>\nShanti
    Chellaram— <a href=\"https://github.com/shantiii\" rel=\"nofollow\">https://github.com/shantiii</a><br>\nSophie
    DeBenedetto — <a href=\"http://sophiedebenedetto.nyc/\" rel=\"nofollow\">http://sophiedebenedetto.nyc/</a><br>\nDave
    Lucia — <a href=\"https://www.linkedin.com/in/david-lucia-a395441b\" rel=\"nofollow\">https://www.linkedin.com/in/david-lucia-a395441b</a><br>\nElixirConf
    — <a href=\"https://elixirconf.com/2019\" rel=\"nofollow\">https://elixirconf.com/2019</a><br>\nThe
    Big Elixir — <a href=\"https://www.thebigelixir.com/\" rel=\"nofollow\">https://www.thebigelixir.com/</a><br>\nLe
    Petit Theatre — <a href=\"http://www.lepetittheatre.com\" rel=\"nofollow\">http://www.lepetittheatre.com</a><br>\nLone
    Star Elixir — <a href=\"https://www.lonestarelixir.com\" rel=\"nofollow\">https://www.lonestarelixir.com</a><br>\nThe
    Empire Strikes Back — <a href=\"https://www.rottentomatoes.com/m/empire_strikes_back\"
    rel=\"nofollow\">https://www.rottentomatoes.com/m/empire_strikes_back</a></p>\n
    \     "
- title: Dave Lucia on Rustler – Elixir Internals
  slug: season-two-lucia
  link: https://podcast.smartlogic.io/season-two-lucia
  guid: 1f938053-676b-4137-ad82-f104ebda9488
  pubDate: Thu, 26 Sep 2019 06:00:00 -0400
  description: "Our guest today on the show is Dave Lucia, who is currently the Vice
    President of Engineering at SimpleBet. He is here as part of Elixir Internals
    series, to talk to us and all our listeners about Rustler and the contribution
    he made to the library! According to our guest, Rustler acts as a bridge between
    Rust and Elixir and allows users to employ the power of Rust within Elixir and
    a great example of this can be found in Dave's work at SimpleBet. He explains
    some of this application and the functionality and improvement it offers and the
    big difference the machine learning models make to this work. Dave also gives
    us some background to his work and career, previous employment and early explorations
    of open-source software. He also shares some great tips for problem-solving and
    learning and improving at programming in Rust. We unpack some of the biggest challenges
    that faced the creation of Rustler, notable differences between Rust and Elixir
    and the technical components of the library that the team created. For all this
    and then some, join us for this great episode!\nKey Points From This Episode:\nMore
    about our guest and his current work at SimpleBet. \nHow Dave got started with
    Elixir while at Bloomberg.\nThe interesting and beautiful way in which The Outline
    used Elixir. \nDave's early forays and experiences with open source software.
    \nProblem finding and solving; Dave's tips to those wanting to improve. \nDave's
    employers' contribution and allowance for open source projects.  \nIntroducing
    Rustler and what users can do with it! \nThe biggest challenges of using multiple
    languages in the backend. \nHow Rustler works; the core, the code generator and
    more.\nThe most important differences between Rust and Elixir.\nDave's best advice
    and resources for learning and mastering Rust.\nAnd much more! \nLinks Mentioned
    in Today’s Episode:\nSmartLogic — https://www.smartlogic.io\nDave Lucia — https://www.linkedin.com/in/david-lucia-a395441b\nRustler
    — https://github.com/rusterlium/rustler\nSimpleBet — https://simplebet.io\nDave
    Lucia on Twitter — https://twitter.com/davydog187\nDave Lucia Email — dave@simplebet.io\nElixir
    — https://elixir-lang.org\nPython — https://www.python.org\nJavaScript — https://www.javascript.com\nRust
    — https://www.rust-lang.org\nBloomberg — https://www.bloomberg.com\nSlack — https://slack.com\nVox
    Media — https://www.voxmedia.com\nThe Outline — https://theoutline.com\nThe Rust
    Programming Language — https://www.amazon.com/Rust-Programming-Language-Steve-Klabnik/dp/1593278284\nRust
    Playground — https://play.rust-lang.org\nElm Compiler — https://github.com/elm/compiler\n
    Special Guest: Dave Lucia.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/1f938053-676b-4137-ad82-f104ebda9488.mp3
    length: '31895775'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '2'
    author: SmartLogic LLC
    subtitle: Our guest today on the show is Dave Lucia, who is currently the Vice
      President of Engineering at SimpleBet. He is here as part of Elixir Internals
      series, to talk to us and all our listeners about Rustler and the contribution
      he made to the library! According to our guest, Rustler acts as a bridge between
      Rust and Elixir and allows users to employ the power of Rust within Elixir and
      a great example of this can be found in Dave's work at SimpleBet. He explains
      some of this application and the functionality and improvement it offers and
      the big difference the machine learning models make to this work.
    duration: '32:31'
    explicit: 'no'
    keywords: elixir, rustler, rust, elm, simplebet
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>Our guest today on the show is Dave Lucia, who is currently
      the Vice President of Engineering at SimpleBet. He is here as part of Elixir
      Internals series, to talk to us and all our listeners about Rustler and the
      contribution he made to the library! According to our guest, Rustler acts as
      a bridge between Rust and Elixir and allows users to employ the power of Rust
      within Elixir and a great example of this can be found in Dave&#39;s work at
      SimpleBet. He explains some of this application and the functionality and improvement
      it offers and the big difference the machine learning models make to this work.
      Dave also gives us some background to his work and career, previous employment
      and early explorations of open-source software. He also shares some great tips
      for problem-solving and learning and improving at programming in Rust. We unpack
      some of the biggest challenges that faced the creation of Rustler, notable differences
      between Rust and Elixir and the technical components of the library that the
      team created. For all this and then some, join us for this great episode!</p>\n\n<p><strong>Key
      Points From This Episode:</strong></p>\n\n<ul>\n<li>More about our guest and
      his current work at SimpleBet. </li>\n<li>How Dave got started with Elixir while
      at Bloomberg.</li>\n<li>The interesting and beautiful way in which The Outline
      used Elixir. </li>\n<li>Dave&#39;s early forays and experiences with open source
      software. </li>\n<li>Problem finding and solving; Dave&#39;s tips to those wanting
      to improve. </li>\n<li>Dave&#39;s employers&#39; contribution and allowance
      for open source projects.<br></li>\n<li>Introducing Rustler and what users can
      do with it! </li>\n<li>The biggest challenges of using multiple languages in
      the backend. </li>\n<li>How Rustler works; the core, the code generator and
      more.</li>\n<li>The most important differences between Rust and Elixir.</li>\n<li>Dave&#39;s
      best advice and resources for learning and mastering Rust.</li>\n<li>And much
      more! </li>\n</ul>\n\n<p>Links Mentioned in Today’s Episode:</p>\n\n<p>SmartLogic
      — <a href=\"https://www.smartlogic.io\" rel=\"nofollow\">https://www.smartlogic.io</a><br>\nDave
      Lucia — <a href=\"https://www.linkedin.com/in/david-lucia-a395441b\" rel=\"nofollow\">https://www.linkedin.com/in/david-lucia-a395441b</a><br>\nRustler
      — <a href=\"https://github.com/rusterlium/rustler\" rel=\"nofollow\">https://github.com/rusterlium/rustler</a><br>\nSimpleBet
      — <a href=\"https://simplebet.io\" rel=\"nofollow\">https://simplebet.io</a><br>\nDave
      Lucia on Twitter — <a href=\"https://twitter.com/davydog187\" rel=\"nofollow\">https://twitter.com/davydog187</a><br>\nDave
      Lucia Email — <a href=\"mailto:dave@simplebet.io\" rel=\"nofollow\">dave@simplebet.io</a><br>\nElixir
      — <a href=\"https://elixir-lang.org\" rel=\"nofollow\">https://elixir-lang.org</a><br>\nPython
      — <a href=\"https://www.python.org\" rel=\"nofollow\">https://www.python.org</a><br>\nJavaScript
      — <a href=\"https://www.javascript.com\" rel=\"nofollow\">https://www.javascript.com</a><br>\nRust
      — <a href=\"https://www.rust-lang.org\" rel=\"nofollow\">https://www.rust-lang.org</a><br>\nBloomberg
      — <a href=\"https://www.bloomberg.com\" rel=\"nofollow\">https://www.bloomberg.com</a><br>\nSlack
      — <a href=\"https://slack.com\" rel=\"nofollow\">https://slack.com</a><br>\nVox
      Media — <a href=\"https://www.voxmedia.com\" rel=\"nofollow\">https://www.voxmedia.com</a><br>\nThe
      Outline — <a href=\"https://theoutline.com\" rel=\"nofollow\">https://theoutline.com</a><br>\nThe
      Rust Programming Language — <a href=\"https://www.amazon.com/Rust-Programming-Language-Steve-Klabnik/dp/1593278284\"
      rel=\"nofollow\">https://www.amazon.com/Rust-Programming-Language-Steve-Klabnik/dp/1593278284</a><br>\nRust
      Playground — <a href=\"https://play.rust-lang.org\" rel=\"nofollow\">https://play.rust-lang.org</a><br>\nElm
      Compiler — <a href=\"https://github.com/elm/compiler\" rel=\"nofollow\">https://github.com/elm/compiler</a></p><p>Special
      Guest: Dave Lucia.</p>\n      "
  contentEncoded: "\n        <p>Our guest today on the show is Dave Lucia, who is
    currently the Vice President of Engineering at SimpleBet. He is here as part of
    Elixir Internals series, to talk to us and all our listeners about Rustler and
    the contribution he made to the library! According to our guest, Rustler acts
    as a bridge between Rust and Elixir and allows users to employ the power of Rust
    within Elixir and a great example of this can be found in Dave&#39;s work at SimpleBet.
    He explains some of this application and the functionality and improvement it
    offers and the big difference the machine learning models make to this work. Dave
    also gives us some background to his work and career, previous employment and
    early explorations of open-source software. He also shares some great tips for
    problem-solving and learning and improving at programming in Rust. We unpack some
    of the biggest challenges that faced the creation of Rustler, notable differences
    between Rust and Elixir and the technical components of the library that the team
    created. For all this and then some, join us for this great episode!</p>\n\n<p><strong>Key
    Points From This Episode:</strong></p>\n\n<ul>\n<li>More about our guest and his
    current work at SimpleBet. </li>\n<li>How Dave got started with Elixir while at
    Bloomberg.</li>\n<li>The interesting and beautiful way in which The Outline used
    Elixir. </li>\n<li>Dave&#39;s early forays and experiences with open source software.
    </li>\n<li>Problem finding and solving; Dave&#39;s tips to those wanting to improve.
    </li>\n<li>Dave&#39;s employers&#39; contribution and allowance for open source
    projects.<br></li>\n<li>Introducing Rustler and what users can do with it! </li>\n<li>The
    biggest challenges of using multiple languages in the backend. </li>\n<li>How
    Rustler works; the core, the code generator and more.</li>\n<li>The most important
    differences between Rust and Elixir.</li>\n<li>Dave&#39;s best advice and resources
    for learning and mastering Rust.</li>\n<li>And much more! </li>\n</ul>\n\n<p>Links
    Mentioned in Today’s Episode:</p>\n\n<p>SmartLogic — <a href=\"https://www.smartlogic.io\"
    rel=\"nofollow\">https://www.smartlogic.io</a><br>\nDave Lucia — <a href=\"https://www.linkedin.com/in/david-lucia-a395441b\"
    rel=\"nofollow\">https://www.linkedin.com/in/david-lucia-a395441b</a><br>\nRustler
    — <a href=\"https://github.com/rusterlium/rustler\" rel=\"nofollow\">https://github.com/rusterlium/rustler</a><br>\nSimpleBet
    — <a href=\"https://simplebet.io\" rel=\"nofollow\">https://simplebet.io</a><br>\nDave
    Lucia on Twitter — <a href=\"https://twitter.com/davydog187\" rel=\"nofollow\">https://twitter.com/davydog187</a><br>\nDave
    Lucia Email — <a href=\"mailto:dave@simplebet.io\" rel=\"nofollow\">dave@simplebet.io</a><br>\nElixir
    — <a href=\"https://elixir-lang.org\" rel=\"nofollow\">https://elixir-lang.org</a><br>\nPython
    — <a href=\"https://www.python.org\" rel=\"nofollow\">https://www.python.org</a><br>\nJavaScript
    — <a href=\"https://www.javascript.com\" rel=\"nofollow\">https://www.javascript.com</a><br>\nRust
    — <a href=\"https://www.rust-lang.org\" rel=\"nofollow\">https://www.rust-lang.org</a><br>\nBloomberg
    — <a href=\"https://www.bloomberg.com\" rel=\"nofollow\">https://www.bloomberg.com</a><br>\nSlack
    — <a href=\"https://slack.com\" rel=\"nofollow\">https://slack.com</a><br>\nVox
    Media — <a href=\"https://www.voxmedia.com\" rel=\"nofollow\">https://www.voxmedia.com</a><br>\nThe
    Outline — <a href=\"https://theoutline.com\" rel=\"nofollow\">https://theoutline.com</a><br>\nThe
    Rust Programming Language — <a href=\"https://www.amazon.com/Rust-Programming-Language-Steve-Klabnik/dp/1593278284\"
    rel=\"nofollow\">https://www.amazon.com/Rust-Programming-Language-Steve-Klabnik/dp/1593278284</a><br>\nRust
    Playground — <a href=\"https://play.rust-lang.org\" rel=\"nofollow\">https://play.rust-lang.org</a><br>\nElm
    Compiler — <a href=\"https://github.com/elm/compiler\" rel=\"nofollow\">https://github.com/elm/compiler</a></p><p>Special
    Guest: Dave Lucia.</p>\n      "
- title: Eric Oestrich on ExVenture – Elixir Internals
  slug: season-two-oestrich
  link: https://podcast.smartlogic.io/season-two-oestrich
  guid: 0a947a18-82f2-4b2e-8c0c-69696c5980d9
  pubDate: Thu, 19 Sep 2019 06:00:00 -0400
  description: "This season on Smart Software Season 2, we are focused on the inner
    workings of Elixir and the inner workings of popular Elixir libraries, or Elixir
    internals. Today, I have the pleasure of interviewing my colleague, Eric Oestrich
    who's responsible for the wildly successful Elixir MUD framework ExVenture.\nExVenture
    - https://exventure.org/\nMUDs - https://en.wikipedia.org/wiki/MUD\nEcto - https://github.com/elixir-ecto/ecto\nEric's
    Going Multi-Node presentation at ElixirConf - https://www.youtube.com/watch?v=lCUKQnkjajo\nThe
    Big Elixir - https://www.thebigelixir.com/\nEric's Prometheus presentation at
    Lonestar Elixir - https://www.youtube.com/watch?v=ETUD9SaRCjY\nPrometheus - https://prometheus.io/\nGo
    - https://golang.org/\nCelluloid - https://celluloid.io/\nPhoenix - https://phoenixframework.org/\nGrapevine
    - https://grapevine.haus/\nGossip - https://mudcoders.com/gossip-the-mud-chat-network-3156cf24edf/\nLearn
    more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) \n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/0a947a18-82f2-4b2e-8c0c-69696c5980d9.mp3
    length: '28927986'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '2'
    author: SmartLogic LLC
    subtitle: This season on Smart Software Season 2, we are focused on the inner
      workings of Elixir and the inner workings of popular Elixir libraries, or Elixir
      internals. Today, I have the pleasure of interviewing my colleague, Eric Oestrich
      who's responsible for the wildly successful Elixir MUD framework ExVenture.
    duration: '29:26'
    explicit: 'no'
    keywords: exventure
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>This season on Smart Software Season 2, we are focused
      on the inner workings of Elixir and the inner workings of popular Elixir libraries,
      or Elixir internals. Today, I have the pleasure of interviewing my colleague,
      Eric Oestrich who&#39;s responsible for the wildly successful Elixir MUD framework
      ExVenture.</p>\n\n<p>ExVenture - <a href=\"https://exventure.org/\" rel=\"nofollow\">https://exventure.org/</a><br>\nMUDs
      - <a href=\"https://en.wikipedia.org/wiki/MUD\" rel=\"nofollow\">https://en.wikipedia.org/wiki/MUD</a><br>\nEcto
      - <a href=\"https://github.com/elixir-ecto/ecto\" rel=\"nofollow\">https://github.com/elixir-ecto/ecto</a><br>\nEric&#39;s
      Going Multi-Node presentation at ElixirConf - <a href=\"https://www.youtube.com/watch?v=lCUKQnkjajo\"
      rel=\"nofollow\">https://www.youtube.com/watch?v=lCUKQnkjajo</a><br>\nThe Big
      Elixir - <a href=\"https://www.thebigelixir.com/\" rel=\"nofollow\">https://www.thebigelixir.com/</a><br>\nEric&#39;s
      Prometheus presentation at Lonestar Elixir - <a href=\"https://www.youtube.com/watch?v=ETUD9SaRCjY\"
      rel=\"nofollow\">https://www.youtube.com/watch?v=ETUD9SaRCjY</a><br>\nPrometheus
      - <a href=\"https://prometheus.io/\" rel=\"nofollow\">https://prometheus.io/</a><br>\nGo
      - <a href=\"https://golang.org/\" rel=\"nofollow\">https://golang.org/</a><br>\nCelluloid
      - <a href=\"https://celluloid.io/\" rel=\"nofollow\">https://celluloid.io/</a><br>\nPhoenix
      - <a href=\"https://phoenixframework.org/\" rel=\"nofollow\">https://phoenixframework.org/</a><br>\nGrapevine
      - <a href=\"https://grapevine.haus/\" rel=\"nofollow\">https://grapevine.haus/</a><br>\nGossip
      - <a href=\"https://mudcoders.com/gossip-the-mud-chat-network-3156cf24edf/\"
      rel=\"nofollow\">https://mudcoders.com/gossip-the-mud-chat-network-3156cf24edf/</a></p>\n\n<p>Learn
      more about how SmartLogic uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix
      and Elixir.</a></p>\n      "
  contentEncoded: "\n        <p>This season on Smart Software Season 2, we are focused
    on the inner workings of Elixir and the inner workings of popular Elixir libraries,
    or Elixir internals. Today, I have the pleasure of interviewing my colleague,
    Eric Oestrich who&#39;s responsible for the wildly successful Elixir MUD framework
    ExVenture.</p>\n\n<p>ExVenture - <a href=\"https://exventure.org/\" rel=\"nofollow\">https://exventure.org/</a><br>\nMUDs
    - <a href=\"https://en.wikipedia.org/wiki/MUD\" rel=\"nofollow\">https://en.wikipedia.org/wiki/MUD</a><br>\nEcto
    - <a href=\"https://github.com/elixir-ecto/ecto\" rel=\"nofollow\">https://github.com/elixir-ecto/ecto</a><br>\nEric&#39;s
    Going Multi-Node presentation at ElixirConf - <a href=\"https://www.youtube.com/watch?v=lCUKQnkjajo\"
    rel=\"nofollow\">https://www.youtube.com/watch?v=lCUKQnkjajo</a><br>\nThe Big
    Elixir - <a href=\"https://www.thebigelixir.com/\" rel=\"nofollow\">https://www.thebigelixir.com/</a><br>\nEric&#39;s
    Prometheus presentation at Lonestar Elixir - <a href=\"https://www.youtube.com/watch?v=ETUD9SaRCjY\"
    rel=\"nofollow\">https://www.youtube.com/watch?v=ETUD9SaRCjY</a><br>\nPrometheus
    - <a href=\"https://prometheus.io/\" rel=\"nofollow\">https://prometheus.io/</a><br>\nGo
    - <a href=\"https://golang.org/\" rel=\"nofollow\">https://golang.org/</a><br>\nCelluloid
    - <a href=\"https://celluloid.io/\" rel=\"nofollow\">https://celluloid.io/</a><br>\nPhoenix
    - <a href=\"https://phoenixframework.org/\" rel=\"nofollow\">https://phoenixframework.org/</a><br>\nGrapevine
    - <a href=\"https://grapevine.haus/\" rel=\"nofollow\">https://grapevine.haus/</a><br>\nGossip
    - <a href=\"https://mudcoders.com/gossip-the-mud-chat-network-3156cf24edf/\" rel=\"nofollow\">https://mudcoders.com/gossip-the-mud-chat-network-3156cf24edf/</a></p>\n\n<p>Learn
    more about how SmartLogic uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix
    and Elixir.</a></p>\n      "
- title: Sophie DeBenedetto on Excrypt and Railway – Elixir Internals
  slug: season-two-debenedetto
  link: https://podcast.smartlogic.io/season-two-debenedetto
  guid: 7b360fac-dde4-44a4-b637-762e19a0274b
  pubDate: Thu, 12 Sep 2019 06:00:00 -0400
  description: "Welcome to another episode of the podcast everybody! As we continue
    our journey into Elixir internals in Season 2, we welcome Sophie DeBenedetto to
    tell us about the two libraries she and the Flatiron School created! We talk about
    Encrypt and Railway and a bunch of other great stuff from the world of Elixir
    and open source and Sophie shares so much about why she is particularly excited
    about things at the moment. She talks about the maturation of the Elixir community
    and her first and most important open-source experiences before diving into her
    hopes for the future of these platforms. We also discuss the ins and out of the
    two libraries and our guest does a fantastic job of explaining their functions
    and the reasons they were built. Sophie shares the major challenges that faced
    her and the team in creating them and a whole lot more, so make sure to tune in
    today for all this great information!\nKey Points From This Episode:\nA brief
    introduction to Sophie's career, the Flatiron School and her Elixir work.\nSophie's
    first experiences with open source, contributing to the Elixir School. \nFlatiron's
    support of open source and their attitude towards the growth of engineers. \nWhy
    Elixir and Ruby are such important languages to Sophie and Flatiron. \nSophie's
    wishes for Elixir and what she wants to see more of in the community. \nIntroducing
    Encrypt and Excrypt for Elixir and why Flatiron chose to build them.\nThe hardest
    parts of building the library, the challenges of encryption.\nElixir's built-in
    option parser; convenience and accessing data easily.\nThe Railway hex package
    and what it enables users to do. \nBreaking down the functions of RabbitMQ for
    Erlang. \nThe two things that Sophie is most excited about in the Elixir space
    right now!\nAnd much more! \nLinks Mentioned in Today’s Episode:\nSophie DeBenedetto
    — http://sophiedebenedetto.nyc/\nFlatiron School — http://sophiedebenedetto.nyc/\nElixir
    School — https://elixirschool.com/en/\nEncrypt — https://github.com/flatiron-labs/encrypt\nEscript
    — https://hexdocs.pm/mix/master/Mix.Tasks.Escript.Build.html\nRuby — https://www.ruby-lang.org/en/\nKafka
    — https://kafka.apache.org\nEcto — https://hexdocs.pm/ecto/Ecto.html\nErlang —
    https://www.erlang.org\nRabbitMQ — https://www.rabbitmq.com\nPhoenix — https://phoenixframework.org\nLiveView
    — https://dockyard.com/blog/2018/12/12/phoenix-liveview-interactive-real-time-apps-no-need-to-write-javascript\nElixir
    Conf — https://elixirconf.com/2019 Special Guest: Sophie DeBenedetto.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/7b360fac-dde4-44a4-b637-762e19a0274b.mp3
    length: '44881230'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '2'
    author: SmartLogic LLC
    subtitle: Welcome to another episode of the podcast everybody! As we continue
      our journey into Elixir internals in Season 2, we welcome Sophie DeBenedetto
      to tell us about the two libraries she and the Flatiron School created! We talk
      about Encrypt and Railway and a bunch of other great stuff from the world of
      Elixir and open source and Sophie shares so much about why she is particularly
      excited about things at the moment.
    duration: '30:42'
    explicit: 'no'
    keywords: ''
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>Welcome to another episode of the podcast everybody! As
      we continue our journey into Elixir internals in Season 2, we welcome Sophie
      DeBenedetto to tell us about the two libraries she and the Flatiron School created!
      We talk about Encrypt and Railway and a bunch of other great stuff from the
      world of Elixir and open source and Sophie shares so much about why she is particularly
      excited about things at the moment. She talks about the maturation of the Elixir
      community and her first and most important open-source experiences before diving
      into her hopes for the future of these platforms. We also discuss the ins and
      out of the two libraries and our guest does a fantastic job of explaining their
      functions and the reasons they were built. Sophie shares the major challenges
      that faced her and the team in creating them and a whole lot more, so make sure
      to tune in today for all this great information!</p>\n\n<p><strong>Key Points
      From This Episode:</strong></p>\n\n<ul>\n<li>A brief introduction to Sophie&#39;s
      career, the Flatiron School and her Elixir work.</li>\n<li>Sophie&#39;s first
      experiences with open source, contributing to the Elixir School. </li>\n<li>Flatiron&#39;s
      support of open source and their attitude towards the growth of engineers. </li>\n<li>Why
      Elixir and Ruby are such important languages to Sophie and Flatiron. </li>\n<li>Sophie&#39;s
      wishes for Elixir and what she wants to see more of in the community. </li>\n<li>Introducing
      Encrypt and Excrypt for Elixir and why Flatiron chose to build them.</li>\n<li>The
      hardest parts of building the library, the challenges of encryption.</li>\n<li>Elixir&#39;s
      built-in option parser; convenience and accessing data easily.</li>\n<li>The
      Railway hex package and what it enables users to do. </li>\n<li>Breaking down
      the functions of RabbitMQ for Erlang. </li>\n<li>The two things that Sophie
      is most excited about in the Elixir space right now!</li>\n<li>And much more!
      </li>\n</ul>\n\n<p>Links Mentioned in Today’s Episode:</p>\n\n<p>Sophie DeBenedetto
      — <a href=\"http://sophiedebenedetto.nyc/\" rel=\"nofollow\">http://sophiedebenedetto.nyc/</a><br>\nFlatiron
      School — <a href=\"http://sophiedebenedetto.nyc/\" rel=\"nofollow\">http://sophiedebenedetto.nyc/</a><br>\nElixir
      School — <a href=\"https://elixirschool.com/en/\" rel=\"nofollow\">https://elixirschool.com/en/</a><br>\nEncrypt
      — <a href=\"https://github.com/flatiron-labs/encrypt\" rel=\"nofollow\">https://github.com/flatiron-labs/encrypt</a><br>\nEscript
      — <a href=\"https://hexdocs.pm/mix/master/Mix.Tasks.Escript.Build.html\" rel=\"nofollow\">https://hexdocs.pm/mix/master/Mix.Tasks.Escript.Build.html</a><br>\nRuby
      — <a href=\"https://www.ruby-lang.org/en/\" rel=\"nofollow\">https://www.ruby-lang.org/en/</a><br>\nKafka
      — <a href=\"https://kafka.apache.org\" rel=\"nofollow\">https://kafka.apache.org</a><br>\nEcto
      — <a href=\"https://hexdocs.pm/ecto/Ecto.html\" rel=\"nofollow\">https://hexdocs.pm/ecto/Ecto.html</a><br>\nErlang
      — <a href=\"https://www.erlang.org\" rel=\"nofollow\">https://www.erlang.org</a><br>\nRabbitMQ
      — <a href=\"https://www.rabbitmq.com\" rel=\"nofollow\">https://www.rabbitmq.com</a><br>\nPhoenix
      — <a href=\"https://phoenixframework.org\" rel=\"nofollow\">https://phoenixframework.org</a><br>\nLiveView
      — <a href=\"https://dockyard.com/blog/2018/12/12/phoenix-liveview-interactive-real-time-apps-no-need-to-write-javascript\"
      rel=\"nofollow\">https://dockyard.com/blog/2018/12/12/phoenix-liveview-interactive-real-time-apps-no-need-to-write-javascript</a><br>\nElixir
      Conf — <a href=\"https://elixirconf.com/2019\" rel=\"nofollow\">https://elixirconf.com/2019</a></p><p>Special
      Guest: Sophie DeBenedetto.</p>\n      "
  contentEncoded: "\n        <p>Welcome to another episode of the podcast everybody!
    As we continue our journey into Elixir internals in Season 2, we welcome Sophie
    DeBenedetto to tell us about the two libraries she and the Flatiron School created!
    We talk about Encrypt and Railway and a bunch of other great stuff from the world
    of Elixir and open source and Sophie shares so much about why she is particularly
    excited about things at the moment. She talks about the maturation of the Elixir
    community and her first and most important open-source experiences before diving
    into her hopes for the future of these platforms. We also discuss the ins and
    out of the two libraries and our guest does a fantastic job of explaining their
    functions and the reasons they were built. Sophie shares the major challenges
    that faced her and the team in creating them and a whole lot more, so make sure
    to tune in today for all this great information!</p>\n\n<p><strong>Key Points
    From This Episode:</strong></p>\n\n<ul>\n<li>A brief introduction to Sophie&#39;s
    career, the Flatiron School and her Elixir work.</li>\n<li>Sophie&#39;s first
    experiences with open source, contributing to the Elixir School. </li>\n<li>Flatiron&#39;s
    support of open source and their attitude towards the growth of engineers. </li>\n<li>Why
    Elixir and Ruby are such important languages to Sophie and Flatiron. </li>\n<li>Sophie&#39;s
    wishes for Elixir and what she wants to see more of in the community. </li>\n<li>Introducing
    Encrypt and Excrypt for Elixir and why Flatiron chose to build them.</li>\n<li>The
    hardest parts of building the library, the challenges of encryption.</li>\n<li>Elixir&#39;s
    built-in option parser; convenience and accessing data easily.</li>\n<li>The Railway
    hex package and what it enables users to do. </li>\n<li>Breaking down the functions
    of RabbitMQ for Erlang. </li>\n<li>The two things that Sophie is most excited
    about in the Elixir space right now!</li>\n<li>And much more! </li>\n</ul>\n\n<p>Links
    Mentioned in Today’s Episode:</p>\n\n<p>Sophie DeBenedetto — <a href=\"http://sophiedebenedetto.nyc/\"
    rel=\"nofollow\">http://sophiedebenedetto.nyc/</a><br>\nFlatiron School — <a href=\"http://sophiedebenedetto.nyc/\"
    rel=\"nofollow\">http://sophiedebenedetto.nyc/</a><br>\nElixir School — <a href=\"https://elixirschool.com/en/\"
    rel=\"nofollow\">https://elixirschool.com/en/</a><br>\nEncrypt — <a href=\"https://github.com/flatiron-labs/encrypt\"
    rel=\"nofollow\">https://github.com/flatiron-labs/encrypt</a><br>\nEscript — <a
    href=\"https://hexdocs.pm/mix/master/Mix.Tasks.Escript.Build.html\" rel=\"nofollow\">https://hexdocs.pm/mix/master/Mix.Tasks.Escript.Build.html</a><br>\nRuby
    — <a href=\"https://www.ruby-lang.org/en/\" rel=\"nofollow\">https://www.ruby-lang.org/en/</a><br>\nKafka
    — <a href=\"https://kafka.apache.org\" rel=\"nofollow\">https://kafka.apache.org</a><br>\nEcto
    — <a href=\"https://hexdocs.pm/ecto/Ecto.html\" rel=\"nofollow\">https://hexdocs.pm/ecto/Ecto.html</a><br>\nErlang
    — <a href=\"https://www.erlang.org\" rel=\"nofollow\">https://www.erlang.org</a><br>\nRabbitMQ
    — <a href=\"https://www.rabbitmq.com\" rel=\"nofollow\">https://www.rabbitmq.com</a><br>\nPhoenix
    — <a href=\"https://phoenixframework.org\" rel=\"nofollow\">https://phoenixframework.org</a><br>\nLiveView
    — <a href=\"https://dockyard.com/blog/2018/12/12/phoenix-liveview-interactive-real-time-apps-no-need-to-write-javascript\"
    rel=\"nofollow\">https://dockyard.com/blog/2018/12/12/phoenix-liveview-interactive-real-time-apps-no-need-to-write-javascript</a><br>\nElixir
    Conf — <a href=\"https://elixirconf.com/2019\" rel=\"nofollow\">https://elixirconf.com/2019</a></p><p>Special
    Guest: Sophie DeBenedetto.</p>\n      "
- title: Shanti Chellaram on Pri-Queue and raft_erl – Elixir Internals
  slug: season-two-chellaram
  link: https://podcast.smartlogic.io/season-two-chellaram
  guid: ec6a1593-38d7-48b0-8494-9dd83f8f6cff
  pubDate: Thu, 05 Sep 2019 06:00:00 -0400
  description: "Today on the show we welcome Shanti Chellaram to talk about a couple
    of Erlang libraries she has created! We hear from her about Pri-Queue and rafterl,
    and her motivation behind making them and some of the things we wishes she did
    differently! Shanti shares some of her background, early coding experiences, affinity
    for open source and her current work situation. From there we look at Pri-Queue,
    the problem it addresses and what a priority queue is. A highlight of the show
    is Shanti giving the best explanation of a bootstrapped skew binomial heap we
    have heard before explaining some of the main issues she faced in creating Pri-Queue.
    We then turn to rafterl, how she got started with it and her hopes for its future.
    Throughout the conversation Shanti shares her philosophy towards open source and
    coding going forward as well as offering advice for newcomers to Erlang. Make
    you you join us for this fantastic episode!\nKey Points From This Episode:\nA
    little bit about Shanti's background and current employment.\nShanti's early experiences
    and what got her into open source software. \nSome coding decisions that Shanti
    would make differently in retrospect. \nThe problem that Pri-Queue solves; the
    dearth of data efficient libraries. \nWhat is a priority queue? Ordering your
    data with scores.\nShanti explains a bootstrapped skew binomial heap!\nSome of
    the hurdles that Shanti faced in writing Pri-Queue. \nHow Shanti got started on
    her other library, raft_erl. \nThe three Raft protocols and how much of it is
    implemented in the library. \nShanti's next goals for raft_erl; bug free and widely
    used.\nThe importance of distributed systems and Shanti's philosophy looking to
    the future.\nAdvice for someone just starting out in Elixir!\nAnd much more! \nLinks
    Mentioned in Today’s Episode:\nSmartLogic — https://www.smartlogic.io/\nShanti
    Chellaram Linkedin— https://www.linkedin.com/in/shanti-chellaram-495444187\nShanti
    Chellaram on Twitter — https://twitter.com/theccoder\nShanti Chellaram on github
    — https://github.com/shantiii\nErlang — https://www.erlang.org/\nElixir — https://elixir-lang.org/\nPri-Queue
    — https://github.com/okeuday/pqueue\nrafterl — https://github.com/shantiii/rafterl\nMailChimp
    — https://mailchimp.com\nTeachers Pay Teachers — https://www.teacherspayteachers.com/\nPurely
    Functional Data Structures — https://www.amazon.com/Purely-Functional-Structures-Chris-Okasaki-ebook/dp/B00AKE1V04\nRust
    — https://www.rust-lang.org/\nRaft — https://raft.github.io/\nRaspberry Pi — https://www.raspberrypi.org/\nElixirConf
    — https://elixirconf.com/2019\nPartisan — https://partisan.cloud/\n Special Guests:
    Dan Ivovich and Shanti Chellaram.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/ec6a1593-38d7-48b0-8494-9dd83f8f6cff.mp3
    length: '42367214'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '2'
    author: SmartLogic LLC
    subtitle: Today on the show we welcome Shanti Chellaram to talk about a couple
      of Erlang libraries she has created! We hear from her about Pri-Queue and raft_erl,
      and her motivation behind making them and some of the things we wishes she did
      differently! Shanti shares some of her background, early coding experiences,
      affinity for open source and her current work situation. From there we look
      at Pri-Queue, the problem it addresses and what a priority queue is.
    duration: '28:57'
    explicit: 'no'
    keywords: ''
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>Today on the show we welcome Shanti Chellaram to talk about
      a couple of Erlang libraries she has created! We hear from her about Pri-Queue
      and raft_erl, and her motivation behind making them and some of the things we
      wishes she did differently! Shanti shares some of her background, early coding
      experiences, affinity for open source and her current work situation. From there
      we look at Pri-Queue, the problem it addresses and what a priority queue is.
      A highlight of the show is Shanti giving the best explanation of a bootstrapped
      skew binomial heap we have heard before explaining some of the main issues she
      faced in creating Pri-Queue. We then turn to raft_erl, how she got started with
      it and her hopes for its future. Throughout the conversation Shanti shares her
      philosophy towards open source and coding going forward as well as offering
      advice for newcomers to Erlang. Make you you join us for this fantastic episode!</p>\n\n<p><strong>Key
      Points From This Episode:</strong></p>\n\n<ul>\n<li>A little bit about Shanti&#39;s
      background and current employment.</li>\n<li>Shanti&#39;s early experiences
      and what got her into open source software. </li>\n<li>Some coding decisions
      that Shanti would make differently in retrospect. </li>\n<li>The problem that
      Pri-Queue solves; the dearth of data efficient libraries. </li>\n<li>What is
      a priority queue? Ordering your data with scores.</li>\n<li>Shanti explains
      a bootstrapped skew binomial heap!</li>\n<li>Some of the hurdles that Shanti
      faced in writing Pri-Queue. </li>\n<li>How Shanti got started on her other library,
      raft_erl. </li>\n<li>The three Raft protocols and how much of it is implemented
      in the library. </li>\n<li>Shanti&#39;s next goals for raft_erl; bug free and
      widely used.</li>\n<li>The importance of distributed systems and Shanti&#39;s
      philosophy looking to the future.</li>\n<li>Advice for someone just starting
      out in Elixir!</li>\n<li>And much more! </li>\n</ul>\n\n<p><strong>Links Mentioned
      in Today’s Episode:</strong></p>\n\n<p>SmartLogic — <a href=\"https://www.smartlogic.io/\"
      rel=\"nofollow\">https://www.smartlogic.io/</a><br>\nShanti Chellaram Linkedin—
      <a href=\"https://www.linkedin.com/in/shanti-chellaram-495444187\" rel=\"nofollow\">https://www.linkedin.com/in/shanti-chellaram-495444187</a><br>\nShanti
      Chellaram on Twitter — <a href=\"https://twitter.com/theccoder\" rel=\"nofollow\">https://twitter.com/theccoder</a><br>\nShanti
      Chellaram on github — <a href=\"https://github.com/shantiii\" rel=\"nofollow\">https://github.com/shantiii</a><br>\nErlang
      — <a href=\"https://www.erlang.org/\" rel=\"nofollow\">https://www.erlang.org/</a><br>\nElixir
      — <a href=\"https://elixir-lang.org/\" rel=\"nofollow\">https://elixir-lang.org/</a><br>\nPri-Queue
      — <a href=\"https://github.com/okeuday/pqueue\" rel=\"nofollow\">https://github.com/okeuday/pqueue</a><br>\nraft_erl
      — <a href=\"https://github.com/shantiii/raft_erl\" rel=\"nofollow\">https://github.com/shantiii/raft_erl</a><br>\nMailChimp
      — <a href=\"https://mailchimp.com\" rel=\"nofollow\">https://mailchimp.com</a><br>\nTeachers
      Pay Teachers — <a href=\"https://www.teacherspayteachers.com/\" rel=\"nofollow\">https://www.teacherspayteachers.com/</a><br>\nPurely
      Functional Data Structures — <a href=\"https://www.amazon.com/Purely-Functional-Structures-Chris-Okasaki-ebook/dp/B00AKE1V04\"
      rel=\"nofollow\">https://www.amazon.com/Purely-Functional-Structures-Chris-Okasaki-ebook/dp/B00AKE1V04</a><br>\nRust
      — <a href=\"https://www.rust-lang.org/\" rel=\"nofollow\">https://www.rust-lang.org/</a><br>\nRaft
      — <a href=\"https://raft.github.io/\" rel=\"nofollow\">https://raft.github.io/</a><br>\nRaspberry
      Pi — <a href=\"https://www.raspberrypi.org/\" rel=\"nofollow\">https://www.raspberrypi.org/</a><br>\nElixirConf
      — <a href=\"https://elixirconf.com/2019\" rel=\"nofollow\">https://elixirconf.com/2019</a><br>\nPartisan
      — <a href=\"https://partisan.cloud/\" rel=\"nofollow\">https://partisan.cloud/</a></p><p>Special
      Guests: Dan Ivovich and Shanti Chellaram.</p>\n      "
  contentEncoded: "\n        <p>Today on the show we welcome Shanti Chellaram to talk
    about a couple of Erlang libraries she has created! We hear from her about Pri-Queue
    and raft_erl, and her motivation behind making them and some of the things we
    wishes she did differently! Shanti shares some of her background, early coding
    experiences, affinity for open source and her current work situation. From there
    we look at Pri-Queue, the problem it addresses and what a priority queue is. A
    highlight of the show is Shanti giving the best explanation of a bootstrapped
    skew binomial heap we have heard before explaining some of the main issues she
    faced in creating Pri-Queue. We then turn to raft_erl, how she got started with
    it and her hopes for its future. Throughout the conversation Shanti shares her
    philosophy towards open source and coding going forward as well as offering advice
    for newcomers to Erlang. Make you you join us for this fantastic episode!</p>\n\n<p><strong>Key
    Points From This Episode:</strong></p>\n\n<ul>\n<li>A little bit about Shanti&#39;s
    background and current employment.</li>\n<li>Shanti&#39;s early experiences and
    what got her into open source software. </li>\n<li>Some coding decisions that
    Shanti would make differently in retrospect. </li>\n<li>The problem that Pri-Queue
    solves; the dearth of data efficient libraries. </li>\n<li>What is a priority
    queue? Ordering your data with scores.</li>\n<li>Shanti explains a bootstrapped
    skew binomial heap!</li>\n<li>Some of the hurdles that Shanti faced in writing
    Pri-Queue. </li>\n<li>How Shanti got started on her other library, raft_erl. </li>\n<li>The
    three Raft protocols and how much of it is implemented in the library. </li>\n<li>Shanti&#39;s
    next goals for raft_erl; bug free and widely used.</li>\n<li>The importance of
    distributed systems and Shanti&#39;s philosophy looking to the future.</li>\n<li>Advice
    for someone just starting out in Elixir!</li>\n<li>And much more! </li>\n</ul>\n\n<p><strong>Links
    Mentioned in Today’s Episode:</strong></p>\n\n<p>SmartLogic — <a href=\"https://www.smartlogic.io/\"
    rel=\"nofollow\">https://www.smartlogic.io/</a><br>\nShanti Chellaram Linkedin—
    <a href=\"https://www.linkedin.com/in/shanti-chellaram-495444187\" rel=\"nofollow\">https://www.linkedin.com/in/shanti-chellaram-495444187</a><br>\nShanti
    Chellaram on Twitter — <a href=\"https://twitter.com/theccoder\" rel=\"nofollow\">https://twitter.com/theccoder</a><br>\nShanti
    Chellaram on github — <a href=\"https://github.com/shantiii\" rel=\"nofollow\">https://github.com/shantiii</a><br>\nErlang
    — <a href=\"https://www.erlang.org/\" rel=\"nofollow\">https://www.erlang.org/</a><br>\nElixir
    — <a href=\"https://elixir-lang.org/\" rel=\"nofollow\">https://elixir-lang.org/</a><br>\nPri-Queue
    — <a href=\"https://github.com/okeuday/pqueue\" rel=\"nofollow\">https://github.com/okeuday/pqueue</a><br>\nraft_erl
    — <a href=\"https://github.com/shantiii/raft_erl\" rel=\"nofollow\">https://github.com/shantiii/raft_erl</a><br>\nMailChimp
    — <a href=\"https://mailchimp.com\" rel=\"nofollow\">https://mailchimp.com</a><br>\nTeachers
    Pay Teachers — <a href=\"https://www.teacherspayteachers.com/\" rel=\"nofollow\">https://www.teacherspayteachers.com/</a><br>\nPurely
    Functional Data Structures — <a href=\"https://www.amazon.com/Purely-Functional-Structures-Chris-Okasaki-ebook/dp/B00AKE1V04\"
    rel=\"nofollow\">https://www.amazon.com/Purely-Functional-Structures-Chris-Okasaki-ebook/dp/B00AKE1V04</a><br>\nRust
    — <a href=\"https://www.rust-lang.org/\" rel=\"nofollow\">https://www.rust-lang.org/</a><br>\nRaft
    — <a href=\"https://raft.github.io/\" rel=\"nofollow\">https://raft.github.io/</a><br>\nRaspberry
    Pi — <a href=\"https://www.raspberrypi.org/\" rel=\"nofollow\">https://www.raspberrypi.org/</a><br>\nElixirConf
    — <a href=\"https://elixirconf.com/2019\" rel=\"nofollow\">https://elixirconf.com/2019</a><br>\nPartisan
    — <a href=\"https://partisan.cloud/\" rel=\"nofollow\">https://partisan.cloud/</a></p><p>Special
    Guests: Dan Ivovich and Shanti Chellaram.</p>\n      "
- title: Michał Muskała on Ecto and jason – Elixir Internals
  slug: season-two-muskala
  link: https://podcast.smartlogic.io/season-two-muskala
  guid: d20c39c5-2b6c-44a9-96ff-0dff754dd08f
  pubDate: Thu, 29 Aug 2019 06:00:00 -0400
  description: "Today on the show we are joined by Michal Muskala, who is currently
    a freelance software engineer and he is here to talk to us about his work on the
    Ecto and jason libraries. With Ecto we continue our journey into Elixir and Michal
    explain how he became involved in the project and the work he did on it. He explains
    a little of its inner workings, issues and what excited him about it initially.
    We then turn to jason, a widely popular library that Michal created for parsing
    JSON. Michal unpacks its particulars, differentiating for us between the driver
    and adapter and the lessons he learned working on them. The last bit of our conversation
    is spent talking about open source and Michal's commitment to its philosophy.
    We discuss making time to work on projects, buy in from employers and and why
    getting involved can be scary yet is so important! For all this and more, join
    us for this great episode!\nKey Points From This Episode:\nA little bit about
    Michal's work background and how he got started on Elixir. \nThe parts of Ecto
    that Michal worked on at Google Summer of Code.\nDifferentiating between the driver
    and the adapter; communicating with the database.\nStructuring the code and what
    Michal would do differently now. \nCreating jason, the default JSON parser and
    the impetus behind it. \nUnderstanding lexing and tokenizing; largely the same
    thing with different names.\nMacros on jason and forcing the VM to use optimizations
    in particular cases. \nPerformance on jason; how Michal achieved the speeds he
    did.\nMichal's path to open source software and what followed his work in MongoDB.
    \nFinding time to work on open source projects while employed.   \nBEAM, alternative
    implementations and why they are important. \nMichal's call to action for our
    listeners! \nAnd much more! \nLinks Mentioned in Today’s Episode:\nSmartLogic
    — https://www.smartlogic.io/\nElixir — https://elixir-lang.org/\nMichal Muskala
    — https://michal.muskala.eu/\nMichal Muskala on Twitter — https://twitter.com/michalmuskala?lang=en\nEcto
    — https://hexdocs.pm/ecto/Ecto.html\njason — https://github.com/michalmuskala/jason
    \nGoogle Summer of Code — https://summerofcode.withgoogle.com/\nMondoDB — https://www.mongodb.com/\nErlang
    — https://www.erlang.org/\nBinary Optimization in Erlang Documentation — https://rhye.org/post/erlang-binary-matching-performance/
    (Please verify link)\nBEAM  — https://blog.stenmans.org/theBeamBook/\nErjang —
    https://jaxenter.com/introducing-erjang-erlang-for-the-jvm-108005.html\nAtom VM
    — http://atomvm.sourceforge.net/ Special Guest: Michał Muskała.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/d20c39c5-2b6c-44a9-96ff-0dff754dd08f.mp3
    length: '40305170'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '2'
    author: SmartLogic LLC
    subtitle: Today on the show we are joined by Michal Muskala, who is currently
      a freelance software engineer and he is here to talk to us about his work on
      the Ecto and jason libraries. With Ecto we continue our journey into Elixir
      and Michal explain how he became involved in the project and the work he did
      on it. He explains a little of its inner workings, issues and what excited him
      about it initially. We then turn to jason, a widely popular library that Michal
      created for parsing JSON. Michal unpacks its particulars, differentiating for
      us between the driver and adapter and the lessons he learned working on them.
      The last bit of our conversation is spent talking about open source and Michal's
      commitment to its philosophy. We discuss making time to work on projects, buy
      in from employers and and why getting involved can be scary yet is so important!
      For all this and more, join us for this great episode!
    duration: '27:31'
    explicit: 'no'
    keywords: elixir, erlang, ecto, jason
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>Today on the show we are joined by Michal Muskala, who
      is currently a freelance software engineer and he is here to talk to us about
      his work on the Ecto and jason libraries. With Ecto we continue our journey
      into Elixir and Michal explain how he became involved in the project and the
      work he did on it. He explains a little of its inner workings, issues and what
      excited him about it initially. We then turn to jason, a widely popular library
      that Michal created for parsing JSON. Michal unpacks its particulars, differentiating
      for us between the driver and adapter and the lessons he learned working on
      them. The last bit of our conversation is spent talking about open source and
      Michal&#39;s commitment to its philosophy. We discuss making time to work on
      projects, buy in from employers and and why getting involved can be scary yet
      is so important! For all this and more, join us for this great episode!</p>\n\n<p><strong>Key
      Points From This Episode:</strong></p>\n\n<ul>\n<li>A little bit about Michal&#39;s
      work background and how he got started on Elixir. </li>\n<li>The parts of Ecto
      that Michal worked on at Google Summer of Code.</li>\n<li>Differentiating between
      the driver and the adapter; communicating with the database.</li>\n<li>Structuring
      the code and what Michal would do differently now. </li>\n<li>Creating jason,
      the default JSON parser and the impetus behind it. </li>\n<li>Understanding
      lexing and tokenizing; largely the same thing with different names.</li>\n<li>Macros
      on jason and forcing the VM to use optimizations in particular cases. </li>\n<li>Performance
      on jason; how Michal achieved the speeds he did.</li>\n<li>Michal&#39;s path
      to open source software and what followed his work in MongoDB. </li>\n<li>Finding
      time to work on open source projects while employed.<br></li>\n<li>BEAM, alternative
      implementations and why they are important. </li>\n<li>Michal&#39;s call to
      action for our listeners! </li>\n<li>And much more! </li>\n</ul>\n\n<p><strong>Links
      Mentioned in Today’s Episode:</strong></p>\n\n<p>SmartLogic — <a href=\"https://www.smartlogic.io/\"
      rel=\"nofollow\">https://www.smartlogic.io/</a><br>\nElixir — <a href=\"https://elixir-lang.org/\"
      rel=\"nofollow\">https://elixir-lang.org/</a><br>\nMichal Muskala — <a href=\"https://michal.muskala.eu/\"
      rel=\"nofollow\">https://michal.muskala.eu/</a><br>\nMichal Muskala on Twitter
      — <a href=\"https://twitter.com/michalmuskala?lang=en\" rel=\"nofollow\">https://twitter.com/michalmuskala?lang=en</a><br>\nEcto
      — <a href=\"https://hexdocs.pm/ecto/Ecto.html\" rel=\"nofollow\">https://hexdocs.pm/ecto/Ecto.html</a><br>\njason
      — <a href=\"https://github.com/michalmuskala/jason\" rel=\"nofollow\">https://github.com/michalmuskala/jason</a>
      <br>\nGoogle Summer of Code — <a href=\"https://summerofcode.withgoogle.com/\"
      rel=\"nofollow\">https://summerofcode.withgoogle.com/</a><br>\nMondoDB — <a
      href=\"https://www.mongodb.com/\" rel=\"nofollow\">https://www.mongodb.com/</a><br>\nErlang
      — <a href=\"https://www.erlang.org/\" rel=\"nofollow\">https://www.erlang.org/</a><br>\nBinary
      Optimization in Erlang Documentation — <a href=\"https://rhye.org/post/erlang-binary-matching-performance/\"
      rel=\"nofollow\">https://rhye.org/post/erlang-binary-matching-performance/</a>
      (Please verify link)<br>\nBEAM  — <a href=\"https://blog.stenmans.org/theBeamBook/\"
      rel=\"nofollow\">https://blog.stenmans.org/theBeamBook/</a><br>\nErjang — <a
      href=\"https://jaxenter.com/introducing-erjang-erlang-for-the-jvm-108005.html\"
      rel=\"nofollow\">https://jaxenter.com/introducing-erjang-erlang-for-the-jvm-108005.html</a><br>\nAtom
      VM — <a href=\"http://atomvm.sourceforge.net/\" rel=\"nofollow\">http://atomvm.sourceforge.net/</a></p><p>Special
      Guest: Michał Muskała.</p>\n      "
  contentEncoded: "\n        <p>Today on the show we are joined by Michal Muskala,
    who is currently a freelance software engineer and he is here to talk to us about
    his work on the Ecto and jason libraries. With Ecto we continue our journey into
    Elixir and Michal explain how he became involved in the project and the work he
    did on it. He explains a little of its inner workings, issues and what excited
    him about it initially. We then turn to jason, a widely popular library that Michal
    created for parsing JSON. Michal unpacks its particulars, differentiating for
    us between the driver and adapter and the lessons he learned working on them.
    The last bit of our conversation is spent talking about open source and Michal&#39;s
    commitment to its philosophy. We discuss making time to work on projects, buy
    in from employers and and why getting involved can be scary yet is so important!
    For all this and more, join us for this great episode!</p>\n\n<p><strong>Key Points
    From This Episode:</strong></p>\n\n<ul>\n<li>A little bit about Michal&#39;s work
    background and how he got started on Elixir. </li>\n<li>The parts of Ecto that
    Michal worked on at Google Summer of Code.</li>\n<li>Differentiating between the
    driver and the adapter; communicating with the database.</li>\n<li>Structuring
    the code and what Michal would do differently now. </li>\n<li>Creating jason,
    the default JSON parser and the impetus behind it. </li>\n<li>Understanding lexing
    and tokenizing; largely the same thing with different names.</li>\n<li>Macros
    on jason and forcing the VM to use optimizations in particular cases. </li>\n<li>Performance
    on jason; how Michal achieved the speeds he did.</li>\n<li>Michal&#39;s path to
    open source software and what followed his work in MongoDB. </li>\n<li>Finding
    time to work on open source projects while employed.<br></li>\n<li>BEAM, alternative
    implementations and why they are important. </li>\n<li>Michal&#39;s call to action
    for our listeners! </li>\n<li>And much more! </li>\n</ul>\n\n<p><strong>Links
    Mentioned in Today’s Episode:</strong></p>\n\n<p>SmartLogic — <a href=\"https://www.smartlogic.io/\"
    rel=\"nofollow\">https://www.smartlogic.io/</a><br>\nElixir — <a href=\"https://elixir-lang.org/\"
    rel=\"nofollow\">https://elixir-lang.org/</a><br>\nMichal Muskala — <a href=\"https://michal.muskala.eu/\"
    rel=\"nofollow\">https://michal.muskala.eu/</a><br>\nMichal Muskala on Twitter
    — <a href=\"https://twitter.com/michalmuskala?lang=en\" rel=\"nofollow\">https://twitter.com/michalmuskala?lang=en</a><br>\nEcto
    — <a href=\"https://hexdocs.pm/ecto/Ecto.html\" rel=\"nofollow\">https://hexdocs.pm/ecto/Ecto.html</a><br>\njason
    — <a href=\"https://github.com/michalmuskala/jason\" rel=\"nofollow\">https://github.com/michalmuskala/jason</a>
    <br>\nGoogle Summer of Code — <a href=\"https://summerofcode.withgoogle.com/\"
    rel=\"nofollow\">https://summerofcode.withgoogle.com/</a><br>\nMondoDB — <a href=\"https://www.mongodb.com/\"
    rel=\"nofollow\">https://www.mongodb.com/</a><br>\nErlang — <a href=\"https://www.erlang.org/\"
    rel=\"nofollow\">https://www.erlang.org/</a><br>\nBinary Optimization in Erlang
    Documentation — <a href=\"https://rhye.org/post/erlang-binary-matching-performance/\"
    rel=\"nofollow\">https://rhye.org/post/erlang-binary-matching-performance/</a>
    (Please verify link)<br>\nBEAM  — <a href=\"https://blog.stenmans.org/theBeamBook/\"
    rel=\"nofollow\">https://blog.stenmans.org/theBeamBook/</a><br>\nErjang — <a href=\"https://jaxenter.com/introducing-erjang-erlang-for-the-jvm-108005.html\"
    rel=\"nofollow\">https://jaxenter.com/introducing-erjang-erlang-for-the-jvm-108005.html</a><br>\nAtom
    VM — <a href=\"http://atomvm.sourceforge.net/\" rel=\"nofollow\">http://atomvm.sourceforge.net/</a></p><p>Special
    Guest: Michał Muskała.</p>\n      "
- title: Todd Resudek on Hex – Elixir Internals
  slug: season-two-resudek
  link: https://podcast.smartlogic.io/season-two-resudek
  guid: 2ebfdc2e-d967-4324-bcbe-de67bccb57e6
  pubDate: Thu, 22 Aug 2019 06:00:00 -0400
  description: "Today on the show we get stuck into the inner workings of Hex 1.0
    and are happy to be joined by returning guest, Todd Resudek. As you might already
    know, Todd is the Senior Software Engineer at Weedmaps, a regular speaker on the
    conference scene, and one of the three core team members at Hex. With the total
    downloads sitting at 641 million, the Hex community is growing rapidly and shows
    no signs of slowing down. In this episode, we discover what makes the Hex packages
    some of the most popular packages out there today, as well as the new and improved
    features currently in the pipeline. In addition, we find out how Todd first got
    involved with the Hex team and how the team makes decisions and problem solves.
    \nKey Points From This Episode:\nTransferring a new library into an old ecosystem.\nTodd’s
    challenges learning Elixir and Hex.\nLearn more about the functions of Alphabetify.\nAn
    introduction to the uses of ETS storage.\nContributing to Open Source while working
    at Weedmaps.\nDiscover how Todd got involved with the Hex team.\nLearn more about
    the different faces of Hex.\nFind out how decisions are made within the Hex team.\nJust
    how busy is the Hex community right now?\nThe top five underground features of
    Hex.\nDiscover the latest features now available on Hex.\nFind out what new Hex
    features are in the pipeline.\nAnd much more!\nLinks Mentioned in Today’s Episode:\nTodd
    Resudek — https://www.linkedin.com/in/toddresudek/\nWeedmaps — https://weedmaps.com/\nHex
    — https://hex.pm/\nrebar3 — https://www.rebar3.org/\nAlphabetify — https://hex.pm/packages/alphabetify\nETS
    — https://elixirschool.com/en/lessons/specifics/ets/\nElixir Mix Podcast — https://devchat.tv/elixir-mix/\nVoitek
    — https://voitekk.com/\nErlef Erlang Ecosystem Foundation — https://erlef.org/\nCrates
    — https://crates.io/crates/hex\nSmart Software with SmartLogic — https://podcast.smartlogic.io/\nNerves
    MeetUp on Twitter — https://twitter.com/nervesmeetup\nThe Big Elixir — https://www.thebigelixir.com/\n
    Special Guest: Todd Resudek.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/2ebfdc2e-d967-4324-bcbe-de67bccb57e6.mp3
    length: '33324417'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '2'
    author: SmartLogic LLC
    subtitle: Today on the show we get stuck into the inner workings of Hex 1.0 and
      are happy to be joined by returning guest, Todd Resudek. As you might already
      know, Todd is the Senior Software Engineer at Weedmaps, a regular speaker on
      the conference scene, and one of the three core team members at Hex. With the
      total downloads sitting at 641 million, the Hex community is growing rapidly
      and shows no signs of slowing down. In this episode, we discover what makes
      the Hex packages some of the most popular packages out there today, as well
      as the new and improved features currently in the pipeline. In addition, we
      find out how Todd first got involved with the Hex team and how the team makes
      decisions and problem solves.
    duration: '34:00'
    explicit: 'no'
    keywords: ''
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>Today on the show we get stuck into the inner workings
      of Hex 1.0 and are happy to be joined by returning guest, Todd Resudek. As you
      might already know, Todd is the Senior Software Engineer at Weedmaps, a regular
      speaker on the conference scene, and one of the three core team members at Hex.
      With the total downloads sitting at 641 million, the Hex community is growing
      rapidly and shows no signs of slowing down. In this episode, we discover what
      makes the Hex packages some of the most popular packages out there today, as
      well as the new and improved features currently in the pipeline. In addition,
      we find out how Todd first got involved with the Hex team and how the team makes
      decisions and problem solves. </p>\n\n<p><strong>Key Points From This Episode:</strong></p>\n\n<ul>\n<li>Transferring
      a new library into an old ecosystem.</li>\n<li>Todd’s challenges learning Elixir
      and Hex.</li>\n<li>Learn more about the functions of Alphabetify.</li>\n<li>An
      introduction to the uses of ETS storage.</li>\n<li>Contributing to Open Source
      while working at Weedmaps.</li>\n<li>Discover how Todd got involved with the
      Hex team.</li>\n<li>Learn more about the different faces of Hex.</li>\n<li>Find
      out how decisions are made within the Hex team.</li>\n<li>Just how busy is the
      Hex community right now?</li>\n<li>The top five underground features of Hex.</li>\n<li>Discover
      the latest features now available on Hex.</li>\n<li>Find out what new Hex features
      are in the pipeline.</li>\n<li>And much more!</li>\n</ul>\n\n<p><strong>Links
      Mentioned in Today’s Episode:</strong></p>\n\n<p>Todd Resudek — <a href=\"https://www.linkedin.com/in/toddresudek/\"
      rel=\"nofollow\">https://www.linkedin.com/in/toddresudek/</a><br>\nWeedmaps
      — <a href=\"https://weedmaps.com/\" rel=\"nofollow\">https://weedmaps.com/</a><br>\nHex
      — <a href=\"https://hex.pm/\" rel=\"nofollow\">https://hex.pm/</a><br>\nrebar3
      — <a href=\"https://www.rebar3.org/\" rel=\"nofollow\">https://www.rebar3.org/</a><br>\nAlphabetify
      — <a href=\"https://hex.pm/packages/alphabetify\" rel=\"nofollow\">https://hex.pm/packages/alphabetify</a><br>\nETS
      — <a href=\"https://elixirschool.com/en/lessons/specifics/ets/\" rel=\"nofollow\">https://elixirschool.com/en/lessons/specifics/ets/</a><br>\nElixir
      Mix Podcast — <a href=\"https://devchat.tv/elixir-mix/\" rel=\"nofollow\">https://devchat.tv/elixir-mix/</a><br>\nVoitek
      — <a href=\"https://voitekk.com/\" rel=\"nofollow\">https://voitekk.com/</a><br>\nErlef
      Erlang Ecosystem Foundation — <a href=\"https://erlef.org/\" rel=\"nofollow\">https://erlef.org/</a><br>\nCrates
      — <a href=\"https://crates.io/crates/hex\" rel=\"nofollow\">https://crates.io/crates/hex</a><br>\nSmart
      Software with SmartLogic — <a href=\"https://podcast.smartlogic.io/\" rel=\"nofollow\">https://podcast.smartlogic.io/</a><br>\nNerves
      MeetUp on Twitter — <a href=\"https://twitter.com/nervesmeetup\" rel=\"nofollow\">https://twitter.com/nervesmeetup</a><br>\nThe
      Big Elixir — <a href=\"https://www.thebigelixir.com/\" rel=\"nofollow\">https://www.thebigelixir.com/</a></p><p>Special
      Guest: Todd Resudek.</p>\n      "
  contentEncoded: "\n        <p>Today on the show we get stuck into the inner workings
    of Hex 1.0 and are happy to be joined by returning guest, Todd Resudek. As you
    might already know, Todd is the Senior Software Engineer at Weedmaps, a regular
    speaker on the conference scene, and one of the three core team members at Hex.
    With the total downloads sitting at 641 million, the Hex community is growing
    rapidly and shows no signs of slowing down. In this episode, we discover what
    makes the Hex packages some of the most popular packages out there today, as well
    as the new and improved features currently in the pipeline. In addition, we find
    out how Todd first got involved with the Hex team and how the team makes decisions
    and problem solves. </p>\n\n<p><strong>Key Points From This Episode:</strong></p>\n\n<ul>\n<li>Transferring
    a new library into an old ecosystem.</li>\n<li>Todd’s challenges learning Elixir
    and Hex.</li>\n<li>Learn more about the functions of Alphabetify.</li>\n<li>An
    introduction to the uses of ETS storage.</li>\n<li>Contributing to Open Source
    while working at Weedmaps.</li>\n<li>Discover how Todd got involved with the Hex
    team.</li>\n<li>Learn more about the different faces of Hex.</li>\n<li>Find out
    how decisions are made within the Hex team.</li>\n<li>Just how busy is the Hex
    community right now?</li>\n<li>The top five underground features of Hex.</li>\n<li>Discover
    the latest features now available on Hex.</li>\n<li>Find out what new Hex features
    are in the pipeline.</li>\n<li>And much more!</li>\n</ul>\n\n<p><strong>Links
    Mentioned in Today’s Episode:</strong></p>\n\n<p>Todd Resudek — <a href=\"https://www.linkedin.com/in/toddresudek/\"
    rel=\"nofollow\">https://www.linkedin.com/in/toddresudek/</a><br>\nWeedmaps —
    <a href=\"https://weedmaps.com/\" rel=\"nofollow\">https://weedmaps.com/</a><br>\nHex
    — <a href=\"https://hex.pm/\" rel=\"nofollow\">https://hex.pm/</a><br>\nrebar3
    — <a href=\"https://www.rebar3.org/\" rel=\"nofollow\">https://www.rebar3.org/</a><br>\nAlphabetify
    — <a href=\"https://hex.pm/packages/alphabetify\" rel=\"nofollow\">https://hex.pm/packages/alphabetify</a><br>\nETS
    — <a href=\"https://elixirschool.com/en/lessons/specifics/ets/\" rel=\"nofollow\">https://elixirschool.com/en/lessons/specifics/ets/</a><br>\nElixir
    Mix Podcast — <a href=\"https://devchat.tv/elixir-mix/\" rel=\"nofollow\">https://devchat.tv/elixir-mix/</a><br>\nVoitek
    — <a href=\"https://voitekk.com/\" rel=\"nofollow\">https://voitekk.com/</a><br>\nErlef
    Erlang Ecosystem Foundation — <a href=\"https://erlef.org/\" rel=\"nofollow\">https://erlef.org/</a><br>\nCrates
    — <a href=\"https://crates.io/crates/hex\" rel=\"nofollow\">https://crates.io/crates/hex</a><br>\nSmart
    Software with SmartLogic — <a href=\"https://podcast.smartlogic.io/\" rel=\"nofollow\">https://podcast.smartlogic.io/</a><br>\nNerves
    MeetUp on Twitter — <a href=\"https://twitter.com/nervesmeetup\" rel=\"nofollow\">https://twitter.com/nervesmeetup</a><br>\nThe
    Big Elixir — <a href=\"https://www.thebigelixir.com/\" rel=\"nofollow\">https://www.thebigelixir.com/</a></p><p>Special
    Guest: Todd Resudek.</p>\n      "
- title: Chris Keathley on Wallaby and Raft – Elixir Internals
  slug: season-two-keathley
  link: https://podcast.smartlogic.io/season-two-keathley
  guid: 37e3efb0-85b7-4dd9-bbf9-a997b01c6437
  pubDate: Thu, 15 Aug 2019 06:00:00 -0400
  description: "In this episode of the podcast we are joined by Chris Keathley to
    continue our exploration of Elixir internals as he tells us about two very popular
    libraries that he developed, Wallaby and Raft. We start off with some background
    and his initial experiences with Elixir and open source projects before diving
    into Wallaby and some of the biggest lessons that Chris learned during and after
    his work on the library. \nChris does a great job of explaining concurrent tests
    and the Sandbox and some of the reasons he has pretty much stopped working on
    the front end of projects. From there we move onto another one of Chris' exciting
    projects, Raft! In order to introduce the library, Chris explains more about consensus
    algorithms, Leslie Lamport and his groundbreaking work on Paxos. Raft is, in some
    ways, a simplified, more accessible version of Paxos for Elixir and Chris goes
    on to give a brief rundown of its inner workings. For this great conversation
    with a great guest, join us today!\nKey Points From This Episode:\nChris' background,
    history with Elixir and his current employment. \nHow Chris got started with open
    source work. \nWhy Chris has moved away from front end work in the last while.
    \nThe major lessons Chris learned while building Wallaby.\nHow the concurrent
    tests work on Wallaby and the Sandbox. \nWhy Chris is still excited about Raft,
    even though he hasn't touched it in a while.  \nExplaining Raft, consensus algorithms
    and Paxos. \nHow the Raft library actually works; building Raft systems and processes.
    \ \nWhere to find and connect with Chris online!\nAnd much more! \nLinks Mentioned
    in Today’s Episode:\nSmartLogic — https://www.smartlogic.io/\nChris Keathley —
    https://keathley.io/\nChris Keathley on github — https://github.com/keathley\nBleacher
    Report — https://bleacherreport.com/\nWallaby — https://hexdocs.pm/wallaby/Wallaby.html\nRaft
    — https://raft.github.io/\nErlang — https://www.erlang.org/\nSlack — https://slack.com/\nLeslie
    Lamport — http://www.lamport.org/\nPaxos Made Live — https://blog.acolyer.org/2015/03/05/paxos-made-live/\nElixir
    Outlaws Podcast — https://elixiroutlaws.com/ Special Guest: Chris Keathley.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/37e3efb0-85b7-4dd9-bbf9-a997b01c6437.mp3
    length: '26369274'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '2'
    author: SmartLogic LLC
    subtitle: In this episode of the podcast we are joined by Chris Keathley to continue
      our exploration of Elixir internals as he tells us about two very popular libraries
      that he developed, Wallaby and Raft. We start off with some background and his
      initial experiences with Elixir and open source projects before diving into
      Wallaby and some of the biggest lessons that Chris learned during and after
      his work on the library.
    duration: '26:46'
    explicit: 'no'
    keywords: ''
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>In this episode of the podcast we are joined by Chris Keathley
      to continue our exploration of Elixir internals as he tells us about two very
      popular libraries that he developed, Wallaby and Raft. We start off with some
      background and his initial experiences with Elixir and open source projects
      before diving into Wallaby and some of the biggest lessons that Chris learned
      during and after his work on the library. </p>\n\n<p>Chris does a great job
      of explaining concurrent tests and the Sandbox and some of the reasons he has
      pretty much stopped working on the front end of projects. From there we move
      onto another one of Chris&#39; exciting projects, Raft! In order to introduce
      the library, Chris explains more about consensus algorithms, Leslie Lamport
      and his groundbreaking work on Paxos. Raft is, in some ways, a simplified, more
      accessible version of Paxos for Elixir and Chris goes on to give a brief rundown
      of its inner workings. For this great conversation with a great guest, join
      us today!</p>\n\n<p><strong>Key Points From This Episode:</strong></p>\n\n<ul>\n<li>Chris&#39;
      background, history with Elixir and his current employment. </li>\n<li>How Chris
      got started with open source work. </li>\n<li>Why Chris has moved away from
      front end work in the last while. </li>\n<li>The major lessons Chris learned
      while building Wallaby.</li>\n<li>How the concurrent tests work on Wallaby and
      the Sandbox. </li>\n<li>Why Chris is still excited about Raft, even though he
      hasn&#39;t touched it in a while.<br></li>\n<li>Explaining Raft, consensus algorithms
      and Paxos. </li>\n<li>How the Raft library actually works; building Raft systems
      and processes.<br></li>\n<li>Where to find and connect with Chris online!</li>\n<li>And
      much more! </li>\n</ul>\n\n<p><strong>Links Mentioned in Today’s Episode:</strong></p>\n\n<p>SmartLogic
      — <a href=\"https://www.smartlogic.io/\" rel=\"nofollow\">https://www.smartlogic.io/</a><br>\nChris
      Keathley — <a href=\"https://keathley.io/\" rel=\"nofollow\">https://keathley.io/</a><br>\nChris
      Keathley on github — <a href=\"https://github.com/keathley\" rel=\"nofollow\">https://github.com/keathley</a><br>\nBleacher
      Report — <a href=\"https://bleacherreport.com/\" rel=\"nofollow\">https://bleacherreport.com/</a><br>\nWallaby
      — <a href=\"https://hexdocs.pm/wallaby/Wallaby.html\" rel=\"nofollow\">https://hexdocs.pm/wallaby/Wallaby.html</a><br>\nRaft
      — <a href=\"https://raft.github.io/\" rel=\"nofollow\">https://raft.github.io/</a><br>\nErlang
      — <a href=\"https://www.erlang.org/\" rel=\"nofollow\">https://www.erlang.org/</a><br>\nSlack
      — <a href=\"https://slack.com/\" rel=\"nofollow\">https://slack.com/</a><br>\nLeslie
      Lamport — <a href=\"http://www.lamport.org/\" rel=\"nofollow\">http://www.lamport.org/</a><br>\nPaxos
      Made Live — <a href=\"https://blog.acolyer.org/2015/03/05/paxos-made-live/\"
      rel=\"nofollow\">https://blog.acolyer.org/2015/03/05/paxos-made-live/</a><br>\nElixir
      Outlaws Podcast — <a href=\"https://elixiroutlaws.com/\" rel=\"nofollow\">https://elixiroutlaws.com/</a></p><p>Special
      Guest: Chris Keathley.</p>\n      "
  contentEncoded: "\n        <p>In this episode of the podcast we are joined by Chris
    Keathley to continue our exploration of Elixir internals as he tells us about
    two very popular libraries that he developed, Wallaby and Raft. We start off with
    some background and his initial experiences with Elixir and open source projects
    before diving into Wallaby and some of the biggest lessons that Chris learned
    during and after his work on the library. </p>\n\n<p>Chris does a great job of
    explaining concurrent tests and the Sandbox and some of the reasons he has pretty
    much stopped working on the front end of projects. From there we move onto another
    one of Chris&#39; exciting projects, Raft! In order to introduce the library,
    Chris explains more about consensus algorithms, Leslie Lamport and his groundbreaking
    work on Paxos. Raft is, in some ways, a simplified, more accessible version of
    Paxos for Elixir and Chris goes on to give a brief rundown of its inner workings.
    For this great conversation with a great guest, join us today!</p>\n\n<p><strong>Key
    Points From This Episode:</strong></p>\n\n<ul>\n<li>Chris&#39; background, history
    with Elixir and his current employment. </li>\n<li>How Chris got started with
    open source work. </li>\n<li>Why Chris has moved away from front end work in the
    last while. </li>\n<li>The major lessons Chris learned while building Wallaby.</li>\n<li>How
    the concurrent tests work on Wallaby and the Sandbox. </li>\n<li>Why Chris is
    still excited about Raft, even though he hasn&#39;t touched it in a while.<br></li>\n<li>Explaining
    Raft, consensus algorithms and Paxos. </li>\n<li>How the Raft library actually
    works; building Raft systems and processes.<br></li>\n<li>Where to find and connect
    with Chris online!</li>\n<li>And much more! </li>\n</ul>\n\n<p><strong>Links Mentioned
    in Today’s Episode:</strong></p>\n\n<p>SmartLogic — <a href=\"https://www.smartlogic.io/\"
    rel=\"nofollow\">https://www.smartlogic.io/</a><br>\nChris Keathley — <a href=\"https://keathley.io/\"
    rel=\"nofollow\">https://keathley.io/</a><br>\nChris Keathley on github — <a href=\"https://github.com/keathley\"
    rel=\"nofollow\">https://github.com/keathley</a><br>\nBleacher Report — <a href=\"https://bleacherreport.com/\"
    rel=\"nofollow\">https://bleacherreport.com/</a><br>\nWallaby — <a href=\"https://hexdocs.pm/wallaby/Wallaby.html\"
    rel=\"nofollow\">https://hexdocs.pm/wallaby/Wallaby.html</a><br>\nRaft — <a href=\"https://raft.github.io/\"
    rel=\"nofollow\">https://raft.github.io/</a><br>\nErlang — <a href=\"https://www.erlang.org/\"
    rel=\"nofollow\">https://www.erlang.org/</a><br>\nSlack — <a href=\"https://slack.com/\"
    rel=\"nofollow\">https://slack.com/</a><br>\nLeslie Lamport — <a href=\"http://www.lamport.org/\"
    rel=\"nofollow\">http://www.lamport.org/</a><br>\nPaxos Made Live — <a href=\"https://blog.acolyer.org/2015/03/05/paxos-made-live/\"
    rel=\"nofollow\">https://blog.acolyer.org/2015/03/05/paxos-made-live/</a><br>\nElixir
    Outlaws Podcast — <a href=\"https://elixiroutlaws.com/\" rel=\"nofollow\">https://elixiroutlaws.com/</a></p><p>Special
    Guest: Chris Keathley.</p>\n      "
- title: René Föhring on Credo – Elixir Internals
  slug: season-two-fohring
  link: https://podcast.smartlogic.io/season-two-fohring
  guid: 9532d3dd-1d07-4ac9-b4c8-3f1580deff11
  pubDate: Thu, 08 Aug 2019 06:00:00 -0400
  description: "Welcome back to the SmartLogic Podcast where we talk about the latest
    developments and best practices in the web and mobile software industry. In continuing
    with our theme of Elixir Internals, we’re having a conversation about the inner
    workings of one of the most popular Elixir libraries, Credo, and we are joined
    by the author René Föhring. \nRené shares the story of how he was introduced
    to Elixir while doing his PhD and looking for a new programming language and then
    shares the philosophy and inspiration Credo was developed on. Wanting Credo to
    be a less rule-based, authoritative code analysis tool and more user friendly,
    René focused on creating it to act as a type of digital mentor to the many developers
    out there who do not have a human mentor. He also shares about some of the launching
    hiccups, what he would have done differently had he been given another opportunity
    and some of the most important lessons that he has learned working in the open
    source community. Be sure to join us for all the inside info! \nKey Points from
    This Episode:\nMore about René’s job as head of product development at 5 Minds
    and what they do. \nWhat he does in his free time: open source maintenance and
    conference speaking. \nHow he got started with Elixir and wanting to learn a new
    programming language.\nWhat Credo is all about, why you’d want to use it and what
    makes it different.  \nThe inspiration behind writing Credo and wanting a more
    positive, less dogmatic tool.  \nStarting off building on Dogma but then pivoting
    and going in an independent direction. \nThe hiccups René experienced when first
    releasing Credo and what he’d do differently. \nThe different checks in Credo
    and how they function and respond to issues. \nHow Elixir 1.6 impacted the development
    of Credo.  \nWhat’s new with the Credo 1.1 release?\nRené’s experience working
    with open source and the first library he contributed to.  \nImportant lessons
    he has learned by being part of the open source community. \nAnd much more! \nLinks
    Mentioned in Today’s Episode:\nElixir — https://elixir-lang.org/\nCredo — http://credo-ci.org/\nRené
    Föhring on Twitter — https://twitter.com/rrrene?lang=en\n5 Minds IT – Solutions
    — https://www.5minds.de/\nGitHub — https://github.com/\nRuby — https://www.ruby-lang.org/en/\nGo
    — https://golang.org/\nCplusplus — http://www.cplusplus.com/\nStyleCop — https://github.com/StyleCop/StyleCop\nDogma
    — https://github.com/lpil/dogma\nHex — https://hex.pm/\nLearn more about how SmartLogic
    uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) Special Guest: René Föhring.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/9532d3dd-1d07-4ac9-b4c8-3f1580deff11.mp3
    length: '29091995'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '2'
    author: SmartLogic LLC
    subtitle: Welcome back to the SmartLogic Podcast where we talk about the latest
      developments and best practices in the web and mobile software industry. In
      continuing with our theme of Elixir Internals, we’re having a conversation about
      the inner workings of one of the most popular Elixir libraries, Credo, and we
      are joined by the author René Föhring. René shares the story of how he was
      introduced to Elixir while doing his PhD and looking for a new programming language
      and then shares the philosophy and inspiration Credo was developed on.
    duration: '29:36'
    explicit: 'no'
    keywords: elixir, credo
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>Welcome back to the SmartLogic Podcast where we talk about
      the latest developments and best practices in the web and mobile software industry.
      In continuing with our theme of Elixir Internals, we’re having a conversation
      about the inner workings of one of the most popular Elixir libraries, Credo,
      and we are joined by the author René Föhring. </p>\n\n<p>René shares the story
      of how he was introduced to Elixir while doing his PhD and looking for a new
      programming language and then shares the philosophy and inspiration Credo was
      developed on. Wanting Credo to be a less rule-based, authoritative code analysis
      tool and more user friendly, René focused on creating it to act as a type of
      digital mentor to the many developers out there who do not have a human mentor.
      He also shares about some of the launching hiccups, what he would have done
      differently had he been given another opportunity and some of the most important
      lessons that he has learned working in the open source community. Be sure to
      join us for all the inside info! </p>\n\n<p><strong>Key Points from This Episode:</strong></p>\n\n<ul>\n<li>More
      about René’s job as head of product development at 5 Minds and what they do.
      </li>\n<li>What he does in his free time: open source maintenance and conference
      speaking. </li>\n<li>How he got started with Elixir and wanting to learn a new
      programming language.</li>\n<li>What Credo is all about, why you’d want to use
      it and what makes it different.<br></li>\n<li>The inspiration behind writing
      Credo and wanting a more positive, less dogmatic tool.<br></li>\n<li>Starting
      off building on Dogma but then pivoting and going in an independent direction.
      </li>\n<li>The hiccups René experienced when first releasing Credo and what
      he’d do differently. </li>\n<li>The different checks in Credo and how they function
      and respond to issues. </li>\n<li>How Elixir 1.6 impacted the development of
      Credo.<br></li>\n<li>What’s new with the Credo 1.1 release?</li>\n<li>René’s
      experience working with open source and the first library he contributed to.<br></li>\n<li>Important
      lessons he has learned by being part of the open source community. </li>\n<li>And
      much more! </li>\n</ul>\n\n<p><strong>Links Mentioned in Today’s Episode:</strong></p>\n\n<p>Elixir
      — <a href=\"https://elixir-lang.org/\" rel=\"nofollow\">https://elixir-lang.org/</a><br>\nCredo
      — <a href=\"http://credo-ci.org/\" rel=\"nofollow\">http://credo-ci.org/</a><br>\nRené
      Föhring on Twitter — <a href=\"https://twitter.com/rrrene?lang=en\" rel=\"nofollow\">https://twitter.com/rrrene?lang=en</a><br>\n5
      Minds IT – Solutions — <a href=\"https://www.5minds.de/\" rel=\"nofollow\">https://www.5minds.de/</a><br>\nGitHub
      — <a href=\"https://github.com/\" rel=\"nofollow\">https://github.com/</a><br>\nRuby
      — <a href=\"https://www.ruby-lang.org/en/\" rel=\"nofollow\">https://www.ruby-lang.org/en/</a><br>\nGo
      — <a href=\"https://golang.org/\" rel=\"nofollow\">https://golang.org/</a><br>\nCplusplus
      — <a href=\"http://www.cplusplus.com/\" rel=\"nofollow\">http://www.cplusplus.com/</a><br>\nStyleCop
      — <a href=\"https://github.com/StyleCop/StyleCop\" rel=\"nofollow\">https://github.com/StyleCop/StyleCop</a><br>\nDogma
      — <a href=\"https://github.com/lpil/dogma\" rel=\"nofollow\">https://github.com/lpil/dogma</a><br>\nHex
      — <a href=\"https://hex.pm/\" rel=\"nofollow\">https://hex.pm/</a></p>\n\n<p>Learn
      more about how SmartLogic uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix
      and Elixir.</a></p><p>Special Guest: René Föhring.</p>\n      "
  contentEncoded: "\n        <p>Welcome back to the SmartLogic Podcast where we talk
    about the latest developments and best practices in the web and mobile software
    industry. In continuing with our theme of Elixir Internals, we’re having a conversation
    about the inner workings of one of the most popular Elixir libraries, Credo, and
    we are joined by the author René Föhring. </p>\n\n<p>René shares the story of
    how he was introduced to Elixir while doing his PhD and looking for a new programming
    language and then shares the philosophy and inspiration Credo was developed on.
    Wanting Credo to be a less rule-based, authoritative code analysis tool and more
    user friendly, René focused on creating it to act as a type of digital mentor
    to the many developers out there who do not have a human mentor. He also shares
    about some of the launching hiccups, what he would have done differently had he
    been given another opportunity and some of the most important lessons that he
    has learned working in the open source community. Be sure to join us for all the
    inside info! </p>\n\n<p><strong>Key Points from This Episode:</strong></p>\n\n<ul>\n<li>More
    about René’s job as head of product development at 5 Minds and what they do. </li>\n<li>What
    he does in his free time: open source maintenance and conference speaking. </li>\n<li>How
    he got started with Elixir and wanting to learn a new programming language.</li>\n<li>What
    Credo is all about, why you’d want to use it and what makes it different.<br></li>\n<li>The
    inspiration behind writing Credo and wanting a more positive, less dogmatic tool.<br></li>\n<li>Starting
    off building on Dogma but then pivoting and going in an independent direction.
    </li>\n<li>The hiccups René experienced when first releasing Credo and what he’d
    do differently. </li>\n<li>The different checks in Credo and how they function
    and respond to issues. </li>\n<li>How Elixir 1.6 impacted the development of Credo.<br></li>\n<li>What’s
    new with the Credo 1.1 release?</li>\n<li>René’s experience working with open
    source and the first library he contributed to.<br></li>\n<li>Important lessons
    he has learned by being part of the open source community. </li>\n<li>And much
    more! </li>\n</ul>\n\n<p><strong>Links Mentioned in Today’s Episode:</strong></p>\n\n<p>Elixir
    — <a href=\"https://elixir-lang.org/\" rel=\"nofollow\">https://elixir-lang.org/</a><br>\nCredo
    — <a href=\"http://credo-ci.org/\" rel=\"nofollow\">http://credo-ci.org/</a><br>\nRené
    Föhring on Twitter — <a href=\"https://twitter.com/rrrene?lang=en\" rel=\"nofollow\">https://twitter.com/rrrene?lang=en</a><br>\n5
    Minds IT – Solutions — <a href=\"https://www.5minds.de/\" rel=\"nofollow\">https://www.5minds.de/</a><br>\nGitHub
    — <a href=\"https://github.com/\" rel=\"nofollow\">https://github.com/</a><br>\nRuby
    — <a href=\"https://www.ruby-lang.org/en/\" rel=\"nofollow\">https://www.ruby-lang.org/en/</a><br>\nGo
    — <a href=\"https://golang.org/\" rel=\"nofollow\">https://golang.org/</a><br>\nCplusplus
    — <a href=\"http://www.cplusplus.com/\" rel=\"nofollow\">http://www.cplusplus.com/</a><br>\nStyleCop
    — <a href=\"https://github.com/StyleCop/StyleCop\" rel=\"nofollow\">https://github.com/StyleCop/StyleCop</a><br>\nDogma
    — <a href=\"https://github.com/lpil/dogma\" rel=\"nofollow\">https://github.com/lpil/dogma</a><br>\nHex
    — <a href=\"https://hex.pm/\" rel=\"nofollow\">https://hex.pm/</a></p>\n\n<p>Learn
    more about how SmartLogic uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix
    and Elixir.</a></p><p>Special Guest: René Föhring.</p>\n      "
- title: Meryl Dakin on Token Alchemist – Elixir Internals
  slug: season-two-dakin
  link: https://podcast.smartlogic.io/season-two-dakin
  guid: 3050865c-0418-42d6-ade9-9605af11fee6
  pubDate: Thu, 01 Aug 2019 06:00:00 -0400
  description: "Today on the show we continue our series on the inner workings of
    several different Elixir libraries and are happy to be joined by Meryl Dakin,
    Software Engineer at the Flatiron School and author of Token Alchemist. In this
    episode, we discover how Meryl got started with Elixir and what the process was
    like for her transitioning from Ruby to Elixir. We learn more about the internal
    functions of Token Alchemist within the school context and discuss the unique
    opportunities Meryl has discovered in Elixir, as well as the trickier language
    features that programmers are likely to experience in their learning process.
    Meryl also shares the challenges that Token Alchemist attempts to overcome – delving
    deeper into LTI, the Learn.co platform, OAuth and JSON. For all this and more,
    be sure to click play!\nKey Points From This Episode:\nDiscover why Meryl first
    got started with Elixir.\nLearn more about the Flatiron Bootcamp for coders.\nMeryl’s
    experience in transitioning from Ruby to Elixir.\nThe opportunities for concurrency
    and fault tolerance in Elixir.\nDiscover the top three tricky language features
    in Elixir.\nThe benefits of going back to the basics of Elixir.\nFind out the
    problems that Token Alchemist attempts to solve.\nMeryl explains LTI and the Learn.co
    platform for students. \nLearn more about custom parameters in Token Alchemist.\nThe
    process of learning OAuth in Token Alchemist.\nWhat to consider when using LTI
    in Elixir.\nThe benefits of resource link history ID’s in the LTI spec.\nOpportunities
    for you with Token Alchemist.\nAnd much more!\nLinks Mentioned in Today’s Episode:\nWe
    Work — https://www.wework.com/\nFlatiron School — https://flatironschool.com/\nElixir
    — https://elixir-lang.org/\nRuby — https://www.ruby-lang.org/en/\nLearn.co — https://learn.co/\nMeryl
    on LinkedIn — https://www.linkedin.com/in/meryldakin/\nMeryl on Twitter — https://twitter.com/meryldakin\nMeryl
    on GitHub — https://github.com/meryldakin\nToken Alchemist on GitHub — https://github.com/meryldakin/token_alchemist\nLearn
    more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) Special
    Guest: Meryl Dakin.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/3050865c-0418-42d6-ade9-9605af11fee6.mp3
    length: '26834266'
    type: audio/mpeg
  itunes:
    episodeType: full
    season: '2'
    author: SmartLogic LLC
    subtitle: Today on the show we continue our series on the inner workings of several
      different Elixir libraries and are happy to be joined by Meryl Dakin, Software
      Engineer at the Flatiron School and author of Token Alchemist. In this episode,
      we discover how Meryl got started with Elixir and what the process was like
      for her transitioning from Ruby to Elixir. We learn more about the internal
      functions of Token Alchemist within the school context and discuss the unique
      opportunities Meryl has discovered in Elixir, as well as the trickier language
      features that programmers are likely to experience in their learning process.
      Meryl also shares the challenges that Token Alchemist attempts to overcome –
      delving deeper into LTI, the Learn.co platform, OAuth and JSON. For all this
      and more, be sure to click play!
    duration: '27:31'
    explicit: 'no'
    keywords: elixir, wework, flatiron school, token alchemist
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>Today on the show we continue our series on the inner workings
      of several different Elixir libraries and are happy to be joined by Meryl Dakin,
      Software Engineer at the Flatiron School and author of Token Alchemist. In this
      episode, we discover how Meryl got started with Elixir and what the process
      was like for her transitioning from Ruby to Elixir. We learn more about the
      internal functions of Token Alchemist within the school context and discuss
      the unique opportunities Meryl has discovered in Elixir, as well as the trickier
      language features that programmers are likely to experience in their learning
      process. Meryl also shares the challenges that Token Alchemist attempts to overcome
      – delving deeper into LTI, the Learn.co platform, OAuth and JSON. For all this
      and more, be sure to click play!</p>\n\n<p><strong>Key Points From This Episode:</strong></p>\n\n<ul>\n<li>Discover
      why Meryl first got started with Elixir.</li>\n<li>Learn more about the Flatiron
      Bootcamp for coders.</li>\n<li>Meryl’s experience in transitioning from Ruby
      to Elixir.</li>\n<li>The opportunities for concurrency and fault tolerance in
      Elixir.</li>\n<li>Discover the top three tricky language features in Elixir.</li>\n<li>The
      benefits of going back to the basics of Elixir.</li>\n<li>Find out the problems
      that Token Alchemist attempts to solve.</li>\n<li>Meryl explains LTI and the
      Learn.co platform for students. </li>\n<li>Learn more about custom parameters
      in Token Alchemist.</li>\n<li>The process of learning OAuth in Token Alchemist.</li>\n<li>What
      to consider when using LTI in Elixir.</li>\n<li>The benefits of resource link
      history ID’s in the LTI spec.</li>\n<li>Opportunities for you with Token Alchemist.</li>\n<li>And
      much more!</li>\n</ul>\n\n<p><strong>Links Mentioned in Today’s Episode:</strong></p>\n\n<p>We
      Work — <a href=\"https://www.wework.com/\" rel=\"nofollow\">https://www.wework.com/</a><br>\nFlatiron
      School — <a href=\"https://flatironschool.com/\" rel=\"nofollow\">https://flatironschool.com/</a><br>\nElixir
      — <a href=\"https://elixir-lang.org/\" rel=\"nofollow\">https://elixir-lang.org/</a><br>\nRuby
      — <a href=\"https://www.ruby-lang.org/en/\" rel=\"nofollow\">https://www.ruby-lang.org/en/</a><br>\nLearn.co
      — <a href=\"https://learn.co/\" rel=\"nofollow\">https://learn.co/</a><br>\nMeryl
      on LinkedIn — <a href=\"https://www.linkedin.com/in/meryldakin/\" rel=\"nofollow\">https://www.linkedin.com/in/meryldakin/</a><br>\nMeryl
      on Twitter — <a href=\"https://twitter.com/meryldakin\" rel=\"nofollow\">https://twitter.com/meryldakin</a><br>\nMeryl
      on GitHub — <a href=\"https://github.com/meryldakin\" rel=\"nofollow\">https://github.com/meryldakin</a><br>\nToken
      Alchemist on GitHub — <a href=\"https://github.com/meryldakin/token_alchemist\"
      rel=\"nofollow\">https://github.com/meryldakin/token_alchemist</a></p>\n\n<p>Learn
      more about how SmartLogic uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix
      and Elixir.</a></p><p>Special Guest: Meryl Dakin.</p>\n      "
  contentEncoded: "\n        <p>Today on the show we continue our series on the inner
    workings of several different Elixir libraries and are happy to be joined by Meryl
    Dakin, Software Engineer at the Flatiron School and author of Token Alchemist.
    In this episode, we discover how Meryl got started with Elixir and what the process
    was like for her transitioning from Ruby to Elixir. We learn more about the internal
    functions of Token Alchemist within the school context and discuss the unique
    opportunities Meryl has discovered in Elixir, as well as the trickier language
    features that programmers are likely to experience in their learning process.
    Meryl also shares the challenges that Token Alchemist attempts to overcome – delving
    deeper into LTI, the Learn.co platform, OAuth and JSON. For all this and more,
    be sure to click play!</p>\n\n<p><strong>Key Points From This Episode:</strong></p>\n\n<ul>\n<li>Discover
    why Meryl first got started with Elixir.</li>\n<li>Learn more about the Flatiron
    Bootcamp for coders.</li>\n<li>Meryl’s experience in transitioning from Ruby to
    Elixir.</li>\n<li>The opportunities for concurrency and fault tolerance in Elixir.</li>\n<li>Discover
    the top three tricky language features in Elixir.</li>\n<li>The benefits of going
    back to the basics of Elixir.</li>\n<li>Find out the problems that Token Alchemist
    attempts to solve.</li>\n<li>Meryl explains LTI and the Learn.co platform for
    students. </li>\n<li>Learn more about custom parameters in Token Alchemist.</li>\n<li>The
    process of learning OAuth in Token Alchemist.</li>\n<li>What to consider when
    using LTI in Elixir.</li>\n<li>The benefits of resource link history ID’s in the
    LTI spec.</li>\n<li>Opportunities for you with Token Alchemist.</li>\n<li>And
    much more!</li>\n</ul>\n\n<p><strong>Links Mentioned in Today’s Episode:</strong></p>\n\n<p>We
    Work — <a href=\"https://www.wework.com/\" rel=\"nofollow\">https://www.wework.com/</a><br>\nFlatiron
    School — <a href=\"https://flatironschool.com/\" rel=\"nofollow\">https://flatironschool.com/</a><br>\nElixir
    — <a href=\"https://elixir-lang.org/\" rel=\"nofollow\">https://elixir-lang.org/</a><br>\nRuby
    — <a href=\"https://www.ruby-lang.org/en/\" rel=\"nofollow\">https://www.ruby-lang.org/en/</a><br>\nLearn.co
    — <a href=\"https://learn.co/\" rel=\"nofollow\">https://learn.co/</a><br>\nMeryl
    on LinkedIn — <a href=\"https://www.linkedin.com/in/meryldakin/\" rel=\"nofollow\">https://www.linkedin.com/in/meryldakin/</a><br>\nMeryl
    on Twitter — <a href=\"https://twitter.com/meryldakin\" rel=\"nofollow\">https://twitter.com/meryldakin</a><br>\nMeryl
    on GitHub — <a href=\"https://github.com/meryldakin\" rel=\"nofollow\">https://github.com/meryldakin</a><br>\nToken
    Alchemist on GitHub — <a href=\"https://github.com/meryldakin/token_alchemist\"
    rel=\"nofollow\">https://github.com/meryldakin/token_alchemist</a></p>\n\n<p>Learn
    more about how SmartLogic uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix
    and Elixir.</a></p><p>Special Guest: Meryl Dakin.</p>\n      "
- title: Paul Schoenfelder on Distillery – Elixir Internals
  slug: season-two-schoenfelder
  link: https://podcast.smartlogic.io/season-two-schoenfelder
  guid: bd39f088-71c3-4425-b78e-8fc4a5324a1c
  pubDate: Thu, 25 Jul 2019 06:00:00 -0400
  description: "Welcome back to show everyone and today in our exploration of Elixir
    libraries we are talking to Paul Schoenfelder! He is here to unpack Distillery,
    his own creation from the world of Elixir and tell us about how it works. We also
    discuss how Paul made the transition from bigger corporations into the startup
    world, his early experiences of different coding languages and the initial steps
    he took in writing Distillery. Paul is very honest about the unclear future of
    the library and he shares his hopes for it for the short term as well as clarifying
    its key concepts and functions. He gives great advice and directions for learning
    more about the resource and how you can help him and his projects out if you use
    them. For all this and then some, be sure to join us today for the show! \n Key
    Points From This Episode: \n* Paul's work background, language history and the
    last few years working Elixir. \n* The first library that Paul contributed to
    and created on his own! \n* What brought about the creation of Distillery. \n*
    Clarifying releases, compiling, generating, deployment and more. \n* Where to
    learn more and find out details about the library. \n* The first steps Paul took
    when writing this latest version of the Distillery. \n* Looking to the future
    of Distillery and its current best use cases. \n* Hot upgrades and who they can
    be useful to when it comes to Elixir. \n* Let Paul know if you are using or want
    to contribute to a project of his! \n* And much more! \nLinks Mentioned in Today’s
    Episode: \nSmartlogic — https://www.smartlogic.io/ \nPaul Schoenfelder — https://github.com/bitwalker
    \nBitwalker — http://bitwalker.org/ \nDistillery — https://hex.pm/packages/distillery
    \nDockYard — https://dockyard.com/ \nErlang — https://www.erlang.org/ \nPhoenix
    — https://phoenixframework.org/ \nLearn more about how SmartLogic uses Phoenix
    and Elixir. (https://smr.tl/2Hyslu8) Special Guest: Paul Schoenfelder.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/bd39f088-71c3-4425-b78e-8fc4a5324a1c.mp3
    length: '29233230'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '2'
    author: SmartLogic LLC
    subtitle: 'Welcome back to show everyone and today in our exploration of Elixir
      libraries we are talking to Paul Schoenfelder! He is here to unpack Distillery,
      his own creation from the world of Elixir and tell us about how it works. We
      also discuss how Paul made the transition from bigger corporations into the
      startup world, his early experiences of different coding languages and the initial
      steps he took in writing Distillery. Paul is very honest about the unclear future
      of the library and he shares his hopes for it for the short term as well as
      clarifying its key concepts and functions. He gives great advice and directions
      for learning more about the resource and how you can help him and his projects
      out if you use them. For all this and then some, be sure to join us today for
      the show! '
    duration: '29:45'
    explicit: 'no'
    keywords: elixir, distillery
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>Welcome back to show everyone and today in our exploration
      of Elixir libraries we are talking to Paul Schoenfelder! He is here to unpack
      Distillery, his own creation from the world of Elixir and tell us about how
      it works. We also discuss how Paul made the transition from bigger corporations
      into the startup world, his early experiences of different coding languages
      and the initial steps he took in writing Distillery. Paul is very honest about
      the unclear future of the library and he shares his hopes for it for the short
      term as well as clarifying its key concepts and functions. He gives great advice
      and directions for learning more about the resource and how you can help him
      and his projects out if you use them. For all this and then some, be sure to
      join us today for the show! </p>\n\n<p>Key Points From This Episode: </p>\n\n<ul>\n<li>Paul&#39;s
      work background, language history and the last few years working Elixir. </li>\n<li>The
      first library that Paul contributed to and created on his own! </li>\n<li>What
      brought about the creation of Distillery. </li>\n<li>Clarifying releases, compiling,
      generating, deployment and more. </li>\n<li>Where to learn more and find out
      details about the library. </li>\n<li>The first steps Paul took when writing
      this latest version of the Distillery. </li>\n<li>Looking to the future of Distillery
      and its current best use cases. </li>\n<li>Hot upgrades and who they can be
      useful to when it comes to Elixir. </li>\n<li>Let Paul know if you are using
      or want to contribute to a project of his! </li>\n<li>And much more! </li>\n</ul>\n\n<p>Links
      Mentioned in Today’s Episode: <br>\nSmartlogic — <a href=\"https://www.smartlogic.io/\"
      rel=\"nofollow\">https://www.smartlogic.io/</a> <br>\nPaul Schoenfelder — <a
      href=\"https://github.com/bitwalker\" rel=\"nofollow\">https://github.com/bitwalker</a>
      <br>\nBitwalker — <a href=\"http://bitwalker.org/\" rel=\"nofollow\">http://bitwalker.org/</a>
      <br>\nDistillery — <a href=\"https://hex.pm/packages/distillery\" rel=\"nofollow\">https://hex.pm/packages/distillery</a>
      <br>\nDockYard — <a href=\"https://dockyard.com/\" rel=\"nofollow\">https://dockyard.com/</a>
      <br>\nErlang — <a href=\"https://www.erlang.org/\" rel=\"nofollow\">https://www.erlang.org/</a>
      <br>\nPhoenix — <a href=\"https://phoenixframework.org/\" rel=\"nofollow\">https://phoenixframework.org/</a>
      </p>\n\n<p>Learn more about how SmartLogic uses <a href=\"https://smr.tl/2Hyslu8\"
      rel=\"nofollow\">Phoenix and Elixir.</a></p><p>Special Guest: Paul Schoenfelder.</p>\n
      \     "
  contentEncoded: "\n        <p>Welcome back to show everyone and today in our exploration
    of Elixir libraries we are talking to Paul Schoenfelder! He is here to unpack
    Distillery, his own creation from the world of Elixir and tell us about how it
    works. We also discuss how Paul made the transition from bigger corporations into
    the startup world, his early experiences of different coding languages and the
    initial steps he took in writing Distillery. Paul is very honest about the unclear
    future of the library and he shares his hopes for it for the short term as well
    as clarifying its key concepts and functions. He gives great advice and directions
    for learning more about the resource and how you can help him and his projects
    out if you use them. For all this and then some, be sure to join us today for
    the show! </p>\n\n<p>Key Points From This Episode: </p>\n\n<ul>\n<li>Paul&#39;s
    work background, language history and the last few years working Elixir. </li>\n<li>The
    first library that Paul contributed to and created on his own! </li>\n<li>What
    brought about the creation of Distillery. </li>\n<li>Clarifying releases, compiling,
    generating, deployment and more. </li>\n<li>Where to learn more and find out details
    about the library. </li>\n<li>The first steps Paul took when writing this latest
    version of the Distillery. </li>\n<li>Looking to the future of Distillery and
    its current best use cases. </li>\n<li>Hot upgrades and who they can be useful
    to when it comes to Elixir. </li>\n<li>Let Paul know if you are using or want
    to contribute to a project of his! </li>\n<li>And much more! </li>\n</ul>\n\n<p>Links
    Mentioned in Today’s Episode: <br>\nSmartlogic — <a href=\"https://www.smartlogic.io/\"
    rel=\"nofollow\">https://www.smartlogic.io/</a> <br>\nPaul Schoenfelder — <a href=\"https://github.com/bitwalker\"
    rel=\"nofollow\">https://github.com/bitwalker</a> <br>\nBitwalker — <a href=\"http://bitwalker.org/\"
    rel=\"nofollow\">http://bitwalker.org/</a> <br>\nDistillery — <a href=\"https://hex.pm/packages/distillery\"
    rel=\"nofollow\">https://hex.pm/packages/distillery</a> <br>\nDockYard — <a href=\"https://dockyard.com/\"
    rel=\"nofollow\">https://dockyard.com/</a> <br>\nErlang — <a href=\"https://www.erlang.org/\"
    rel=\"nofollow\">https://www.erlang.org/</a> <br>\nPhoenix — <a href=\"https://phoenixframework.org/\"
    rel=\"nofollow\">https://phoenixframework.org/</a> </p>\n\n<p>Learn more about
    how SmartLogic uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix
    and Elixir.</a></p><p>Special Guest: Paul Schoenfelder.</p>\n      "
- title: Bryan Joseph on ElixirScript – Elixir Internals
  slug: season-two-joseph
  link: https://podcast.smartlogic.io/season-two-joseph
  guid: ed1a46a8-a3ac-4808-b1e5-91e950b2791a
  pubDate: Thu, 18 Jul 2019 06:00:00 -0400
  description: "Today on the show we continue our series on the inner workings and
    various libraries of Elixir and are very happy to welcome Bryan Joseph of Revelry
    to talk about his very own ElixirScript. ElixirScript is essentially an Elixir
    to JavaScript compiler, allowing users to run Elixir online more easily. We ask
    Bryan what inspired this project and about some of the major challenges that have
    faced it. We also talk about the role of his company, Revelry in his career and
    work in open source. Bryan tells us about his very own conference, The Big Elixir
    and why you should be traveling to New Orleans to check it out! Other topics covered
    include the architecture of ElixirScript, binary pattern matching, Bryan's other
    experiences of libraries and his hopes for ElixirScript's future. For all this
    and then some, be sure to listen in today!\nKey Points From This Episode:\nSome
    background on Bryan, his work and how he got started with Elixir. \nWhat is ElixirScript?
    What does it do? How Brian got the idea!\nElixirScript's architecture; the inner
    workings of the compiler.\nThe major problems and challenges that face this task
    with JavaScript. \nStep one in the process; the conversion of concepts.\nBinary
    pattern matching and the implementation of strings. \nThe things Bryan would do
    differently looking back on the product.   \nBryan's other experiences of libraries,
    contributions and fixes. \nMarketing, posting and getting the word out on ElixirScript.\nThe
    current state of the project and hopes for the future. \nA little bit about The
    Big Elixir and what sets it apart from other conferences.  \nAnd much more! \nLinks
    Mentioned in Today’s Episode:\nSmartlogic — https://www.smartlogic.io/\nElixirScript
    — https://elixirscript.github.io/\nBryan Joseph — https://github.com/bryanjos\nRevelry
    — https://revelry.co/\nThe Big Elixir— https://www.thebigelixir.com/\nMetaprogramming
    Elixir — https://www.amazon.com/Metaprogramming-Elixir-Write-Less-Code/dp/1680500414\nChris
    McCord — http://chrismccord.com/\nErlang — https://www.erlang.org/\nElixirCon
    — https://www.elixirlabs.net/events/elixircon-2018\nLonestar Elixir — https://www.lonestarelixir.com/\nOperation
    Spark — https://operationspark.org/\nFlatiron — https://flatironschool.com/\nLearn
    more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) Special
    Guest: Bryan Joseph.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/ed1a46a8-a3ac-4808-b1e5-91e950b2791a.mp3
    length: '23649600'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '2'
    author: SmartLogic LLC
    subtitle: Today on the show we continue our series on the inner workings and various
      libraries of Elixir and are very happy to welcome Bryan Joseph of Revelry to
      talk about his very own ElixirScript. ElixirScript is essentially an Elixir
      to JavaScript compiler, allowing users to run Elixir online more easily.
    duration: '23:56'
    explicit: 'no'
    keywords: elixir, elixirscript, the big elixir
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>Today on the show we continue our series on the inner workings
      and various libraries of Elixir and are very happy to welcome Bryan Joseph of
      Revelry to talk about his very own ElixirScript. ElixirScript is essentially
      an Elixir to JavaScript compiler, allowing users to run Elixir online more easily.
      We ask Bryan what inspired this project and about some of the major challenges
      that have faced it. We also talk about the role of his company, Revelry in his
      career and work in open source. Bryan tells us about his very own conference,
      The Big Elixir and why you should be traveling to New Orleans to check it out!
      Other topics covered include the architecture of ElixirScript, binary pattern
      matching, Bryan&#39;s other experiences of libraries and his hopes for ElixirScript&#39;s
      future. For all this and then some, be sure to listen in today!</p>\n\n<p>Key
      Points From This Episode:</p>\n\n<ul>\n<li>Some background on Bryan, his work
      and how he got started with Elixir. </li>\n<li>What is ElixirScript? What does
      it do? How Brian got the idea!</li>\n<li>ElixirScript&#39;s architecture; the
      inner workings of the compiler.</li>\n<li>The major problems and challenges
      that face this task with JavaScript. </li>\n<li>Step one in the process; the
      conversion of concepts.</li>\n<li>Binary pattern matching and the implementation
      of strings. </li>\n<li>The things Bryan would do differently looking back on
      the product.<br></li>\n<li>Bryan&#39;s other experiences of libraries, contributions
      and fixes. </li>\n<li>Marketing, posting and getting the word out on ElixirScript.</li>\n<li>The
      current state of the project and hopes for the future. </li>\n<li>A little bit
      about The Big Elixir and what sets it apart from other conferences.<br></li>\n<li>And
      much more! </li>\n</ul>\n\n<p>Links Mentioned in Today’s Episode:</p>\n\n<p>Smartlogic
      — <a href=\"https://www.smartlogic.io/\" rel=\"nofollow\">https://www.smartlogic.io/</a><br>\nElixirScript
      — <a href=\"https://elixirscript.github.io/\" rel=\"nofollow\">https://elixirscript.github.io/</a><br>\nBryan
      Joseph — <a href=\"https://github.com/bryanjos\" rel=\"nofollow\">https://github.com/bryanjos</a><br>\nRevelry
      — <a href=\"https://revelry.co/\" rel=\"nofollow\">https://revelry.co/</a><br>\nThe
      Big Elixir— <a href=\"https://www.thebigelixir.com/\" rel=\"nofollow\">https://www.thebigelixir.com/</a><br>\nMetaprogramming
      Elixir — <a href=\"https://www.amazon.com/Metaprogramming-Elixir-Write-Less-Code/dp/1680500414\"
      rel=\"nofollow\">https://www.amazon.com/Metaprogramming-Elixir-Write-Less-Code/dp/1680500414</a><br>\nChris
      McCord — <a href=\"http://chrismccord.com/\" rel=\"nofollow\">http://chrismccord.com/</a><br>\nErlang
      — <a href=\"https://www.erlang.org/\" rel=\"nofollow\">https://www.erlang.org/</a><br>\nElixirCon
      — <a href=\"https://www.elixirlabs.net/events/elixircon-2018\" rel=\"nofollow\">https://www.elixirlabs.net/events/elixircon-2018</a><br>\nLonestar
      Elixir — <a href=\"https://www.lonestarelixir.com/\" rel=\"nofollow\">https://www.lonestarelixir.com/</a><br>\nOperation
      Spark — <a href=\"https://operationspark.org/\" rel=\"nofollow\">https://operationspark.org/</a><br>\nFlatiron
      — <a href=\"https://flatironschool.com/\" rel=\"nofollow\">https://flatironschool.com/</a></p>\n\n<p>Learn
      more about how SmartLogic uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix
      and Elixir.</a></p><p>Special Guest: Bryan Joseph.</p>\n      "
  contentEncoded: "\n        <p>Today on the show we continue our series on the inner
    workings and various libraries of Elixir and are very happy to welcome Bryan Joseph
    of Revelry to talk about his very own ElixirScript. ElixirScript is essentially
    an Elixir to JavaScript compiler, allowing users to run Elixir online more easily.
    We ask Bryan what inspired this project and about some of the major challenges
    that have faced it. We also talk about the role of his company, Revelry in his
    career and work in open source. Bryan tells us about his very own conference,
    The Big Elixir and why you should be traveling to New Orleans to check it out!
    Other topics covered include the architecture of ElixirScript, binary pattern
    matching, Bryan&#39;s other experiences of libraries and his hopes for ElixirScript&#39;s
    future. For all this and then some, be sure to listen in today!</p>\n\n<p>Key
    Points From This Episode:</p>\n\n<ul>\n<li>Some background on Bryan, his work
    and how he got started with Elixir. </li>\n<li>What is ElixirScript? What does
    it do? How Brian got the idea!</li>\n<li>ElixirScript&#39;s architecture; the
    inner workings of the compiler.</li>\n<li>The major problems and challenges that
    face this task with JavaScript. </li>\n<li>Step one in the process; the conversion
    of concepts.</li>\n<li>Binary pattern matching and the implementation of strings.
    </li>\n<li>The things Bryan would do differently looking back on the product.<br></li>\n<li>Bryan&#39;s
    other experiences of libraries, contributions and fixes. </li>\n<li>Marketing,
    posting and getting the word out on ElixirScript.</li>\n<li>The current state
    of the project and hopes for the future. </li>\n<li>A little bit about The Big
    Elixir and what sets it apart from other conferences.<br></li>\n<li>And much more!
    </li>\n</ul>\n\n<p>Links Mentioned in Today’s Episode:</p>\n\n<p>Smartlogic —
    <a href=\"https://www.smartlogic.io/\" rel=\"nofollow\">https://www.smartlogic.io/</a><br>\nElixirScript
    — <a href=\"https://elixirscript.github.io/\" rel=\"nofollow\">https://elixirscript.github.io/</a><br>\nBryan
    Joseph — <a href=\"https://github.com/bryanjos\" rel=\"nofollow\">https://github.com/bryanjos</a><br>\nRevelry
    — <a href=\"https://revelry.co/\" rel=\"nofollow\">https://revelry.co/</a><br>\nThe
    Big Elixir— <a href=\"https://www.thebigelixir.com/\" rel=\"nofollow\">https://www.thebigelixir.com/</a><br>\nMetaprogramming
    Elixir — <a href=\"https://www.amazon.com/Metaprogramming-Elixir-Write-Less-Code/dp/1680500414\"
    rel=\"nofollow\">https://www.amazon.com/Metaprogramming-Elixir-Write-Less-Code/dp/1680500414</a><br>\nChris
    McCord — <a href=\"http://chrismccord.com/\" rel=\"nofollow\">http://chrismccord.com/</a><br>\nErlang
    — <a href=\"https://www.erlang.org/\" rel=\"nofollow\">https://www.erlang.org/</a><br>\nElixirCon
    — <a href=\"https://www.elixirlabs.net/events/elixircon-2018\" rel=\"nofollow\">https://www.elixirlabs.net/events/elixircon-2018</a><br>\nLonestar
    Elixir — <a href=\"https://www.lonestarelixir.com/\" rel=\"nofollow\">https://www.lonestarelixir.com/</a><br>\nOperation
    Spark — <a href=\"https://operationspark.org/\" rel=\"nofollow\">https://operationspark.org/</a><br>\nFlatiron
    — <a href=\"https://flatironschool.com/\" rel=\"nofollow\">https://flatironschool.com/</a></p>\n\n<p>Learn
    more about how SmartLogic uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix
    and Elixir.</a></p><p>Special Guest: Bryan Joseph.</p>\n      "
- title: Brooklyn Zelenka on Witchcraft - Elixir Internals
  slug: season-two-zelenka
  link: https://podcast.smartlogic.io/season-two-zelenka
  guid: 490b7cc3-44d7-4917-9688-2450d18de62a
  pubDate: Thu, 11 Jul 2019 06:00:00 -0400
  description: "Hey everybody and welcome back to Season 2 of the podcast! This season
    we will be talking about Elixir internals, libraries and the inner workings of
    the language. In our first episode we are very happy to be joined by Brooklyn
    Zelenka to start off our journey on the subject with an exploration of her very
    own Witchcraft.\nIn this episode we talk to Brooklyn about her history with Elixir,
    how she got started and what attracts her to it. Brooklyn explains the influence
    that open source philosophy has had on her career in developing and from there
    she gives a pretty comprehensive introduction to what Witchcraft is, expanding
    its key concepts. Although this is quite a high level discussion about Elixir
    and Witchcraft, we are confident that with Brooklyn's expert help even our most
    uninitiated listener can get some benefit from our conversation. We also talk
    about type systems, property-based checking and Dialyzer, so for all of this and
    more make sure to join us as we kick things off for Season 2!\nKey Points From
    This Episode:\nA quick introduction to Brooklyn, where she works and how she got
    started with Elixir.  \nThe influence of open source and library contributions
    on Brooklyn's development.\nGetting to grips with Witchcraft; defining monads
    and functors.\nWhy some of these scary terms do not need to frighten you. \nA
    few little things that differentiate Witchcraft and some surprising elements.\nThe
    convenient guarantees that Witchcraft provides around your data structure. \nWhy
    there is no type system baked into Elixir; overheads, inputs and outputs. \nProperty-based
    checking and compile times in Witchcraft.\nMerging of Elixir and Dialyzer; benefits
    and problems. \nGetting in touch with Brooklyn and getting involved with Witchcraft
    and Elixir. \nAnd much more! \nLinks Mentioned in Today’s Episode:\nSmartlogic
    — https://www.smartlogic.io/\nBrooklyn Zelenka — https://github.com/expede\nBrooklyn
    Zelenka on Twitter — https://twitter.com/expede\nBrooklyn Zelenka Email — hello@brooklynzelenka.com\nFission
    — https://fission.codes/\nElixir — https://elixir-lang.org/\nWitchcraft — https://hex.pm/packages/witchcraft\nDialyzer
    — https://github.com/jeremyjh/dialyxir\nLearn more about how SmartLogic uses Phoenix
    and Elixir. (https://smr.tl/2Hyslu8) Special Guest: Brooklyn Zelenka.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/490b7cc3-44d7-4917-9688-2450d18de62a.mp3
    length: '29717784'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '2'
    author: SmartLogic LLC
    subtitle: Hey everybody and welcome back to Season 2 of the podcast! This season
      we will be talking about Elixir internals, libraries and the inner workings
      of the language. In our first episode we are very happy to be joined by Brooklyn
      Zelenka to start off our journey on the subject with an exploration of her very
      own Witchcraft.
    duration: '30:15'
    explicit: 'no'
    keywords: elixir, witchcraft, dialyzer
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>Hey everybody and welcome back to Season 2 of the podcast!
      This season we will be talking about Elixir internals, libraries and the inner
      workings of the language. In our first episode we are very happy to be joined
      by Brooklyn Zelenka to start off our journey on the subject with an exploration
      of her very own Witchcraft.</p>\n\n<p>In this episode we talk to Brooklyn about
      her history with Elixir, how she got started and what attracts her to it. Brooklyn
      explains the influence that open source philosophy has had on her career in
      developing and from there she gives a pretty comprehensive introduction to what
      Witchcraft is, expanding its key concepts. Although this is quite a high level
      discussion about Elixir and Witchcraft, we are confident that with Brooklyn&#39;s
      expert help even our most uninitiated listener can get some benefit from our
      conversation. We also talk about type systems, property-based checking and Dialyzer,
      so for all of this and more make sure to join us as we kick things off for Season
      2!</p>\n\n<p>Key Points From This Episode:</p>\n\n<ul>\n<li>A quick introduction
      to Brooklyn, where she works and how she got started with Elixir.<br></li>\n<li>The
      influence of open source and library contributions on Brooklyn&#39;s development.</li>\n<li>Getting
      to grips with Witchcraft; defining monads and functors.</li>\n<li>Why some of
      these scary terms do not need to frighten you. </li>\n<li>A few little things
      that differentiate Witchcraft and some surprising elements.</li>\n<li>The convenient
      guarantees that Witchcraft provides around your data structure. </li>\n<li>Why
      there is no type system baked into Elixir; overheads, inputs and outputs. </li>\n<li>Property-based
      checking and compile times in Witchcraft.</li>\n<li>Merging of Elixir and Dialyzer;
      benefits and problems. </li>\n<li>Getting in touch with Brooklyn and getting
      involved with Witchcraft and Elixir. </li>\n<li>And much more! </li>\n</ul>\n\n<p>Links
      Mentioned in Today’s Episode:</p>\n\n<p>Smartlogic — <a href=\"https://www.smartlogic.io/\"
      rel=\"nofollow\">https://www.smartlogic.io/</a><br>\nBrooklyn Zelenka — <a href=\"https://github.com/expede\"
      rel=\"nofollow\">https://github.com/expede</a><br>\nBrooklyn Zelenka on Twitter
      — <a href=\"https://twitter.com/expede\" rel=\"nofollow\">https://twitter.com/expede</a><br>\nBrooklyn
      Zelenka Email — <a href=\"mailto:hello@brooklynzelenka.com\" rel=\"nofollow\">hello@brooklynzelenka.com</a><br>\nFission
      — <a href=\"https://fission.codes/\" rel=\"nofollow\">https://fission.codes/</a><br>\nElixir
      — <a href=\"https://elixir-lang.org/\" rel=\"nofollow\">https://elixir-lang.org/</a><br>\nWitchcraft
      — <a href=\"https://hex.pm/packages/witchcraft\" rel=\"nofollow\">https://hex.pm/packages/witchcraft</a><br>\nDialyzer
      — <a href=\"https://github.com/jeremyjh/dialyxir\" rel=\"nofollow\">https://github.com/jeremyjh/dialyxir</a></p>\n\n<p>Learn
      more about how SmartLogic uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix
      and Elixir.</a></p><p>Special Guest: Brooklyn Zelenka.</p>\n      "
  contentEncoded: "\n        <p>Hey everybody and welcome back to Season 2 of the
    podcast! This season we will be talking about Elixir internals, libraries and
    the inner workings of the language. In our first episode we are very happy to
    be joined by Brooklyn Zelenka to start off our journey on the subject with an
    exploration of her very own Witchcraft.</p>\n\n<p>In this episode we talk to Brooklyn
    about her history with Elixir, how she got started and what attracts her to it.
    Brooklyn explains the influence that open source philosophy has had on her career
    in developing and from there she gives a pretty comprehensive introduction to
    what Witchcraft is, expanding its key concepts. Although this is quite a high
    level discussion about Elixir and Witchcraft, we are confident that with Brooklyn&#39;s
    expert help even our most uninitiated listener can get some benefit from our conversation.
    We also talk about type systems, property-based checking and Dialyzer, so for
    all of this and more make sure to join us as we kick things off for Season 2!</p>\n\n<p>Key
    Points From This Episode:</p>\n\n<ul>\n<li>A quick introduction to Brooklyn, where
    she works and how she got started with Elixir.<br></li>\n<li>The influence of
    open source and library contributions on Brooklyn&#39;s development.</li>\n<li>Getting
    to grips with Witchcraft; defining monads and functors.</li>\n<li>Why some of
    these scary terms do not need to frighten you. </li>\n<li>A few little things
    that differentiate Witchcraft and some surprising elements.</li>\n<li>The convenient
    guarantees that Witchcraft provides around your data structure. </li>\n<li>Why
    there is no type system baked into Elixir; overheads, inputs and outputs. </li>\n<li>Property-based
    checking and compile times in Witchcraft.</li>\n<li>Merging of Elixir and Dialyzer;
    benefits and problems. </li>\n<li>Getting in touch with Brooklyn and getting involved
    with Witchcraft and Elixir. </li>\n<li>And much more! </li>\n</ul>\n\n<p>Links
    Mentioned in Today’s Episode:</p>\n\n<p>Smartlogic — <a href=\"https://www.smartlogic.io/\"
    rel=\"nofollow\">https://www.smartlogic.io/</a><br>\nBrooklyn Zelenka — <a href=\"https://github.com/expede\"
    rel=\"nofollow\">https://github.com/expede</a><br>\nBrooklyn Zelenka on Twitter
    — <a href=\"https://twitter.com/expede\" rel=\"nofollow\">https://twitter.com/expede</a><br>\nBrooklyn
    Zelenka Email — <a href=\"mailto:hello@brooklynzelenka.com\" rel=\"nofollow\">hello@brooklynzelenka.com</a><br>\nFission
    — <a href=\"https://fission.codes/\" rel=\"nofollow\">https://fission.codes/</a><br>\nElixir
    — <a href=\"https://elixir-lang.org/\" rel=\"nofollow\">https://elixir-lang.org/</a><br>\nWitchcraft
    — <a href=\"https://hex.pm/packages/witchcraft\" rel=\"nofollow\">https://hex.pm/packages/witchcraft</a><br>\nDialyzer
    — <a href=\"https://github.com/jeremyjh/dialyxir\" rel=\"nofollow\">https://github.com/jeremyjh/dialyxir</a></p>\n\n<p>Learn
    more about how SmartLogic uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix
    and Elixir.</a></p><p>Special Guest: Brooklyn Zelenka.</p>\n      "
- title: Elixir in Production Recap
  slug: season-1-recap
  link: https://podcast.smartlogic.io/season-1-recap
  guid: e81d239d-448f-4244-884a-f5f972277713
  pubDate: Thu, 18 Apr 2019 06:00:00 -0400
  description: |
    With this season over, we bring Dan Ivovich back to talk about what we learned.
    Dan Ivovich - Director of Development Operations @ SmartLogic
    00:43 - Why are you using Elixir in production?
    01:20 - Advantages / disadvantages of Elixir
    02:38 - How do you deploy?
    03:48 - Zero downtime deploys
    05:40 - Clustering
    06:56 - Elixir App performance
    09:00 - Background task processing
    10:36 - Common Libraries
    14:40 - 3rd Party Services
    16:16 - Do you have a story where Elixir saved the day in production?
    17:56 - OTP features
    18:31 - Tip to developers
    Learn more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) Special Guest: Dan Ivovich.
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/e81d239d-448f-4244-884a-f5f972277713.mp3
    length: '19256966'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '1'
    author: SmartLogic LLC
    subtitle: With this season over, we bring Dan Ivovich back to talk about what
      we learned.
    duration: '20:03'
    explicit: 'no'
    keywords: elixir, phoenix
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>With this season over, we bring Dan Ivovich back to talk
      about what we learned.</p>\n\n<p>Dan Ivovich - Director of Development Operations
      @ SmartLogic</p>\n\n<p>00:43 - Why are you using Elixir in production?<br>\n01:20
      - Advantages / disadvantages of Elixir<br>\n02:38 - How do you deploy?<br>\n03:48
      - Zero downtime deploys<br>\n05:40 - Clustering<br>\n06:56 - Elixir App performance<br>\n09:00
      - Background task processing<br>\n10:36 - Common Libraries<br>\n14:40 - 3rd
      Party Services<br>\n16:16 - Do you have a story where Elixir saved the day in
      production?<br>\n17:56 - OTP features<br>\n18:31 - Tip to developers</p>\n\n<p>Learn
      more about how SmartLogic uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix
      and Elixir.</a></p><p>Special Guest: Dan Ivovich.</p>\n      "
  contentEncoded: "\n        <p>With this season over, we bring Dan Ivovich back to
    talk about what we learned.</p>\n\n<p>Dan Ivovich - Director of Development Operations
    @ SmartLogic</p>\n\n<p>00:43 - Why are you using Elixir in production?<br>\n01:20
    - Advantages / disadvantages of Elixir<br>\n02:38 - How do you deploy?<br>\n03:48
    - Zero downtime deploys<br>\n05:40 - Clustering<br>\n06:56 - Elixir App performance<br>\n09:00
    - Background task processing<br>\n10:36 - Common Libraries<br>\n14:40 - 3rd Party
    Services<br>\n16:16 - Do you have a story where Elixir saved the day in production?<br>\n17:56
    - OTP features<br>\n18:31 - Tip to developers</p>\n\n<p>Learn more about how SmartLogic
    uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix and Elixir.</a></p><p>Special
    Guest: Dan Ivovich.</p>\n      "
- title: Jeffrey Matthias from Community - Elixir in Production
  slug: season-1-community
  link: https://podcast.smartlogic.io/season-1-community
  guid: 7bd99e2e-cba0-4c94-904a-5486ce48c517
  pubDate: Thu, 11 Apr 2019 06:00:00 -0400
  description: "We talk with Jeffrey Matthias from Community about their current and
    past Elixir projects and how they are deployed.\nJeffrey Matthias - Community
    (https://www.community.com/)\nFind Jeffrey elsewhere online:\nhttp://github.com/idlehands\nhttps://twitter.com/idlehands\n0:47
    - Give us a quick overview of the Elixir projects you have in production.\n3:29
    - Why are you using Elixir in production?\n6:04 - What are some of the high level
    advantages / disadvantages of Elixir, from your perspective?\n10:14 - What do
    you use to host your Elixir app?\nLinode, AWS, DO \nHeroku \nEnmesos \nmesos  \nHow
    do you deploy your application?\nAnsible \nDeploy scripts \nDistillery \n14:19
    - Are you able to get zero downtime deploys?\nIf so, how? \n17:06 - Do you cluster
    the application?\nIf so, how? \n22:53 - How does your Elixir App perform compared
    to others in your environment?\nResponse time \nThroughput \nJobs/hr \n25:01 -
    How are you solving background task processing?\n29:17 - What libraries are you
    using?\nPhoenix \n33:53 - Third party apps \n37:28 - Do you have a story where
    Elixir saved the day in production?\n40:42 - If you could give one tip to developers
    out there who are or may soon be running Elixir in production, what would it be?\nLearn
    more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) Special
    Guest: Jeffrey Matthias.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/7bd99e2e-cba0-4c94-904a-5486ce48c517.mp3
    length: '42158622'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '1'
    author: SmartLogic LLC
    subtitle: We talk with Jeffrey Matthias from Community about their current and
      past Elixir projects and how they are deployed.
    duration: '43:54'
    explicit: 'no'
    keywords: elixir, phoenix, production
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>We talk with Jeffrey Matthias from Community about their
      current and past Elixir projects and how they are deployed.</p>\n\n<p>Jeffrey
      Matthias - <a href=\"https://www.community.com/\" rel=\"nofollow\">Community</a></p>\n\n<p>Find
      Jeffrey elsewhere online:<br>\n<a href=\"http://github.com/idlehands\" rel=\"nofollow\">http://github.com/idlehands</a><br>\n<a
      href=\"https://twitter.com/idlehands\" rel=\"nofollow\">https://twitter.com/idlehands</a></p>\n\n<p>0:47
      - Give us a quick overview of the Elixir projects you have in production.</p>\n\n<p>3:29
      - Why are you using Elixir in production?</p>\n\n<p>6:04 - What are some of
      the high level advantages / disadvantages of Elixir, from your perspective?</p>\n\n<p>10:14
      - What do you use to host your Elixir app?</p>\n\n<ul>\n<li>Linode, AWS, DO
      </li>\n<li>Heroku </li>\n<li>Enmesos </li>\n<li>mesos<br></li>\n</ul>\n\n<p>How
      do you deploy your application?</p>\n\n<ul>\n<li>Ansible </li>\n<li>Deploy scripts
      </li>\n<li>Distillery </li>\n</ul>\n\n<p>14:19 - Are you able to get zero downtime
      deploys?</p>\n\n<ul>\n<li>If so, how? </li>\n</ul>\n\n<p>17:06 - Do you cluster
      the application?</p>\n\n<ul>\n<li>If so, how? </li>\n</ul>\n\n<p>22:53 - How
      does your Elixir App perform compared to others in your environment?</p>\n\n<ul>\n<li>Response
      time </li>\n<li>Throughput </li>\n<li>Jobs/hr </li>\n</ul>\n\n<p>25:01 - How
      are you solving background task processing?</p>\n\n<p>29:17 - What libraries
      are you using?</p>\n\n<ul>\n<li>Phoenix </li>\n</ul>\n\n<p>33:53 - Third party
      apps </p>\n\n<p>37:28 - Do you have a story where Elixir saved the day in production?</p>\n\n<p>40:42
      - If you could give one tip to developers out there who are or may soon be running
      Elixir in production, what would it be?</p>\n\n<p>Learn more about how SmartLogic
      uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix and Elixir.</a></p><p>Special
      Guest: Jeffrey Matthias.</p><p>Links:</p><ul><li><a href=\"https://www.enbala.com/\"
      title=\"Enbala\" rel=\"nofollow\">Enbala</a></li><li><a href=\"https://weedmaps.com/\"
      title=\"Weedmaps\" rel=\"nofollow\">Weedmaps</a></li><li><a href=\"https://shop.oreilly.com/product/0636920153566.do\"
      title=\"Docker: Up & Running\" rel=\"nofollow\">Docker: Up & Running</a></li><li><a
      href=\"https://www.asyncapi.com/\" title=\"Async API\" rel=\"nofollow\">Async
      API</a></li><li><a href=\"https://www.rabbitmq.com/\" title=\"RabbitMQ\" rel=\"nofollow\">RabbitMQ</a></li><li><a
      href=\"https://github.com/pma/amqp\" title=\"AMQP Elixir Client\" rel=\"nofollow\">AMQP
      Elixir Client</a></li><li><a href=\"https://github.com/silviucpp/erlcass\" title=\"erlcass\"
      rel=\"nofollow\">erlcass</a></li><li><a href=\"https://www.erlang-in-anger.com/\"
      title=\"Erlang in Anger\" rel=\"nofollow\">Erlang in Anger</a></li></ul>\n      "
  contentEncoded: "\n        <p>We talk with Jeffrey Matthias from Community about
    their current and past Elixir projects and how they are deployed.</p>\n\n<p>Jeffrey
    Matthias - <a href=\"https://www.community.com/\" rel=\"nofollow\">Community</a></p>\n\n<p>Find
    Jeffrey elsewhere online:<br>\n<a href=\"http://github.com/idlehands\" rel=\"nofollow\">http://github.com/idlehands</a><br>\n<a
    href=\"https://twitter.com/idlehands\" rel=\"nofollow\">https://twitter.com/idlehands</a></p>\n\n<p>0:47
    - Give us a quick overview of the Elixir projects you have in production.</p>\n\n<p>3:29
    - Why are you using Elixir in production?</p>\n\n<p>6:04 - What are some of the
    high level advantages / disadvantages of Elixir, from your perspective?</p>\n\n<p>10:14
    - What do you use to host your Elixir app?</p>\n\n<ul>\n<li>Linode, AWS, DO </li>\n<li>Heroku
    </li>\n<li>Enmesos </li>\n<li>mesos<br></li>\n</ul>\n\n<p>How do you deploy your
    application?</p>\n\n<ul>\n<li>Ansible </li>\n<li>Deploy scripts </li>\n<li>Distillery
    </li>\n</ul>\n\n<p>14:19 - Are you able to get zero downtime deploys?</p>\n\n<ul>\n<li>If
    so, how? </li>\n</ul>\n\n<p>17:06 - Do you cluster the application?</p>\n\n<ul>\n<li>If
    so, how? </li>\n</ul>\n\n<p>22:53 - How does your Elixir App perform compared
    to others in your environment?</p>\n\n<ul>\n<li>Response time </li>\n<li>Throughput
    </li>\n<li>Jobs/hr </li>\n</ul>\n\n<p>25:01 - How are you solving background task
    processing?</p>\n\n<p>29:17 - What libraries are you using?</p>\n\n<ul>\n<li>Phoenix
    </li>\n</ul>\n\n<p>33:53 - Third party apps </p>\n\n<p>37:28 - Do you have a story
    where Elixir saved the day in production?</p>\n\n<p>40:42 - If you could give
    one tip to developers out there who are or may soon be running Elixir in production,
    what would it be?</p>\n\n<p>Learn more about how SmartLogic uses <a href=\"https://smr.tl/2Hyslu8\"
    rel=\"nofollow\">Phoenix and Elixir.</a></p><p>Special Guest: Jeffrey Matthias.</p><p>Links:</p><ul><li><a
    href=\"https://www.enbala.com/\" title=\"Enbala\" rel=\"nofollow\">Enbala</a></li><li><a
    href=\"https://weedmaps.com/\" title=\"Weedmaps\" rel=\"nofollow\">Weedmaps</a></li><li><a
    href=\"https://shop.oreilly.com/product/0636920153566.do\" title=\"Docker: Up
    & Running\" rel=\"nofollow\">Docker: Up & Running</a></li><li><a href=\"https://www.asyncapi.com/\"
    title=\"Async API\" rel=\"nofollow\">Async API</a></li><li><a href=\"https://www.rabbitmq.com/\"
    title=\"RabbitMQ\" rel=\"nofollow\">RabbitMQ</a></li><li><a href=\"https://github.com/pma/amqp\"
    title=\"AMQP Elixir Client\" rel=\"nofollow\">AMQP Elixir Client</a></li><li><a
    href=\"https://github.com/silviucpp/erlcass\" title=\"erlcass\" rel=\"nofollow\">erlcass</a></li><li><a
    href=\"https://www.erlang-in-anger.com/\" title=\"Erlang in Anger\" rel=\"nofollow\">Erlang
    in Anger</a></li></ul>\n      "
- title: Jay Ashe from Cava - Elixir in Production
  slug: season-1-cava
  link: https://podcast.smartlogic.io/season-1-cava
  guid: c300841a-d5b9-4957-950f-ce0f6bc3af68
  pubDate: Thu, 04 Apr 2019 06:00:00 -0400
  description: "We talk with Jay Ashe from Cava about their current and past Elixir
    projects and how they are deployed.\nJay Ashe - Cava (https://cava.com/)\nFind
    Jay elsewhere online:\nhttps://twitter.com/jgashe\n0:40 - Give us a quick overview
    of the Elixir projects you have in production.\nCAVA is a fast-casual mediterranean
    restaurant chain with 75 stores across the US. Elixir and phoenix power CAVA’s
    online ordering platform (order.cava.com and the CAVA app). We’ve got a REST (and
    websockets) api sitting behind react and our mobile apps, and we use phoenix templates
    for some of our back of house systems.\n1:11 - Why are you using Elixir in production?\nWe
    have from the start! The application was originally implemented by Chris Bell
    and his team at madebymany. Chris, by the way, has a fantastic talk from ElixirConf
    2016 that goes into our architecture and how we use elixir and OTP constructs
    to model our business logic. Chris will occasionally talk about the CAVA project
    on his Elixir podcast, ElixirTalk.\nChris’ Talk - https://www.youtube.com/watch?v=fkDhU-2NWJ8
    (https://www.youtube.com/watch?v=fkDhU-2NWJ8)\n1:58 - What are some of the high
    level advantages / disadvantages of Elixir, from your perspective?\nAdvantages:
    Elixir and Phoenix gives you rails-esque productivity/developer experience that
    scales. I think phoenix channels are a great example of this. Build a channel
    with complex real-time functionality and let it scale effortlessly. \nDisadvantages:
    \nHiring and onboarding, depending on your mindset, can be difficult. If you’re
    used to hiring for experience in  your stack, its just going to be more difficult.
    Lately we’ve started doing one-hour weekly knowledge shares that cover elixir
    basics and are closely tied to our usage of them. So, here’s a test case, and
    here are all of the test helpers that we have set up that will help you write
    that test. We also just sent a new Elixir dev to lonestar elixir \n3:59 - What
    do you use to host your Elixir app?\nHeroku \nHow do you deploy your application?
    \nHeroku-buildpack-elixir https://github.com/HashNuke/heroku-buildpack-elixir
    (https://github.com/HashNuke/heroku-buildpack-elixir) \n4:44 - Are you able to
    get zero downtime deploys?\n- As close as possible! We get that out of the box
    with heroku. When we deploy, heroku won’t point traffic to the new dyno until
    the app is healthy. We make extensive use of Phoenix channels over websockets,
    and our clients will reconnect automatically and transparently.  \n5:10 - Do you
    cluster the application?\nNope.  \n5:52 - How does your Elixir App perform compared
    to others in your environment?\nI can’t really talk about numbers here, but Elixir
    is not at all our bottleneck. We don’t have other production applications \n6:25
    - How are you solving background task processing?\nQuantum for cron jobs, genservers
    for everything else. We’re running a single elixir application that handles all
    synchronous and async processing  \n7:07 - What libraries are you using?\nPhoenix
    \nPhoenix_swagger for API documentation that integrates with controller tests
    https://github.com/xerions/phoenix_swagger (https://github.com/xerions/phoenix_swagger)
    \nEx_rated for rate limiting calls to our integrations https://github.com/grempe/ex_rated
    (https://github.com/grempe/ex_rated) \nTimex and calendar for datetime support
    with timezones https://github.com/bitwalker/timex (https://github.com/bitwalker/timex)
    \nA combination of httpotion and httpoison for HTTP clients, but im interested
    in trying Mint https://github.com/ericmj/mint (https://github.com/ericmj/mint)https://github.com/appcues/mojito
    (https://github.com/appcues/mojito) \nBamboo for transactional emails, like order
    confirmations etc https://github.com/thoughtbot/bamboo (https://github.com/thoughtbot/bamboo)
    \n8:59 - 3rd Party Services (i.e. Email, Payment Processing, etc)\nSendgrid for
    email, Google for geocoding, slack for some internal alerting of application health,
    LevelUp for payments. https://www.thelevelup.com/ (https://www.thelevelup.com/)
    \n10:07 - Do you have a story where Elixir saved the day in production?\nYes and
    no. So I could tell this story by explaining the issue we saw and the underlying
    cause at the same time, but I think it would be more fun to tell it like our team
    experienced it. \nOne day at lunch our application started going down. Lots of
    500 errors. Red lights flashing. Panic ensuing. Lunch is our busiest time of day,
    so 1) we thought it was load related and 2) we really needed to fix it \nNone
    of our traditional resources (database, cpu, memory) were constrained and our
    integrations that were synchronous were fine.  \nOur logs were littered with errors
    from an analytics integration that ran asynchronously on genservers, but it didn’t
    seem related because we could see the error logs at times when our application
    was otherwise healthy. The team that used the analytics didn’t have a pressing
    need for them, and we deprioritized fixing the issue because the bug we were working
    on was so much more important (that’s foreshadowing). \nI spent a little time
    looking at websockets, but I was easily able to match the load of the websocket
    portion of our application on my local machine with no degradations in performance
    (thanks, phoenix), so that was out. \nAt this point the issue was going on every
    day at lunch and I was getting annoyed at seeing the logs from the analytics integration
    when debugging, so I spent like 15 minutes finding and fixing the issue (a bad
    API key, basically) \nVoila, issue gone. Time to grab some lunch. \nWe spent a
    while coming up with an explanation for this. Eventually we learned about max_restarts
    on a supervisor. By default, if a process crashes 3 times in 5 seconds, the process
    won’t be restarted again. So if another process (like the one handling a web request)
    tries to call that process that wasn’t restarted, the caller would crash, and
    we’d start to get 500 errors, customers couldn’t log in, mass confusion. \nSo
    there are a few takeaways from this story: For a while, elixir saved the day in
    production.  \n    - A supervision tree prevented failures from the analytics
    process from affecting customers, until the scale of our failures exceeded the
    max_restart level.  \n    - Our supervision tree needed some love though, clearly.
    \n    - Monitor your resources. CPU is a resource, but calls to another API are
    also a resource and can get unhealthy too.  \n15:00 - Are you using any cool OTP
    features?\nGenServers, definitely. There’s lots we can do asynchronously especially
    in terms of our integrations. One process per store is a cool model that scales
    well and keeps issues isolated to a single store. \n15:50 - If you could give
    one tip to developers out there who are or may soon be running Elixir in production,
    what would it be?\nIf you’re on a small team, Heroku or a similar provider might
    give you a lot of value in terms of infrastructure you can set up and forget.\nLearn
    more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) Special
    Guest: Jay Ashe.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/c300841a-d5b9-4957-950f-ce0f6bc3af68.mp3
    length: '16733300'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '1'
    author: SmartLogic LLC
    subtitle: We talk with Jay Ashe from Cava about their current and past Elixir
      projects and how they are deployed.
    duration: '17:25'
    explicit: 'no'
    keywords: elixir, phoenix, production
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>We talk with Jay Ashe from Cava about their current and
      past Elixir projects and how they are deployed.</p>\n\n<p>Jay Ashe - <a href=\"https://cava.com/\"
      rel=\"nofollow\">Cava</a></p>\n\n<p>Find Jay elsewhere online:<br>\n<a href=\"https://twitter.com/jgashe\"
      rel=\"nofollow\">https://twitter.com/jgashe</a></p>\n\n<p>0:40 - Give us a quick
      overview of the Elixir projects you have in production.</p>\n\n<p>CAVA is a
      fast-casual mediterranean restaurant chain with 75 stores across the US. Elixir
      and phoenix power CAVA’s online ordering platform (order.cava.com and the CAVA
      app). We’ve got a REST (and websockets) api sitting behind react and our mobile
      apps, and we use phoenix templates for some of our back of house systems.</p>\n\n<p>1:11
      - Why are you using Elixir in production?</p>\n\n<p>We have from the start!
      The application was originally implemented by Chris Bell and his team at madebymany.
      Chris, by the way, has a fantastic talk from ElixirConf 2016 that goes into
      our architecture and how we use elixir and OTP constructs to model our business
      logic. Chris will occasionally talk about the CAVA project on his Elixir podcast,
      ElixirTalk.</p>\n\n<p>Chris’ Talk - <a href=\"https://www.youtube.com/watch?v=fkDhU-2NWJ8\"
      rel=\"nofollow\">https://www.youtube.com/watch?v=fkDhU-2NWJ8</a></p>\n\n<p>1:58
      - What are some of the high level advantages / disadvantages of Elixir, from
      your perspective?</p>\n\n<p>Advantages: Elixir and Phoenix gives you rails-esque
      productivity/developer experience that scales. I think phoenix channels are
      a great example of this. Build a channel with complex real-time functionality
      and let it scale effortlessly. </p>\n\n<p>Disadvantages: </p>\n\n<ul>\n<li>Hiring
      and onboarding, depending on your mindset, can be difficult. If you’re used
      to hiring for experience in  your stack, its just going to be more difficult.
      Lately we’ve started doing one-hour weekly knowledge shares that cover elixir
      basics and are closely tied to our usage of them. So, here’s a test case, and
      here are all of the test helpers that we have set up that will help you write
      that test. We also just sent a new Elixir dev to lonestar elixir </li>\n</ul>\n\n<p>3:59
      - What do you use to host your Elixir app?</p>\n\n<ul>\n<li><p>Heroku </p></li>\n<li><p>How
      do you deploy your application? </p>\n\n<ul>\n<li>Heroku-buildpack-elixir <a
      href=\"https://github.com/HashNuke/heroku-buildpack-elixir\" rel=\"nofollow\">https://github.com/HashNuke/heroku-buildpack-elixir</a>
      </li>\n</ul></li>\n</ul>\n\n<p>4:44 - Are you able to get zero downtime deploys?</p>\n\n<ul>\n<li>As
      close as possible! We get that out of the box with heroku. When we deploy, heroku
      won’t point traffic to the new dyno until the app is healthy. We make extensive
      use of Phoenix channels over websockets, and our clients will reconnect automatically
      and transparently.<br></li>\n</ul>\n\n<p>5:10 - Do you cluster the application?</p>\n\n<ul>\n<li>Nope.<br></li>\n</ul>\n\n<p>5:52
      - How does your Elixir App perform compared to others in your environment?</p>\n\n<ul>\n<li>I
      can’t really talk about numbers here, but Elixir is not at all our bottleneck.
      We don’t have other production applications </li>\n</ul>\n\n<p>6:25 - How are
      you solving background task processing?</p>\n\n<ul>\n<li>Quantum for cron jobs,
      genservers for everything else. We’re running a single elixir application that
      handles all synchronous and async processing<br></li>\n</ul>\n\n<p>7:07 - What
      libraries are you using?</p>\n\n<ul>\n<li>Phoenix </li>\n<li>Phoenix_swagger
      for API documentation that integrates with controller tests <a href=\"https://github.com/xerions/phoenix_swagger\"
      rel=\"nofollow\">https://github.com/xerions/phoenix_swagger</a> </li>\n<li>Ex_rated
      for rate limiting calls to our integrations <a href=\"https://github.com/grempe/ex_rated\"
      rel=\"nofollow\">https://github.com/grempe/ex_rated</a> </li>\n<li>Timex and
      calendar for datetime support with timezones <a href=\"https://github.com/bitwalker/timex\"
      rel=\"nofollow\">https://github.com/bitwalker/timex</a> </li>\n<li>A combination
      of httpotion and httpoison for HTTP clients, but im interested in trying Mint
      <a href=\"https://github.com/ericmj/mint\" rel=\"nofollow\">https://github.com/ericmj/mint</a><a
      href=\"https://github.com/appcues/mojito\" rel=\"nofollow\">https://github.com/appcues/mojito</a>
      </li>\n<li>Bamboo for transactional emails, like order confirmations etc <a
      href=\"https://github.com/thoughtbot/bamboo\" rel=\"nofollow\">https://github.com/thoughtbot/bamboo</a>
      </li>\n</ul>\n\n<p>8:59 - 3rd Party Services (i.e. Email, Payment Processing,
      etc)</p>\n\n<ul>\n<li>Sendgrid for email, Google for geocoding, slack for some
      internal alerting of application health, LevelUp for payments. <a href=\"https://www.thelevelup.com/\"
      rel=\"nofollow\">https://www.thelevelup.com/</a> </li>\n</ul>\n\n<p>10:07 -
      Do you have a story where Elixir saved the day in production?</p>\n\n<ul>\n<li>Yes
      and no. So I could tell this story by explaining the issue we saw and the underlying
      cause at the same time, but I think it would be more fun to tell it like our
      team experienced it. </li>\n<li>One day at lunch our application started going
      down. Lots of 500 errors. Red lights flashing. Panic ensuing. Lunch is our busiest
      time of day, so 1) we thought it was load related and 2) we really needed to
      fix it </li>\n<li>None of our traditional resources (database, cpu, memory)
      were constrained and our integrations that were synchronous were fine.<br></li>\n<li>Our
      logs were littered with errors from an analytics integration that ran asynchronously
      on genservers, but it didn’t seem related because we could see the error logs
      at times when our application was otherwise healthy. The team that used the
      analytics didn’t have a pressing need for them, and we deprioritized fixing
      the issue because the bug we were working on was so much more important (that’s
      foreshadowing). </li>\n<li>I spent a little time looking at websockets, but
      I was easily able to match the load of the websocket portion of our application
      on my local machine with no degradations in performance (thanks, phoenix), so
      that was out. </li>\n<li>At this point the issue was going on every day at lunch
      and I was getting annoyed at seeing the logs from the analytics integration
      when debugging, so I spent like 15 minutes finding and fixing the issue (a bad
      API key, basically) </li>\n<li>Voila, issue gone. Time to grab some lunch. </li>\n<li>We
      spent a while coming up with an explanation for this. Eventually we learned
      about max_restarts on a supervisor. By default, if a process crashes 3 times
      in 5 seconds, the process won’t be restarted again. So if another process (like
      the one handling a web request) tries to call that process that wasn’t restarted,
      the caller would crash, and we’d start to get 500 errors, customers couldn’t
      log in, mass confusion. </li>\n<li>So there are a few takeaways from this story:
      For a while, elixir saved the day in production.<br>\n    - A supervision tree
      prevented failures from the analytics process from affecting customers, until
      the scale of our failures exceeded the max_restart level.<br>\n    - Our supervision
      tree needed some love though, clearly. \n    - Monitor your resources. CPU is
      a resource, but calls to another API are also a resource and can get unhealthy
      too.<br></li>\n</ul>\n\n<p>15:00 - Are you using any cool OTP features?</p>\n\n<ul>\n<li>GenServers,
      definitely. There’s lots we can do asynchronously especially in terms of our
      integrations. One process per store is a cool model that scales well and keeps
      issues isolated to a single store. </li>\n</ul>\n\n<p>15:50 - If you could give
      one tip to developers out there who are or may soon be running Elixir in production,
      what would it be?</p>\n\n<ul>\n<li>If you’re on a small team, Heroku or a similar
      provider might give you a lot of value in terms of infrastructure you can set
      up and forget.</li>\n</ul>\n\n<p>Learn more about how SmartLogic uses <a href=\"https://smr.tl/2Hyslu8\"
      rel=\"nofollow\">Phoenix and Elixir.</a></p><p>Special Guest: Jay Ashe.</p><p>Links:</p><ul><li><a
      href=\"https://www.youtube.com/watch?v=fkDhU-2NWJ8\" title=\"ElixirConf 2016
      - Selling Food With Elixir by Chris Bell\" rel=\"nofollow\">ElixirConf 2016
      - Selling Food With Elixir by Chris Bell</a></li><li><a href=\"https://github.com/HashNuke/heroku-buildpack-elixir\"
      title=\"Heroku-buildpack-elixir\" rel=\"nofollow\">Heroku-buildpack-elixir</a></li><li><a
      href=\"https://github.com/xerions/phoenix_swagger\" title=\"Phoenix Swagger\"
      rel=\"nofollow\">Phoenix Swagger</a></li><li><a href=\"https://github.com/grempe/ex_rated\"
      title=\"Ex_rated\" rel=\"nofollow\">Ex_rated</a></li><li><a href=\"https://github.com/bitwalker/timex\"
      title=\"Timex\" rel=\"nofollow\">Timex</a></li><li><a href=\"https://github.com/ericmj/mint\"
      title=\"Mint\" rel=\"nofollow\">Mint</a></li><li><a href=\"https://github.com/appcues/mojito\"
      title=\"Mojito\" rel=\"nofollow\">Mojito</a></li><li><a href=\"https://www.thelevelup.com/\"
      title=\"LevelUp\" rel=\"nofollow\">LevelUp</a></li></ul>\n      "
  contentEncoded: "\n        <p>We talk with Jay Ashe from Cava about their current
    and past Elixir projects and how they are deployed.</p>\n\n<p>Jay Ashe - <a href=\"https://cava.com/\"
    rel=\"nofollow\">Cava</a></p>\n\n<p>Find Jay elsewhere online:<br>\n<a href=\"https://twitter.com/jgashe\"
    rel=\"nofollow\">https://twitter.com/jgashe</a></p>\n\n<p>0:40 - Give us a quick
    overview of the Elixir projects you have in production.</p>\n\n<p>CAVA is a fast-casual
    mediterranean restaurant chain with 75 stores across the US. Elixir and phoenix
    power CAVA’s online ordering platform (order.cava.com and the CAVA app). We’ve
    got a REST (and websockets) api sitting behind react and our mobile apps, and
    we use phoenix templates for some of our back of house systems.</p>\n\n<p>1:11
    - Why are you using Elixir in production?</p>\n\n<p>We have from the start! The
    application was originally implemented by Chris Bell and his team at madebymany.
    Chris, by the way, has a fantastic talk from ElixirConf 2016 that goes into our
    architecture and how we use elixir and OTP constructs to model our business logic.
    Chris will occasionally talk about the CAVA project on his Elixir podcast, ElixirTalk.</p>\n\n<p>Chris’
    Talk - <a href=\"https://www.youtube.com/watch?v=fkDhU-2NWJ8\" rel=\"nofollow\">https://www.youtube.com/watch?v=fkDhU-2NWJ8</a></p>\n\n<p>1:58
    - What are some of the high level advantages / disadvantages of Elixir, from your
    perspective?</p>\n\n<p>Advantages: Elixir and Phoenix gives you rails-esque productivity/developer
    experience that scales. I think phoenix channels are a great example of this.
    Build a channel with complex real-time functionality and let it scale effortlessly.
    </p>\n\n<p>Disadvantages: </p>\n\n<ul>\n<li>Hiring and onboarding, depending on
    your mindset, can be difficult. If you’re used to hiring for experience in  your
    stack, its just going to be more difficult. Lately we’ve started doing one-hour
    weekly knowledge shares that cover elixir basics and are closely tied to our usage
    of them. So, here’s a test case, and here are all of the test helpers that we
    have set up that will help you write that test. We also just sent a new Elixir
    dev to lonestar elixir </li>\n</ul>\n\n<p>3:59 - What do you use to host your
    Elixir app?</p>\n\n<ul>\n<li><p>Heroku </p></li>\n<li><p>How do you deploy your
    application? </p>\n\n<ul>\n<li>Heroku-buildpack-elixir <a href=\"https://github.com/HashNuke/heroku-buildpack-elixir\"
    rel=\"nofollow\">https://github.com/HashNuke/heroku-buildpack-elixir</a> </li>\n</ul></li>\n</ul>\n\n<p>4:44
    - Are you able to get zero downtime deploys?</p>\n\n<ul>\n<li>As close as possible!
    We get that out of the box with heroku. When we deploy, heroku won’t point traffic
    to the new dyno until the app is healthy. We make extensive use of Phoenix channels
    over websockets, and our clients will reconnect automatically and transparently.<br></li>\n</ul>\n\n<p>5:10
    - Do you cluster the application?</p>\n\n<ul>\n<li>Nope.<br></li>\n</ul>\n\n<p>5:52
    - How does your Elixir App perform compared to others in your environment?</p>\n\n<ul>\n<li>I
    can’t really talk about numbers here, but Elixir is not at all our bottleneck.
    We don’t have other production applications </li>\n</ul>\n\n<p>6:25 - How are
    you solving background task processing?</p>\n\n<ul>\n<li>Quantum for cron jobs,
    genservers for everything else. We’re running a single elixir application that
    handles all synchronous and async processing<br></li>\n</ul>\n\n<p>7:07 - What
    libraries are you using?</p>\n\n<ul>\n<li>Phoenix </li>\n<li>Phoenix_swagger for
    API documentation that integrates with controller tests <a href=\"https://github.com/xerions/phoenix_swagger\"
    rel=\"nofollow\">https://github.com/xerions/phoenix_swagger</a> </li>\n<li>Ex_rated
    for rate limiting calls to our integrations <a href=\"https://github.com/grempe/ex_rated\"
    rel=\"nofollow\">https://github.com/grempe/ex_rated</a> </li>\n<li>Timex and calendar
    for datetime support with timezones <a href=\"https://github.com/bitwalker/timex\"
    rel=\"nofollow\">https://github.com/bitwalker/timex</a> </li>\n<li>A combination
    of httpotion and httpoison for HTTP clients, but im interested in trying Mint
    <a href=\"https://github.com/ericmj/mint\" rel=\"nofollow\">https://github.com/ericmj/mint</a><a
    href=\"https://github.com/appcues/mojito\" rel=\"nofollow\">https://github.com/appcues/mojito</a>
    </li>\n<li>Bamboo for transactional emails, like order confirmations etc <a href=\"https://github.com/thoughtbot/bamboo\"
    rel=\"nofollow\">https://github.com/thoughtbot/bamboo</a> </li>\n</ul>\n\n<p>8:59
    - 3rd Party Services (i.e. Email, Payment Processing, etc)</p>\n\n<ul>\n<li>Sendgrid
    for email, Google for geocoding, slack for some internal alerting of application
    health, LevelUp for payments. <a href=\"https://www.thelevelup.com/\" rel=\"nofollow\">https://www.thelevelup.com/</a>
    </li>\n</ul>\n\n<p>10:07 - Do you have a story where Elixir saved the day in production?</p>\n\n<ul>\n<li>Yes
    and no. So I could tell this story by explaining the issue we saw and the underlying
    cause at the same time, but I think it would be more fun to tell it like our team
    experienced it. </li>\n<li>One day at lunch our application started going down.
    Lots of 500 errors. Red lights flashing. Panic ensuing. Lunch is our busiest time
    of day, so 1) we thought it was load related and 2) we really needed to fix it
    </li>\n<li>None of our traditional resources (database, cpu, memory) were constrained
    and our integrations that were synchronous were fine.<br></li>\n<li>Our logs were
    littered with errors from an analytics integration that ran asynchronously on
    genservers, but it didn’t seem related because we could see the error logs at
    times when our application was otherwise healthy. The team that used the analytics
    didn’t have a pressing need for them, and we deprioritized fixing the issue because
    the bug we were working on was so much more important (that’s foreshadowing).
    </li>\n<li>I spent a little time looking at websockets, but I was easily able
    to match the load of the websocket portion of our application on my local machine
    with no degradations in performance (thanks, phoenix), so that was out. </li>\n<li>At
    this point the issue was going on every day at lunch and I was getting annoyed
    at seeing the logs from the analytics integration when debugging, so I spent like
    15 minutes finding and fixing the issue (a bad API key, basically) </li>\n<li>Voila,
    issue gone. Time to grab some lunch. </li>\n<li>We spent a while coming up with
    an explanation for this. Eventually we learned about max_restarts on a supervisor.
    By default, if a process crashes 3 times in 5 seconds, the process won’t be restarted
    again. So if another process (like the one handling a web request) tries to call
    that process that wasn’t restarted, the caller would crash, and we’d start to
    get 500 errors, customers couldn’t log in, mass confusion. </li>\n<li>So there
    are a few takeaways from this story: For a while, elixir saved the day in production.<br>\n
    \   - A supervision tree prevented failures from the analytics process from affecting
    customers, until the scale of our failures exceeded the max_restart level.<br>\n
    \   - Our supervision tree needed some love though, clearly. \n    - Monitor your
    resources. CPU is a resource, but calls to another API are also a resource and
    can get unhealthy too.<br></li>\n</ul>\n\n<p>15:00 - Are you using any cool OTP
    features?</p>\n\n<ul>\n<li>GenServers, definitely. There’s lots we can do asynchronously
    especially in terms of our integrations. One process per store is a cool model
    that scales well and keeps issues isolated to a single store. </li>\n</ul>\n\n<p>15:50
    - If you could give one tip to developers out there who are or may soon be running
    Elixir in production, what would it be?</p>\n\n<ul>\n<li>If you’re on a small
    team, Heroku or a similar provider might give you a lot of value in terms of infrastructure
    you can set up and forget.</li>\n</ul>\n\n<p>Learn more about how SmartLogic uses
    <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix and Elixir.</a></p><p>Special
    Guest: Jay Ashe.</p><p>Links:</p><ul><li><a href=\"https://www.youtube.com/watch?v=fkDhU-2NWJ8\"
    title=\"ElixirConf 2016 - Selling Food With Elixir by Chris Bell\" rel=\"nofollow\">ElixirConf
    2016 - Selling Food With Elixir by Chris Bell</a></li><li><a href=\"https://github.com/HashNuke/heroku-buildpack-elixir\"
    title=\"Heroku-buildpack-elixir\" rel=\"nofollow\">Heroku-buildpack-elixir</a></li><li><a
    href=\"https://github.com/xerions/phoenix_swagger\" title=\"Phoenix Swagger\"
    rel=\"nofollow\">Phoenix Swagger</a></li><li><a href=\"https://github.com/grempe/ex_rated\"
    title=\"Ex_rated\" rel=\"nofollow\">Ex_rated</a></li><li><a href=\"https://github.com/bitwalker/timex\"
    title=\"Timex\" rel=\"nofollow\">Timex</a></li><li><a href=\"https://github.com/ericmj/mint\"
    title=\"Mint\" rel=\"nofollow\">Mint</a></li><li><a href=\"https://github.com/appcues/mojito\"
    title=\"Mojito\" rel=\"nofollow\">Mojito</a></li><li><a href=\"https://www.thelevelup.com/\"
    title=\"LevelUp\" rel=\"nofollow\">LevelUp</a></li></ul>\n      "
- title: Frank Hunleth - Elixir in Production
  slug: season-1-hunleth
  link: https://podcast.smartlogic.io/season-1-hunleth
  guid: ad538aa5-ad67-418b-b07f-0be38fff2f6b
  pubDate: Thu, 28 Mar 2019 06:00:00 -0400
  description: "We talk with Frank Hunleth from the Nerves core team about their current
    and past Elixir projects and how they are deployed.\nFrank Hunleth - Nerves (https://nerves-project.org/)\nFind
    Frank elsewhere online:\nhttps://twitter.com/fhunleth\nhttps://github.com/fhunleth\n0:53
    \   Frank intro\n2:02    Give us a quick overview of the Elixir projects you have
    in production.\n4:25    Why are you using Elixir in production?\n8:00    What
    are some of the high level advantages / disadvantages of Elixir, from your perspective?\n9:25
    \   What hardware do you deploy to?\n12:05   How do you get code to hardware after
    deployment?\n13:47   How do you secure the code?\n18:12   Do you cluster?\nIf
    so, how?\nHow does your Elixir App perform compared to others in your environment?\n22:45
    \  How does Elixir compare to other languages? \n26:15   More information about
    Nerves \nLearn more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8)
    Special Guest: Frank Hunleth.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/ad538aa5-ad67-418b-b07f-0be38fff2f6b.mp3
    length: '27639974'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '1'
    author: SmartLogic LLC
    subtitle: We talk with Frank Hunleth from the Nerves core team about their current
      and past Elixir projects and how they are deployed.
    duration: '28:47'
    explicit: 'no'
    keywords: elixir, nerves, production
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>We talk with Frank Hunleth from the Nerves core team about
      their current and past Elixir projects and how they are deployed.</p>\n\n<p>Frank
      Hunleth - <a href=\"https://nerves-project.org/\" rel=\"nofollow\">Nerves</a></p>\n\n<p>Find
      Frank elsewhere online:<br>\n<a href=\"https://twitter.com/fhunleth\" rel=\"nofollow\">https://twitter.com/fhunleth</a><br>\n<a
      href=\"https://github.com/fhunleth\" rel=\"nofollow\">https://github.com/fhunleth</a></p>\n\n<p>0:53
      \   Frank intro<br>\n2:02    Give us a quick overview of the Elixir projects
      you have in production.<br>\n4:25    Why are you using Elixir in production?<br>\n8:00
      \   What are some of the high level advantages / disadvantages of Elixir, from
      your perspective?<br>\n9:25    What hardware do you deploy to?<br>\n12:05   How
      do you get code to hardware after deployment?<br>\n13:47   How do you secure
      the code?<br>\n18:12   Do you cluster?<br>\nIf so, how?<br>\nHow does your Elixir
      App perform compared to others in your environment?<br>\n22:45   How does Elixir
      compare to other languages? <br>\n26:15   More information about Nerves </p>\n\n<p>Learn
      more about how SmartLogic uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix
      and Elixir.</a></p><p>Special Guest: Frank Hunleth.</p><p>Links:</p><ul><li><a
      href=\"https://www.grisp.org/\" title=\"Grisp\" rel=\"nofollow\">Grisp</a></li><li><a
      href=\"https://github.com/grisp\" title=\"Grisp GitHub\" rel=\"nofollow\">Grisp
      GitHub</a></li></ul>\n      "
  contentEncoded: "\n        <p>We talk with Frank Hunleth from the Nerves core team
    about their current and past Elixir projects and how they are deployed.</p>\n\n<p>Frank
    Hunleth - <a href=\"https://nerves-project.org/\" rel=\"nofollow\">Nerves</a></p>\n\n<p>Find
    Frank elsewhere online:<br>\n<a href=\"https://twitter.com/fhunleth\" rel=\"nofollow\">https://twitter.com/fhunleth</a><br>\n<a
    href=\"https://github.com/fhunleth\" rel=\"nofollow\">https://github.com/fhunleth</a></p>\n\n<p>0:53
    \   Frank intro<br>\n2:02    Give us a quick overview of the Elixir projects you
    have in production.<br>\n4:25    Why are you using Elixir in production?<br>\n8:00
    \   What are some of the high level advantages / disadvantages of Elixir, from
    your perspective?<br>\n9:25    What hardware do you deploy to?<br>\n12:05   How
    do you get code to hardware after deployment?<br>\n13:47   How do you secure the
    code?<br>\n18:12   Do you cluster?<br>\nIf so, how?<br>\nHow does your Elixir
    App perform compared to others in your environment?<br>\n22:45   How does Elixir
    compare to other languages? <br>\n26:15   More information about Nerves </p>\n\n<p>Learn
    more about how SmartLogic uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix
    and Elixir.</a></p><p>Special Guest: Frank Hunleth.</p><p>Links:</p><ul><li><a
    href=\"https://www.grisp.org/\" title=\"Grisp\" rel=\"nofollow\">Grisp</a></li><li><a
    href=\"https://github.com/grisp\" title=\"Grisp GitHub\" rel=\"nofollow\">Grisp
    GitHub</a></li></ul>\n      "
- title: Mark Ericksen - Elixir in Production
  slug: season-1-ericksen
  link: https://podcast.smartlogic.io/season-1-ericksen
  guid: 4a5a2fb4-c1a0-437a-9001-9b981312ecab
  pubDate: Thu, 21 Mar 2019 06:00:00 -0400
  description: "We talk with Mark Ericksen from Elixir Mix about their current and
    past Elixir projects and how they are deployed.\nMark Ericksen - Elixir Mix (https://devchat.tv/elixir-mix/)\nFind
    Mark elsewhere online:\nhttps://twitter.com/brainlid\nhttps://brainlid.org/\n00:32
    Intro\n0:58 Mark intro\nDeveloping a long time. C#, then Rails. Webforms were
    terrible. Rails is “Wow, this is how web development should be… I moved across
    the country to work with this technology”\nThe Rails Community is strong. Dave
    Thomas got Mark into Elixir\n2:48     What Elixir projects do you have in production?\nA
    Rails app and a number of Elixir Micro-liths\n4:29     Why do you use Elixir \n6:45
    \   Trends in moving from Ruby and Rails to Elixir\nRuby Syntax\nPattern Matching\nConcurrency
    primitives\nFault Tolerance and a functional paradigm\nErlang/OTP\n6:48    Comparing
    Elixir community to Ruby community to C# community\n8:27     Any disadvantages
    to using Elixir?\nBuilding releases. Configuring releases.\nmix.release\n10:13
    \   Where are you hosting these bad boys?\nAWS\nKubernetes in Production. So Fresh.\nDocker
    and Distillery 2.0 Releases\nYaml files and Bash Scripts\nMakefiles\n10:53    What
    else are you using besides docker\n12:36    Helm and Ksonnet. \n13:55   Deploys\n14:39
    \  Clustering\n17:50   How do your Elixir apps compare to the Ruby apps?\nBig
    Elixir Apps\n20:00    How Mark handles background jobs\nEasy to write yourself
    with BEAM primitives\n21:27    Libraries - Quantum, Bamboo, exmachina, prometheusex
    via Eric’s influence\n23:29   Third party integrations. Major ones were easy.
    Banks were bad.\nLiterally had to FTP files. Had to use java to write xml spreadsheets.
    The horror.\n25:26     Has Elixir ever saved the day for you in Production?\n29:42:
    Cool OTP features\n30:57 Tips to developers\n35:36 Where to find Mark\nLearn more
    about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) Special
    Guest: Mark Ericksen.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/4a5a2fb4-c1a0-437a-9001-9b981312ecab.mp3
    length: '35121324'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '1'
    author: SmartLogic LLC
    subtitle: We talk with Mark Ericksen about their current and past Elixir projects
      and how they are deployed.
    duration: '36:34'
    explicit: 'no'
    keywords: elixir, phoenix, production
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>We talk with Mark Ericksen from Elixir Mix about their
      current and past Elixir projects and how they are deployed.</p>\n\n<p>Mark Ericksen
      - <a href=\"https://devchat.tv/elixir-mix/\" rel=\"nofollow\">Elixir Mix</a></p>\n\n<p>Find
      Mark elsewhere online:<br>\n<a href=\"https://twitter.com/brainlid\" rel=\"nofollow\">https://twitter.com/brainlid</a><br>\n<a
      href=\"https://brainlid.org/\" rel=\"nofollow\">https://brainlid.org/</a></p>\n\n<p>00:32
      Intro<br>\n0:58 Mark intro<br>\nDeveloping a long time. C#, then Rails. Webforms
      were terrible. Rails is “Wow, this is how web development should be… I moved
      across the country to work with this technology”<br>\nThe Rails Community is
      strong. Dave Thomas got Mark into Elixir</p>\n\n<p>2:48     What Elixir projects
      do you have in production?<br>\nA Rails app and a number of Elixir Micro-liths</p>\n\n<p>4:29
      \    Why do you use Elixir </p>\n\n<p>6:45    Trends in moving from Ruby and
      Rails to Elixir<br>\nRuby Syntax<br>\nPattern Matching<br>\nConcurrency primitives<br>\nFault
      Tolerance and a functional paradigm<br>\nErlang/OTP</p>\n\n<p>6:48    Comparing
      Elixir community to Ruby community to C# community</p>\n\n<p>8:27     Any disadvantages
      to using Elixir?<br>\nBuilding releases. Configuring releases.<br>\nmix.release</p>\n\n<p>10:13
      \   Where are you hosting these bad boys?<br>\nAWS<br>\nKubernetes in Production.
      So Fresh.<br>\nDocker and Distillery 2.0 Releases<br>\nYaml files and Bash Scripts<br>\nMakefiles</p>\n\n<p>10:53
      \   What else are you using besides docker</p>\n\n<p>12:36    Helm and Ksonnet.
      </p>\n\n<p>13:55   Deploys</p>\n\n<p>14:39   Clustering</p>\n\n<p>17:50   How
      do your Elixir apps compare to the Ruby apps?<br>\nBig Elixir Apps</p>\n\n<p>20:00
      \   How Mark handles background jobs<br>\nEasy to write yourself with BEAM primitives</p>\n\n<p>21:27
      \   Libraries - Quantum, Bamboo, ex_machina, prometheus_ex via Eric’s influence</p>\n\n<p>23:29
      \  Third party integrations. Major ones were easy. Banks were bad.<br>\nLiterally
      had to FTP files. Had to use java to write xml spreadsheets. The horror.</p>\n\n<p>25:26
      \    Has Elixir ever saved the day for you in Production?</p>\n\n<p>29:42: Cool
      OTP features<br>\n30:57 Tips to developers<br>\n35:36 Where to find Mark</p>\n\n<p>Learn
      more about how SmartLogic uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix
      and Elixir.</a></p><p>Special Guest: Mark Ericksen.</p><p>Links:</p><ul><li><a
      href=\"https://github.com/bitwalker/libcluster\" title=\"libcluster\" rel=\"nofollow\">libcluster</a></li><li><a
      href=\"https://github.com/akira/exq\" title=\"Exq\" rel=\"nofollow\">Exq</a></li><li><a
      href=\"https://absinthe-graphql.org/\" title=\"absinthe\" rel=\"nofollow\">absinthe</a></li><li><a
      href=\"https://github.com/absinthe-graphql/dataloader\" title=\"dataloader\"
      rel=\"nofollow\">dataloader</a></li></ul>\n      "
  contentEncoded: "\n        <p>We talk with Mark Ericksen from Elixir Mix about their
    current and past Elixir projects and how they are deployed.</p>\n\n<p>Mark Ericksen
    - <a href=\"https://devchat.tv/elixir-mix/\" rel=\"nofollow\">Elixir Mix</a></p>\n\n<p>Find
    Mark elsewhere online:<br>\n<a href=\"https://twitter.com/brainlid\" rel=\"nofollow\">https://twitter.com/brainlid</a><br>\n<a
    href=\"https://brainlid.org/\" rel=\"nofollow\">https://brainlid.org/</a></p>\n\n<p>00:32
    Intro<br>\n0:58 Mark intro<br>\nDeveloping a long time. C#, then Rails. Webforms
    were terrible. Rails is “Wow, this is how web development should be… I moved across
    the country to work with this technology”<br>\nThe Rails Community is strong.
    Dave Thomas got Mark into Elixir</p>\n\n<p>2:48     What Elixir projects do you
    have in production?<br>\nA Rails app and a number of Elixir Micro-liths</p>\n\n<p>4:29
    \    Why do you use Elixir </p>\n\n<p>6:45    Trends in moving from Ruby and Rails
    to Elixir<br>\nRuby Syntax<br>\nPattern Matching<br>\nConcurrency primitives<br>\nFault
    Tolerance and a functional paradigm<br>\nErlang/OTP</p>\n\n<p>6:48    Comparing
    Elixir community to Ruby community to C# community</p>\n\n<p>8:27     Any disadvantages
    to using Elixir?<br>\nBuilding releases. Configuring releases.<br>\nmix.release</p>\n\n<p>10:13
    \   Where are you hosting these bad boys?<br>\nAWS<br>\nKubernetes in Production.
    So Fresh.<br>\nDocker and Distillery 2.0 Releases<br>\nYaml files and Bash Scripts<br>\nMakefiles</p>\n\n<p>10:53
    \   What else are you using besides docker</p>\n\n<p>12:36    Helm and Ksonnet.
    </p>\n\n<p>13:55   Deploys</p>\n\n<p>14:39   Clustering</p>\n\n<p>17:50   How
    do your Elixir apps compare to the Ruby apps?<br>\nBig Elixir Apps</p>\n\n<p>20:00
    \   How Mark handles background jobs<br>\nEasy to write yourself with BEAM primitives</p>\n\n<p>21:27
    \   Libraries - Quantum, Bamboo, ex_machina, prometheus_ex via Eric’s influence</p>\n\n<p>23:29
    \  Third party integrations. Major ones were easy. Banks were bad.<br>\nLiterally
    had to FTP files. Had to use java to write xml spreadsheets. The horror.</p>\n\n<p>25:26
    \    Has Elixir ever saved the day for you in Production?</p>\n\n<p>29:42: Cool
    OTP features<br>\n30:57 Tips to developers<br>\n35:36 Where to find Mark</p>\n\n<p>Learn
    more about how SmartLogic uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix
    and Elixir.</a></p><p>Special Guest: Mark Ericksen.</p><p>Links:</p><ul><li><a
    href=\"https://github.com/bitwalker/libcluster\" title=\"libcluster\" rel=\"nofollow\">libcluster</a></li><li><a
    href=\"https://github.com/akira/exq\" title=\"Exq\" rel=\"nofollow\">Exq</a></li><li><a
    href=\"https://absinthe-graphql.org/\" title=\"absinthe\" rel=\"nofollow\">absinthe</a></li><li><a
    href=\"https://github.com/absinthe-graphql/dataloader\" title=\"dataloader\" rel=\"nofollow\">dataloader</a></li></ul>\n
    \     "
- title: Brooklyn Zelenka from SPADE Co. - Elixir in Production
  slug: season-1-zelenka
  link: https://podcast.smartlogic.io/season-1-zelenka
  guid: 0cef68be-a246-4ba6-bdc7-a6835c05fe72
  pubDate: Thu, 14 Mar 2019 06:00:00 -0400
  description: "We talk with Brooklyn Zelenka from SPADE Co. about their current and
    past Elixir projects and how they are deployed.\nBrooklyn Zelenka - SPADE Co.
    (https://spade.builders/)\nFind Brooklyn elsewhere online:\nhttps://twitter.com/expede\nhttps://github.com/expede\n1:08
    \   - Brooklyn’s Background\nBrooklyn's background and experience with Elixir
    is deep. Huge open source contributor. \nGot started in Elixir just after Phoenix
    got to 1.0. \n1:53     - Worked on several Elixir projects in production.\n2:43
    \    - Why she got into Elixir.\n- Real Time\n- More performant than Rails.\n-
    Great documentation\n- Industrial-grade\n4:38     - When you wouldn't use Elixir.
    \nEasy to get stakeholder buy-in. Just point to WhatsApp.\nElixir is made for
    2019\nCLI tools\nRepl-driven development \nTDD tools built in by default \nAll
    the best practices we have today are built in.\n7:14     - Where has Brooklyn
    hosted her apps?\nHeroku for POC's. AWS for production. Dockerized because \"kubernetes
    is the new hotness\"\n9:40    - Do you do any clustering?\nLoad balanced above.
    AWS load balancing is very standard. They're well understood and have a nice developer
    experience.\n10:29   Are you able to get any zero downtime deploys?\nZero downtime
    deploys. Awesome but impractical. Rolling deploys are easier and usually more
    appropriate. Some requirements make it valuable.\nErlang error states. Exceptional.
    Allows you to build for the happy path. Don't worry about error handling all the
    time.\nWitchcraft and dark magic. Monads.\nPoke around the standard library.\n12:50
    \   - How does Elixir compare to Rails in terms of response times, and other aspects?\n15:32
    \   - What libraries do you use and what have  you built?\n22:41    - Any cool
    features of OTP you are using? \n25:36   - One tip to developers new to Elixir\nBuild
    up a peer-to-peer cli chat from scratch in one GenServer.\nFind her at @expede
    everywhere on the internet.\nLearn more about how SmartLogic uses Phoenix and
    Elixir. (https://smr.tl/2Hyslu8)\n Special Guest: Brooklyn Zelenka.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/0cef68be-a246-4ba6-bdc7-a6835c05fe72.mp3
    length: '26665835'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '1'
    author: SmartLogic LLC
    subtitle: We talk with Brooklyn Zelenka from SPADE Co. about their current and
      past Elixir projects and how they are deployed.
    duration: '27:46'
    explicit: 'no'
    keywords: elixir, phoenix, spade co
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>We talk with Brooklyn Zelenka from SPADE Co. about their
      current and past Elixir projects and how they are deployed.</p>\n\n<p>Brooklyn
      Zelenka - <a href=\"https://spade.builders/\" rel=\"nofollow\">SPADE Co.</a></p>\n\n<p>Find
      Brooklyn elsewhere online:<br>\n<a href=\"https://twitter.com/expede\" rel=\"nofollow\">https://twitter.com/expede</a><br>\n<a
      href=\"https://github.com/expede\" rel=\"nofollow\">https://github.com/expede</a></p>\n\n<p>1:08
      \   - Brooklyn’s Background</p>\n\n<p>Brooklyn&#39;s background and experience
      with Elixir is deep. Huge open source contributor. <br>\nGot started in Elixir
      just after Phoenix got to 1.0. </p>\n\n<p>1:53     - Worked on several Elixir
      projects in production.</p>\n\n<p>2:43     - Why she got into Elixir.</p>\n\n<ul>\n<li>Real
      Time</li>\n<li>More performant than Rails.</li>\n<li>Great documentation</li>\n<li>Industrial-grade</li>\n</ul>\n\n<p>4:38
      \    - When you wouldn&#39;t use Elixir. </p>\n\n<p>Easy to get stakeholder
      buy-in. Just point to WhatsApp.</p>\n\n<p>Elixir is made for 2019<br>\nCLI tools<br>\nRepl-driven
      development <br>\nTDD tools built in by default </p>\n\n<p>All the best practices
      we have today are built in.</p>\n\n<p>7:14     - Where has Brooklyn hosted her
      apps?</p>\n\n<p>Heroku for POC&#39;s. AWS for production. Dockerized because
      &quot;kubernetes is the new hotness&quot;</p>\n\n<p>9:40    - Do you do any
      clustering?</p>\n\n<p>Load balanced above. AWS load balancing is very standard.
      They&#39;re well understood and have a nice developer experience.</p>\n\n<p>10:29
      \  Are you able to get any zero downtime deploys?<br>\nZero downtime deploys.
      Awesome but impractical. Rolling deploys are easier and usually more appropriate.
      Some requirements make it valuable.</p>\n\n<p>Erlang error states. Exceptional.
      Allows you to build for the happy path. Don&#39;t worry about error handling
      all the time.</p>\n\n<p>Witchcraft and dark magic. Monads.</p>\n\n<p>Poke around
      the standard library.</p>\n\n<p>12:50    - How does Elixir compare to Rails
      in terms of response times, and other aspects?</p>\n\n<p>15:32    - What libraries
      do you use and what have  you built?</p>\n\n<p>22:41    - Any cool features
      of OTP you are using? </p>\n\n<p>25:36   - One tip to developers new to Elixir</p>\n\n<p>Build
      up a peer-to-peer cli chat from scratch in one GenServer.</p>\n\n<p>Find her
      at @expede everywhere on the internet.</p>\n\n<p>Learn more about how SmartLogic
      uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix and Elixir.</a></p><p>Special
      Guest: Brooklyn Zelenka.</p><p>Links:</p><ul><li><a href=\"https://github.com/HashNuke/heroku-buildpack-elixir\"
      title=\"Heroku Elixir Buildpack\" rel=\"nofollow\">Heroku Elixir Buildpack</a></li><li><a
      href=\"https://github.com/gjaldon/heroku-buildpack-phoenix-static\" title=\"Heroku
      Phoenix Static Buildpack\" rel=\"nofollow\">Heroku Phoenix Static Buildpack</a></li><li><a
      href=\"https://github.com/expede/exceptional\" title=\"Exceptional\" rel=\"nofollow\">Exceptional</a></li><li><a
      href=\"https://github.com/expede/witchcraft\" title=\"Witchcraft\" rel=\"nofollow\">Witchcraft</a></li><li><a
      href=\"https://github.com/expede/quick_chat\" title=\"QuickChat\" rel=\"nofollow\">QuickChat</a></li></ul>\n
      \     "
  contentEncoded: "\n        <p>We talk with Brooklyn Zelenka from SPADE Co. about
    their current and past Elixir projects and how they are deployed.</p>\n\n<p>Brooklyn
    Zelenka - <a href=\"https://spade.builders/\" rel=\"nofollow\">SPADE Co.</a></p>\n\n<p>Find
    Brooklyn elsewhere online:<br>\n<a href=\"https://twitter.com/expede\" rel=\"nofollow\">https://twitter.com/expede</a><br>\n<a
    href=\"https://github.com/expede\" rel=\"nofollow\">https://github.com/expede</a></p>\n\n<p>1:08
    \   - Brooklyn’s Background</p>\n\n<p>Brooklyn&#39;s background and experience
    with Elixir is deep. Huge open source contributor. <br>\nGot started in Elixir
    just after Phoenix got to 1.0. </p>\n\n<p>1:53     - Worked on several Elixir
    projects in production.</p>\n\n<p>2:43     - Why she got into Elixir.</p>\n\n<ul>\n<li>Real
    Time</li>\n<li>More performant than Rails.</li>\n<li>Great documentation</li>\n<li>Industrial-grade</li>\n</ul>\n\n<p>4:38
    \    - When you wouldn&#39;t use Elixir. </p>\n\n<p>Easy to get stakeholder buy-in.
    Just point to WhatsApp.</p>\n\n<p>Elixir is made for 2019<br>\nCLI tools<br>\nRepl-driven
    development <br>\nTDD tools built in by default </p>\n\n<p>All the best practices
    we have today are built in.</p>\n\n<p>7:14     - Where has Brooklyn hosted her
    apps?</p>\n\n<p>Heroku for POC&#39;s. AWS for production. Dockerized because &quot;kubernetes
    is the new hotness&quot;</p>\n\n<p>9:40    - Do you do any clustering?</p>\n\n<p>Load
    balanced above. AWS load balancing is very standard. They&#39;re well understood
    and have a nice developer experience.</p>\n\n<p>10:29   Are you able to get any
    zero downtime deploys?<br>\nZero downtime deploys. Awesome but impractical. Rolling
    deploys are easier and usually more appropriate. Some requirements make it valuable.</p>\n\n<p>Erlang
    error states. Exceptional. Allows you to build for the happy path. Don&#39;t worry
    about error handling all the time.</p>\n\n<p>Witchcraft and dark magic. Monads.</p>\n\n<p>Poke
    around the standard library.</p>\n\n<p>12:50    - How does Elixir compare to Rails
    in terms of response times, and other aspects?</p>\n\n<p>15:32    - What libraries
    do you use and what have  you built?</p>\n\n<p>22:41    - Any cool features of
    OTP you are using? </p>\n\n<p>25:36   - One tip to developers new to Elixir</p>\n\n<p>Build
    up a peer-to-peer cli chat from scratch in one GenServer.</p>\n\n<p>Find her at
    @expede everywhere on the internet.</p>\n\n<p>Learn more about how SmartLogic
    uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix and Elixir.</a></p><p>Special
    Guest: Brooklyn Zelenka.</p><p>Links:</p><ul><li><a href=\"https://github.com/HashNuke/heroku-buildpack-elixir\"
    title=\"Heroku Elixir Buildpack\" rel=\"nofollow\">Heroku Elixir Buildpack</a></li><li><a
    href=\"https://github.com/gjaldon/heroku-buildpack-phoenix-static\" title=\"Heroku
    Phoenix Static Buildpack\" rel=\"nofollow\">Heroku Phoenix Static Buildpack</a></li><li><a
    href=\"https://github.com/expede/exceptional\" title=\"Exceptional\" rel=\"nofollow\">Exceptional</a></li><li><a
    href=\"https://github.com/expede/witchcraft\" title=\"Witchcraft\" rel=\"nofollow\">Witchcraft</a></li><li><a
    href=\"https://github.com/expede/quick_chat\" title=\"QuickChat\" rel=\"nofollow\">QuickChat</a></li></ul>\n
    \     "
- title: Todd Resudek from Weedmaps - Elixir in Production
  slug: season-1-weedmaps
  link: https://podcast.smartlogic.io/season-1-weedmaps
  guid: d949b81e-39c5-4474-8605-89062b8dc543
  pubDate: Thu, 07 Mar 2019 06:00:00 -0500
  description: "We talk with Todd Resudek from Weedmaps about their current Elixir
    projects and how they are deployed.\nTodd Resudek - Weedmaps (https://weedmaps.com/)\nFind
    Todd elsewhere online:\nhttps://twitter.com/sprsmpl\nhttps://github.com/supersimple\n00:00
    - Intro\n01:06 - Tom introduces himself\n02:54 - What is Weedmaps?\n04:33 - Overview
    of the Elixir projects you have in production.\n06:25 - Why are you using Elixir
    in production?\n07:21 - Advantages / disadvantages of Elixir\n10:37   - What do
    you use to host your Elixir app?\n10:50 - How do you deploy your application?\n11:22
    - Are you able to get zero downtime deploys? \n12:00 - Do you cluster the application?
    \n13:00 - How does your Elixir App perform compared to others in your environment?\n14:15
    - How are you solving background task processing?\n16:40 - What libraries are
    you using?\n21:09 - 3rd Party Services\n23:56 - Do you have a story where Elixir
    saved the day in production?\n24:22 - Are you using any cool OTP features?\n24:39
    - Tip to developers\n25:12 - Where you can find him\n25:32 - Outro\nLearn more
    about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) Special
    Guest: Todd Resudek.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/d949b81e-39c5-4474-8605-89062b8dc543.mp3
    length: '24982914'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '1'
    author: SmartLogic LLC
    subtitle: We talk with Todd Resudek from Weedmaps about their current Elixir projects
      and how they are deployed.
    duration: '26:01'
    explicit: 'no'
    keywords: elixir, phoenix, weedmaps
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>We talk with Todd Resudek from Weedmaps about their current
      Elixir projects and how they are deployed.</p>\n\n<p>Todd Resudek - <a href=\"https://weedmaps.com/\"
      rel=\"nofollow\">Weedmaps</a></p>\n\n<p>Find Todd elsewhere online:<br>\n<a
      href=\"https://twitter.com/sprsmpl\" rel=\"nofollow\">https://twitter.com/sprsmpl</a><br>\n<a
      href=\"https://github.com/supersimple\" rel=\"nofollow\">https://github.com/supersimple</a></p>\n\n<p>00:00
      - Intro<br>\n01:06 - Tom introduces himself<br>\n02:54 - What is Weedmaps?<br>\n04:33
      - Overview of the Elixir projects you have in production.<br>\n06:25 - Why are
      you using Elixir in production?<br>\n07:21 - Advantages / disadvantages of Elixir<br>\n10:37
      \  - What do you use to host your Elixir app?<br>\n10:50 - How do you deploy
      your application?<br>\n11:22 - Are you able to get zero downtime deploys? <br>\n12:00
      - Do you cluster the application? <br>\n13:00 - How does your Elixir App perform
      compared to others in your environment?<br>\n14:15 - How are you solving background
      task processing?<br>\n16:40 - What libraries are you using?<br>\n21:09 - 3rd
      Party Services<br>\n23:56 - Do you have a story where Elixir saved the day in
      production?<br>\n24:22 - Are you using any cool OTP features?<br>\n24:39 - Tip
      to developers<br>\n25:12 - Where you can find him<br>\n25:32 - Outro</p>\n\n<p>Learn
      more about how SmartLogic uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix
      and Elixir.</a></p><p>Special Guest: Todd Resudek.</p><p>Links:</p><ul><li><a
      href=\"https://www.youtube.com/watch?v=cbCnTKVLuu8\" title=\"A Deep Dive into
      Hex - ElixirConf talk\" rel=\"nofollow\">A Deep Dive into Hex - ElixirConf talk</a></li><li><a
      href=\"https://github.com/rrrene/credo\" title=\"Credo\" rel=\"nofollow\">Credo</a></li><li><a
      href=\"https://github.com/jeremyjh/dialyxir\" title=\"Dialyxir\" rel=\"nofollow\">Dialyxir</a></li><li><a
      href=\"https://github.com/swoosh/swoosh\" title=\"Swoosh\" rel=\"nofollow\">Swoosh</a></li></ul>\n
      \     "
  contentEncoded: "\n        <p>We talk with Todd Resudek from Weedmaps about their
    current Elixir projects and how they are deployed.</p>\n\n<p>Todd Resudek - <a
    href=\"https://weedmaps.com/\" rel=\"nofollow\">Weedmaps</a></p>\n\n<p>Find Todd
    elsewhere online:<br>\n<a href=\"https://twitter.com/sprsmpl\" rel=\"nofollow\">https://twitter.com/sprsmpl</a><br>\n<a
    href=\"https://github.com/supersimple\" rel=\"nofollow\">https://github.com/supersimple</a></p>\n\n<p>00:00
    - Intro<br>\n01:06 - Tom introduces himself<br>\n02:54 - What is Weedmaps?<br>\n04:33
    - Overview of the Elixir projects you have in production.<br>\n06:25 - Why are
    you using Elixir in production?<br>\n07:21 - Advantages / disadvantages of Elixir<br>\n10:37
    \  - What do you use to host your Elixir app?<br>\n10:50 - How do you deploy your
    application?<br>\n11:22 - Are you able to get zero downtime deploys? <br>\n12:00
    - Do you cluster the application? <br>\n13:00 - How does your Elixir App perform
    compared to others in your environment?<br>\n14:15 - How are you solving background
    task processing?<br>\n16:40 - What libraries are you using?<br>\n21:09 - 3rd Party
    Services<br>\n23:56 - Do you have a story where Elixir saved the day in production?<br>\n24:22
    - Are you using any cool OTP features?<br>\n24:39 - Tip to developers<br>\n25:12
    - Where you can find him<br>\n25:32 - Outro</p>\n\n<p>Learn more about how SmartLogic
    uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix and Elixir.</a></p><p>Special
    Guest: Todd Resudek.</p><p>Links:</p><ul><li><a href=\"https://www.youtube.com/watch?v=cbCnTKVLuu8\"
    title=\"A Deep Dive into Hex - ElixirConf talk\" rel=\"nofollow\">A Deep Dive
    into Hex - ElixirConf talk</a></li><li><a href=\"https://github.com/rrrene/credo\"
    title=\"Credo\" rel=\"nofollow\">Credo</a></li><li><a href=\"https://github.com/jeremyjh/dialyxir\"
    title=\"Dialyxir\" rel=\"nofollow\">Dialyxir</a></li><li><a href=\"https://github.com/swoosh/swoosh\"
    title=\"Swoosh\" rel=\"nofollow\">Swoosh</a></li></ul>\n      "
- title: Lonestar ElixirConf 2019 Lunchisode
  slug: special-lonestar-elixir-2019
  link: https://podcast.smartlogic.io/special-lonestar-elixir-2019
  guid: 4646981d-f12c-479e-a5cc-7629570962ed
  pubDate: Wed, 06 Mar 2019 03:15:00 -0500
  description: "We sat down with numerous developers, including José Valim and Chris
    McCord, during the Saturday lunch at Lonestar ElixirConf 2019 (https://lonestarelixir.com/2019/).
    Hear what they had to say about the state of Elixir!\nGuests:\nJosé Valim - Creator
    of Elixir (https://elixir-lang.org/)\nChris McCord - Creator of Phoenix (https://phoenixframework.org/)\nPaul
    Schoenfelder - Creator of Distillery (https://github.com/bitwalker/distillery),
    Timex (https://github.com/bitwalker/timex), Libcluster (https://github.com/bitwalker/libcluster),
    and many others\nChris Keathley - Host of Elixir Outlaws (https://elixiroutlaws.com/),
    developer at Bleacher Report (https://bleacherreport.com/)\nAmos King - Host of
    Elixir Outlaws (https://elixiroutlaws.com/)\nJim Freeze - Organizer of ElixirConf
    (https://elixirconf.com/), ElixirConf EU (http://www.elixirconf.eu/), and others\nSusumu
    Yamazaki - Creator of Hastega (https://github.com/zeam-vm/hastega)\nBrian Cardarella
    - CEO of Dockyard (https://dockyard.com/)\nOsa Gaius - Engineer at Mailchimp (https://mailchimp.com/)\nSpectating:\nBruce
    Tate and Ben Marx\n00:00   - Intro\n01:47   - LoneStar begins\n02:03   - Panelists
    introduce themselves\n09:15   - Where is Elixir going?\n10:14   - Releases\n19:04
    \  - The issue with hype\n26:30   - Osa Intro\n29:00 - Define lists\n40:00 - How
    can Elixir displace Java?\nLearn more about how SmartLogic uses Phoenix and Elixir.
    (https://smr.tl/2Hyslu8) \n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/4646981d-f12c-479e-a5cc-7629570962ed.mp3
    length: '47467128'
    type: audio/mp3
  itunes:
    episodeType: bonus
    season: '1'
    author: SmartLogic LLC
    subtitle: We sat down with numerous developers, including José Valim and Chris
      McCord, during the Saturday lunch at Lonestar ElixirConf 2019. Hear what they
      had to say about the state of Elixir!
    duration: '49:26'
    explicit: 'no'
    keywords: elixir, phoenix
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>We sat down with numerous developers, including José Valim
      and Chris McCord, during the Saturday lunch at <a href=\"https://lonestarelixir.com/2019/\"
      rel=\"nofollow\">Lonestar ElixirConf 2019</a>. Hear what they had to say about
      the state of Elixir!</p>\n\n<p>Guests:<br>\nJosé Valim - Creator of <a href=\"https://elixir-lang.org/\"
      rel=\"nofollow\">Elixir</a><br>\nChris McCord - Creator of <a href=\"https://phoenixframework.org/\"
      rel=\"nofollow\">Phoenix</a><br>\nPaul Schoenfelder - Creator of <a href=\"https://github.com/bitwalker/distillery\"
      rel=\"nofollow\">Distillery</a>, <a href=\"https://github.com/bitwalker/timex\"
      rel=\"nofollow\">Timex</a>, <a href=\"https://github.com/bitwalker/libcluster\"
      rel=\"nofollow\">Libcluster</a>, and many others<br>\nChris Keathley - Host
      of <a href=\"https://elixiroutlaws.com/\" rel=\"nofollow\">Elixir Outlaws</a>,
      developer at <a href=\"https://bleacherreport.com/\" rel=\"nofollow\">Bleacher
      Report</a><br>\nAmos King - Host of <a href=\"https://elixiroutlaws.com/\" rel=\"nofollow\">Elixir
      Outlaws</a><br>\nJim Freeze - Organizer of <a href=\"https://elixirconf.com/\"
      rel=\"nofollow\">ElixirConf</a>, <a href=\"http://www.elixirconf.eu/\" rel=\"nofollow\">ElixirConf
      EU</a>, and others<br>\nSusumu Yamazaki - Creator of <a href=\"https://github.com/zeam-vm/hastega\"
      rel=\"nofollow\">Hastega</a><br>\nBrian Cardarella - CEO of <a href=\"https://dockyard.com/\"
      rel=\"nofollow\">Dockyard</a><br>\nOsa Gaius - Engineer at <a href=\"https://mailchimp.com/\"
      rel=\"nofollow\">Mailchimp</a></p>\n\n<p>Spectating:<br>\nBruce Tate and Ben
      Marx</p>\n\n<p>00:00   - Intro<br>\n01:47   - LoneStar begins<br>\n02:03   -
      Panelists introduce themselves<br>\n09:15   - Where is Elixir going?<br>\n10:14
      \  - Releases<br>\n19:04   - The issue with hype<br>\n26:30   - Osa Intro<br>\n29:00
      - Define lists<br>\n40:00 - How can Elixir displace Java?</p>\n\n<p>Learn more
      about how SmartLogic uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix
      and Elixir.</a></p>\n      "
  contentEncoded: "\n        <p>We sat down with numerous developers, including José
    Valim and Chris McCord, during the Saturday lunch at <a href=\"https://lonestarelixir.com/2019/\"
    rel=\"nofollow\">Lonestar ElixirConf 2019</a>. Hear what they had to say about
    the state of Elixir!</p>\n\n<p>Guests:<br>\nJosé Valim - Creator of <a href=\"https://elixir-lang.org/\"
    rel=\"nofollow\">Elixir</a><br>\nChris McCord - Creator of <a href=\"https://phoenixframework.org/\"
    rel=\"nofollow\">Phoenix</a><br>\nPaul Schoenfelder - Creator of <a href=\"https://github.com/bitwalker/distillery\"
    rel=\"nofollow\">Distillery</a>, <a href=\"https://github.com/bitwalker/timex\"
    rel=\"nofollow\">Timex</a>, <a href=\"https://github.com/bitwalker/libcluster\"
    rel=\"nofollow\">Libcluster</a>, and many others<br>\nChris Keathley - Host of
    <a href=\"https://elixiroutlaws.com/\" rel=\"nofollow\">Elixir Outlaws</a>, developer
    at <a href=\"https://bleacherreport.com/\" rel=\"nofollow\">Bleacher Report</a><br>\nAmos
    King - Host of <a href=\"https://elixiroutlaws.com/\" rel=\"nofollow\">Elixir
    Outlaws</a><br>\nJim Freeze - Organizer of <a href=\"https://elixirconf.com/\"
    rel=\"nofollow\">ElixirConf</a>, <a href=\"http://www.elixirconf.eu/\" rel=\"nofollow\">ElixirConf
    EU</a>, and others<br>\nSusumu Yamazaki - Creator of <a href=\"https://github.com/zeam-vm/hastega\"
    rel=\"nofollow\">Hastega</a><br>\nBrian Cardarella - CEO of <a href=\"https://dockyard.com/\"
    rel=\"nofollow\">Dockyard</a><br>\nOsa Gaius - Engineer at <a href=\"https://mailchimp.com/\"
    rel=\"nofollow\">Mailchimp</a></p>\n\n<p>Spectating:<br>\nBruce Tate and Ben Marx</p>\n\n<p>00:00
    \  - Intro<br>\n01:47   - LoneStar begins<br>\n02:03   - Panelists introduce themselves<br>\n09:15
    \  - Where is Elixir going?<br>\n10:14   - Releases<br>\n19:04   - The issue with
    hype<br>\n26:30   - Osa Intro<br>\n29:00 - Define lists<br>\n40:00 - How can Elixir
    displace Java?</p>\n\n<p>Learn more about how SmartLogic uses <a href=\"https://smr.tl/2Hyslu8\"
    rel=\"nofollow\">Phoenix and Elixir.</a></p>\n      "
- title: Ryan Billingsley from ClusterTruck - Elixir in Production
  slug: season-1-clustertruck
  link: https://podcast.smartlogic.io/season-1-clustertruck
  guid: 9b17b0c6-6e66-4e77-ae1f-9b3e2db6a35b
  pubDate: Thu, 28 Feb 2019 06:15:00 -0500
  description: |
    We talk with Ryan Billingsley from ClusterTruck about their current Elixir projects and how they are deployed.
    Ryan Billingsley - ClusterTruck (https://www.clustertruck.com/)
    Find Ryan elsewhere online:
    https://twitter.com/ryanbillingsley
    https://horriblenight.com/
    00:00 - Fade In
    00:50 - Ryan introduces us to ClusterTruck.
    02:00 - How did Ryan get into Elixir?
    03:12 - Where does the name ClusterTruck come from?
    04:17 - Tell us about the projects you have in production.
    05:50 - Why are you using Elixir in these projects.
    08:11 - Disadvantages of using Elixir
    09:22 - Comparing Elixir with Ruby, Node, Go.
    11:38 - Where is ClusterTruck hosting their applications?
    15:03 - Kubernetes?
    16:03 - Zero Downtime Deployments?
    16:42 - Do you do any clustering?
    18:06 - How does Elixir perform compared to other project environments you’ve worked in?
    19:52 - How are you solving background task processing?
    21:09 - Other libraries?
    23:34 - Other third party integrations?
    25:46 - Is there a time Elixir has saved the day in Production?
    27:47 - Cool OTP Features!
    29:45 - Tips to devs thinking about running Elixir in Production.
    31:17 - Outro
    Learn more about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) Special Guest: Ryan Billingsley.
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/9b17b0c6-6e66-4e77-ae1f-9b3e2db6a35b.mp3
    length: '31273348'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '1'
    author: SmartLogic LLC
    subtitle: We talk with Ryan Billingsley from ClusterTruck about their current
      Elixir projects and how they are deployed.
    duration: '32:34'
    explicit: 'no'
    keywords: elixir, phoenix, clustertruck
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>We talk with Ryan Billingsley from ClusterTruck about their
      current Elixir projects and how they are deployed.</p>\n\n<p>Ryan Billingsley
      - <a href=\"https://www.clustertruck.com/\" rel=\"nofollow\">ClusterTruck</a></p>\n\n<p>Find
      Ryan elsewhere online:<br>\n<a href=\"https://twitter.com/ryanbillingsley\"
      rel=\"nofollow\">https://twitter.com/ryanbillingsley</a><br>\n<a href=\"https://horriblenight.com/\"
      rel=\"nofollow\">https://horriblenight.com/</a></p>\n\n<p>00:00 - Fade In<br>\n00:50
      - Ryan introduces us to ClusterTruck.<br>\n02:00 - How did Ryan get into Elixir?<br>\n03:12
      - Where does the name ClusterTruck come from?<br>\n04:17 - Tell us about the
      projects you have in production.<br>\n05:50 - Why are you using Elixir in these
      projects.<br>\n08:11 - Disadvantages of using Elixir<br>\n09:22 - Comparing
      Elixir with Ruby, Node, Go.<br>\n11:38 - Where is ClusterTruck hosting their
      applications?<br>\n15:03 - Kubernetes?<br>\n16:03 - Zero Downtime Deployments?<br>\n16:42
      - Do you do any clustering?<br>\n18:06 - How does Elixir perform compared to
      other project environments you’ve worked in?<br>\n19:52 - How are you solving
      background task processing?<br>\n21:09 - Other libraries?<br>\n23:34 - Other
      third party integrations?<br>\n25:46 - Is there a time Elixir has saved the
      day in Production?<br>\n27:47 - Cool OTP Features!<br>\n29:45 - Tips to devs
      thinking about running Elixir in Production.<br>\n31:17 - Outro</p>\n\n<p>Learn
      more about how SmartLogic uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix
      and Elixir.</a></p><p>Special Guest: Ryan Billingsley.</p><p>Links:</p><ul><li><a
      href=\"https://pragprog.com/book/elixir16/programming-elixir-1-6\" title=\"Programming
      Elixir\" rel=\"nofollow\">Programming Elixir</a></li><li><a href=\"https://docs.saltstack.com/en/latest/\"
      title=\"Salt Stack\" rel=\"nofollow\">Salt Stack</a></li><li><a href=\"https://github.com/bitwalker/swarm\"
      title=\"Swarm\" rel=\"nofollow\">Swarm</a></li><li><a href=\"https://github.com/zorbash/opus\"
      title=\"Opus\" rel=\"nofollow\">Opus</a></li><li><a href=\"https://hexdocs.pm/elixir/master/GenServer.html#c:handle_continue/2\"
      title=\"handle_continue\" rel=\"nofollow\">handle_continue</a></li></ul>\n      "
  contentEncoded: "\n        <p>We talk with Ryan Billingsley from ClusterTruck about
    their current Elixir projects and how they are deployed.</p>\n\n<p>Ryan Billingsley
    - <a href=\"https://www.clustertruck.com/\" rel=\"nofollow\">ClusterTruck</a></p>\n\n<p>Find
    Ryan elsewhere online:<br>\n<a href=\"https://twitter.com/ryanbillingsley\" rel=\"nofollow\">https://twitter.com/ryanbillingsley</a><br>\n<a
    href=\"https://horriblenight.com/\" rel=\"nofollow\">https://horriblenight.com/</a></p>\n\n<p>00:00
    - Fade In<br>\n00:50 - Ryan introduces us to ClusterTruck.<br>\n02:00 - How did
    Ryan get into Elixir?<br>\n03:12 - Where does the name ClusterTruck come from?<br>\n04:17
    - Tell us about the projects you have in production.<br>\n05:50 - Why are you
    using Elixir in these projects.<br>\n08:11 - Disadvantages of using Elixir<br>\n09:22
    - Comparing Elixir with Ruby, Node, Go.<br>\n11:38 - Where is ClusterTruck hosting
    their applications?<br>\n15:03 - Kubernetes?<br>\n16:03 - Zero Downtime Deployments?<br>\n16:42
    - Do you do any clustering?<br>\n18:06 - How does Elixir perform compared to other
    project environments you’ve worked in?<br>\n19:52 - How are you solving background
    task processing?<br>\n21:09 - Other libraries?<br>\n23:34 - Other third party
    integrations?<br>\n25:46 - Is there a time Elixir has saved the day in Production?<br>\n27:47
    - Cool OTP Features!<br>\n29:45 - Tips to devs thinking about running Elixir in
    Production.<br>\n31:17 - Outro</p>\n\n<p>Learn more about how SmartLogic uses
    <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix and Elixir.</a></p><p>Special
    Guest: Ryan Billingsley.</p><p>Links:</p><ul><li><a href=\"https://pragprog.com/book/elixir16/programming-elixir-1-6\"
    title=\"Programming Elixir\" rel=\"nofollow\">Programming Elixir</a></li><li><a
    href=\"https://docs.saltstack.com/en/latest/\" title=\"Salt Stack\" rel=\"nofollow\">Salt
    Stack</a></li><li><a href=\"https://github.com/bitwalker/swarm\" title=\"Swarm\"
    rel=\"nofollow\">Swarm</a></li><li><a href=\"https://github.com/zorbash/opus\"
    title=\"Opus\" rel=\"nofollow\">Opus</a></li><li><a href=\"https://hexdocs.pm/elixir/master/GenServer.html#c:handle_continue/2\"
    title=\"handle_continue\" rel=\"nofollow\">handle_continue</a></li></ul>\n      "
- title: Dan Ivovich from SmartLogic - Elixir in Production
  slug: season-1-smartlogic
  link: https://podcast.smartlogic.io/season-1-smartlogic
  guid: f71af757-ce4c-44a0-8e78-5766711fd7d4
  pubDate: Thu, 28 Feb 2019 06:00:00 -0500
  description: "We talk with developers from the team here at SmartLogic about our
    current practices on deploying Elixir and Phoenix in production.\nDan Ivovich
    - Director of Development Operations @ SmartLogic\nLearn more about how SmartLogic
    uses Phoenix and Elixir. (https://smartlogic.io/phoenix-and-elixir)\n00:00 - Fade
    In\n00:30 - Introductions to Eric, Dan and SmartLogic\nDan Ivovich - Director
    of Development Operations @ SmartLogic\nEric Oestrich - Developer, Elixir Lead
    @ SmartLogic\nJustus Eapen - Full stack developer @ SmartLogic\nIntroduced to
    Elixir by an old colleague. \n1:20 - What Elixir projects do you have in production?
    \nSeveral client projects in production. Several Mobile Apps with APIs powered
    by Phoenix and Elixir. \nBaltimore Water Taxi. \nA digital marketplace.\nAnd more!\n1:57
    - Advantages and disadvantages to using Elixir.\nWe made the switch when a colleague
    was stoked about Functional Programming and introduced us to Elixir. We were won
    over by the performance and rich feature sets, OTP, etc.\n2:43 - Where are we
    hosting our Elixir Apps?\nHeroku \nAWS \nLinode \nDigital Ocean \n6:20Deployment
    process, tools, scripting\nAnsible - for underlying VPS’s, servers, and more recently
    deployment itself. (Similar to Capistrano).  \nDistillery  \nMix.release \n7:18
    - Zero Downtime Deployments\nOld school load balancers and rolling restarts \n7:46
    - What are the performance metrics like? Comparatively.\nRuby ends up with memory
    leaks. That doesn’t happen with Elixir. \nMemory utilization is flat and low no
    matter what. \n“Phenomenal response times” \n8:54 - How does Eric think about
    clustered applications in Elixir?\nGoing Multi Node (https://www.youtube.com/watch?v=lCUKQnkjajo
    (https://www.youtube.com/watch?v=lCUKQnkjajo)) \nPg2 (http://erlang.org/doc/man/pg2.html)
    - process groups \nMnesia (http://erlang.org/doc/man/mnesia.html) distributed
    database (beware!) \n“Just sending messages to pids because Erlang is great” \nSwarm
    (https://github.com/bitwalker/swarm) / Horde (https://github.com/derekkraan/horde)
    \n12:40 - How do we handle background tasks?\nStarted with verk (https://github.com/edgurgel/verk)
    \nRecently becoming more comfortable with spinning up GenServers (https://hexdocs.pm/elixir/GenServer.html)
    \n“The language itself is built to be concurrent.” \n15:06 What libraries are
    we using in prod?\nFirst thing: You don’t need a whole lot because the language
    is so well designed. \nPhoenix (https://phoenixframework.org/) - web framework
    \nEcto (https://hexdocs.pm/ecto/Ecto.html) - sort of an ORM \nDistillery (https://github.com/bitwalker/distillery)
    - for releases \nBamboo (https://github.com/thoughtbot/bamboo) - for sending emails
    \nQuantum (https://github.com/c-rack/quantum-elixir) - for task scheduling \nTimex
    (https://github.com/bitwalker/timex) - for dates and times, and timezones \nCachex
    (https://github.com/whitfin/cachex) - for caching \n18:20- What third party integrations
    have we attempted\nStripe \nSquare \nTwilio \nMindbody \nAlways building our own
    clients.  Using HTTPoison (https://github.com/edgurgel/httpoison)\n19:58Has Elixir
    ever saved the day in production?\nIt’s saved many days by PREVENTING ISSUES.
    Systems are architected for reliability and fault-tolerance.\n21:48 - Where do
    supervision trees come from? What is OTP?\nOTP is an Erlang standard lib \nIncludes
    supervision trees, genservers, ETS, and a lot of stuff we don’t even know about!
    \ngen_tcp (http://erlang.org/doc/man/gen_tcp.html) \nMnesia \ndets (http://erlang.org/doc/man/dets.html)
    \n23:43- Tips for devs considering running elixir in production.\nJump in and
    read the docs \nUnderstand how systems boot, distillery releases, config providers,
    etc. \n“Good server monitoring hygiene” \n“DIVE IN!” \n19:54 Outro\nLearn more
    about how SmartLogic uses Phoenix and Elixir. (https://smr.tl/2Hyslu8) Special
    Guest: Dan Ivovich.\n"
  author: SmartLogic LLC
  enclosure:
    url: https://aphid.fireside.fm/d/1437767933/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/f71af757-ce4c-44a0-8e78-5766711fd7d4.mp3
    length: '27340492'
    type: audio/mp3
  itunes:
    episodeType: full
    season: '1'
    author: SmartLogic LLC
    subtitle: We talk with developers from here at SmartLogic about our current practices
      on deploying Elixir and Phoenix in production.
    duration: '28:28'
    explicit: 'no'
    keywords: elixir, phoenix, smartlogic
    image: https://assets.fireside.fm/file/fireside-images/podcasts/images/0/03a50f66-dc5e-4da4-ab6e-31895b6d4c9e/cover.jpg?v=2
    summary: "\n        <p>We talk with developers from the team here at SmartLogic
      about our current practices on deploying Elixir and Phoenix in production.</p>\n\n<p>Dan
      Ivovich - Director of Development Operations @ SmartLogic</p>\n\n<p>Learn more
      about how SmartLogic uses <a href=\"https://smartlogic.io/phoenix-and-elixir\"
      rel=\"nofollow\">Phoenix and Elixir.</a></p>\n\n<p>00:00 - Fade In</p>\n\n<p>00:30
      - Introductions to Eric, Dan and SmartLogic</p>\n\n<p>Dan Ivovich - Director
      of Development Operations @ SmartLogic</p>\n\n<p>Eric Oestrich - Developer,
      Elixir Lead @ SmartLogic</p>\n\n<p>Justus Eapen - Full stack developer @ SmartLogic</p>\n\n<p>Introduced
      to Elixir by an old colleague. </p>\n\n<p>1:20 - What Elixir projects do you
      have in production? </p>\n\n<p>Several client projects in production. Several
      Mobile Apps with APIs powered by Phoenix and Elixir. </p>\n\n<p>Baltimore Water
      Taxi. </p>\n\n<p>A digital marketplace.</p>\n\n<p>And more!</p>\n\n<p>1:57 -
      Advantages and disadvantages to using Elixir.</p>\n\n<p>We made the switch when
      a colleague was stoked about Functional Programming and introduced us to Elixir.
      We were won over by the performance and rich feature sets, OTP, etc.</p>\n\n<p>2:43
      - Where are we hosting our Elixir Apps?</p>\n\n<ul>\n<li>Heroku </li>\n<li>AWS
      </li>\n<li>Linode </li>\n<li>Digital Ocean </li>\n</ul>\n\n<p>6:20Deployment
      process, tools, scripting</p>\n\n<ul>\n<li>Ansible - for underlying VPS’s, servers,
      and more recently deployment itself. (Similar to Capistrano).<br></li>\n<li>Distillery<br></li>\n<li>Mix.release
      </li>\n</ul>\n\n<p>7:18 - Zero Downtime Deployments</p>\n\n<ul>\n<li>Old school
      load balancers and rolling restarts </li>\n</ul>\n\n<p>7:46 - What are the performance
      metrics like? Comparatively.</p>\n\n<ul>\n<li>Ruby ends up with memory leaks.
      That doesn’t happen with Elixir. </li>\n<li>Memory utilization is flat and low
      no matter what. </li>\n<li>“Phenomenal response times” </li>\n</ul>\n\n<p>8:54
      - How does Eric think about clustered applications in Elixir?</p>\n\n<ul>\n<li>Going
      Multi Node (<a href=\"https://www.youtube.com/watch?v=lCUKQnkjajo\" rel=\"nofollow\">https://www.youtube.com/watch?v=lCUKQnkjajo</a>)
      </li>\n<li><a href=\"http://erlang.org/doc/man/pg2.html\" rel=\"nofollow\">Pg2</a>
      - process groups </li>\n<li><a href=\"http://erlang.org/doc/man/mnesia.html\"
      rel=\"nofollow\">Mnesia</a> distributed database (beware!) </li>\n<li>“Just
      sending messages to pids because Erlang is great” </li>\n<li><a href=\"https://github.com/bitwalker/swarm\"
      rel=\"nofollow\">Swarm</a> / <a href=\"https://github.com/derekkraan/horde\"
      rel=\"nofollow\">Horde</a> </li>\n</ul>\n\n<p>12:40 - How do we handle background
      tasks?</p>\n\n<ul>\n<li>Started with <a href=\"https://github.com/edgurgel/verk\"
      rel=\"nofollow\">verk</a> </li>\n<li>Recently becoming more comfortable with
      spinning up <a href=\"https://hexdocs.pm/elixir/GenServer.html\" rel=\"nofollow\">GenServers</a>
      </li>\n<li>“The language itself is built to be concurrent.” </li>\n</ul>\n\n<p>15:06
      What libraries are we using in prod?</p>\n\n<ul>\n<li>First thing: You don’t
      need a whole lot because the language is so well designed. </li>\n<li><a href=\"https://phoenixframework.org/\"
      rel=\"nofollow\">Phoenix</a> - web framework </li>\n<li><a href=\"https://hexdocs.pm/ecto/Ecto.html\"
      rel=\"nofollow\">Ecto</a> - sort of an ORM </li>\n<li><a href=\"https://github.com/bitwalker/distillery\"
      rel=\"nofollow\">Distillery</a> - for releases </li>\n<li><a href=\"https://github.com/thoughtbot/bamboo\"
      rel=\"nofollow\">Bamboo</a> - for sending emails </li>\n<li><a href=\"https://github.com/c-rack/quantum-elixir\"
      rel=\"nofollow\">Quantum</a> - for task scheduling </li>\n<li><a href=\"https://github.com/bitwalker/timex\"
      rel=\"nofollow\">Timex</a> - for dates and times, and timezones </li>\n<li><a
      href=\"https://github.com/whitfin/cachex\" rel=\"nofollow\">Cachex</a> - for
      caching </li>\n</ul>\n\n<p>18:20- What third party integrations have we attempted</p>\n\n<ul>\n<li>Stripe
      </li>\n<li>Square </li>\n<li>Twilio </li>\n<li>Mindbody </li>\n</ul>\n\n<p>Always
      building our own clients.  Using <a href=\"https://github.com/edgurgel/httpoison\"
      rel=\"nofollow\">HTTPoison</a></p>\n\n<p>19:58Has Elixir ever saved the day
      in production?</p>\n\n<p>It’s saved many days by PREVENTING ISSUES. Systems
      are architected for reliability and fault-tolerance.</p>\n\n<p>21:48 - Where
      do supervision trees come from? What is OTP?</p>\n\n<ul>\n<li>OTP is an Erlang
      standard lib </li>\n<li>Includes supervision trees, genservers, ETS, and a lot
      of stuff we don’t even know about! </li>\n<li><a href=\"http://erlang.org/doc/man/gen_tcp.html\"
      rel=\"nofollow\">gen_tcp</a> </li>\n<li>Mnesia </li>\n<li><a href=\"http://erlang.org/doc/man/dets.html\"
      rel=\"nofollow\">dets</a> </li>\n</ul>\n\n<p>23:43- Tips for devs considering
      running elixir in production.</p>\n\n<ul>\n<li>Jump in and read the docs </li>\n<li>Understand
      how systems boot, distillery releases, config providers, etc. </li>\n<li>“Good
      server monitoring hygiene” </li>\n<li>“DIVE IN!” \n19:54 Outro</li>\n</ul>\n\n<p>Learn
      more about how SmartLogic uses <a href=\"https://smr.tl/2Hyslu8\" rel=\"nofollow\">Phoenix
      and Elixir.</a></p><p>Special Guest: Dan Ivovich.</p><p>Links:</p><ul><li><a
      href=\"https://www.youtube.com/watch?v=lCUKQnkjajo\" title=\"Going Multi-Node\"
      rel=\"nofollow\">Going Multi-Node</a></li><li><a href=\"http://erlang.org/doc/man/pg2.html\"
      title=\"PG2\" rel=\"nofollow\">PG2</a></li><li><a href=\"http://erlang.org/doc/man/mnesia.html\"
      title=\"mnesia\" rel=\"nofollow\">mnesia</a></li><li><a href=\"https://github.com/bitwalker/swarm\"
      title=\"Swarm\" rel=\"nofollow\">Swarm</a></li><li><a href=\"https://github.com/derekkraan/horde\"
      title=\"Horde\" rel=\"nofollow\">Horde</a></li><li><a href=\"https://github.com/edgurgel/verk\"
      title=\"Verk\" rel=\"nofollow\">Verk</a></li><li><a href=\"https://github.com/thoughtbot/bamboo\"
      title=\"Bamboo\" rel=\"nofollow\">Bamboo</a></li><li><a href=\"https://github.com/quantum-elixir/quantum-core\"
      title=\"Quantum\" rel=\"nofollow\">Quantum</a></li><li><a href=\"https://github.com/whitfin/cachex\"
      title=\"Cachex\" rel=\"nofollow\">Cachex</a></li></ul>\n      "
  contentEncoded: "\n        <p>We talk with developers from the team here at SmartLogic
    about our current practices on deploying Elixir and Phoenix in production.</p>\n\n<p>Dan
    Ivovich - Director of Development Operations @ SmartLogic</p>\n\n<p>Learn more
    about how SmartLogic uses <a href=\"https://smartlogic.io/phoenix-and-elixir\"
    rel=\"nofollow\">Phoenix and Elixir.</a></p>\n\n<p>00:00 - Fade In</p>\n\n<p>00:30
    - Introductions to Eric, Dan and SmartLogic</p>\n\n<p>Dan Ivovich - Director of
    Development Operations @ SmartLogic</p>\n\n<p>Eric Oestrich - Developer, Elixir
    Lead @ SmartLogic</p>\n\n<p>Justus Eapen - Full stack developer @ SmartLogic</p>\n\n<p>Introduced
    to Elixir by an old colleague. </p>\n\n<p>1:20 - What Elixir projects do you have
    in production? </p>\n\n<p>Several client projects in production. Several Mobile
    Apps with APIs powered by Phoenix and Elixir. </p>\n\n<p>Baltimore Water Taxi.
    </p>\n\n<p>A digital marketplace.</p>\n\n<p>And more!</p>\n\n<p>1:57 - Advantages
    and disadvantages to using Elixir.</p>\n\n<p>We made the switch when a colleague
    was stoked about Functional Programming and introduced us to Elixir. We were won
    over by the performance and rich feature sets, OTP, etc.</p>\n\n<p>2:43 - Where
    are we hosting our Elixir Apps?</p>\n\n<ul>\n<li>Heroku </li>\n<li>AWS </li>\n<li>Linode
    </li>\n<li>Digital Ocean </li>\n</ul>\n\n<p>6:20Deployment process, tools, scripting</p>\n\n<ul>\n<li>Ansible
    - for underlying VPS’s, servers, and more recently deployment itself. (Similar
    to Capistrano).<br></li>\n<li>Distillery<br></li>\n<li>Mix.release </li>\n</ul>\n\n<p>7:18
    - Zero Downtime Deployments</p>\n\n<ul>\n<li>Old school load balancers and rolling
    restarts </li>\n</ul>\n\n<p>7:46 - What are the performance metrics like? Comparatively.</p>\n\n<ul>\n<li>Ruby
    ends up with memory leaks. That doesn’t happen with Elixir. </li>\n<li>Memory
    utilization is flat and low no matter what. </li>\n<li>“Phenomenal response times”
    </li>\n</ul>\n\n<p>8:54 - How does Eric think about clustered applications in
    Elixir?</p>\n\n<ul>\n<li>Going Multi Node (<a href=\"https://www.youtube.com/watch?v=lCUKQnkjajo\"
    rel=\"nofollow\">https://www.youtube.com/watch?v=lCUKQnkjajo</a>) </li>\n<li><a
    href=\"http://erlang.org/doc/man/pg2.html\" rel=\"nofollow\">Pg2</a> - process
    groups </li>\n<li><a href=\"http://erlang.org/doc/man/mnesia.html\" rel=\"nofollow\">Mnesia</a>
    distributed database (beware!) </li>\n<li>“Just sending messages to pids because
    Erlang is great” </li>\n<li><a href=\"https://github.com/bitwalker/swarm\" rel=\"nofollow\">Swarm</a>
    / <a href=\"https://github.com/derekkraan/horde\" rel=\"nofollow\">Horde</a> </li>\n</ul>\n\n<p>12:40
    - How do we handle background tasks?</p>\n\n<ul>\n<li>Started with <a href=\"https://github.com/edgurgel/verk\"
    rel=\"nofollow\">verk</a> </li>\n<li>Recently becoming more comfortable with spinning
    up <a href=\"https://hexdocs.pm/elixir/GenServer.html\" rel=\"nofollow\">GenServers</a>
    </li>\n<li>“The language itself is built to be concurrent.” </li>\n</ul>\n\n<p>15:06
    What libraries are we using in prod?</p>\n\n<ul>\n<li>First thing: You don’t need
    a whole lot because the language is so well designed. </li>\n<li><a href=\"https://phoenixframework.org/\"
    rel=\"nofollow\">Phoenix</a> - web framework </li>\n<li><a href=\"https://hexdocs.pm/ecto/Ecto.html\"
    rel=\"nofollow\">Ecto</a> - sort of an ORM </li>\n<li><a href=\"https://github.com/bitwalker/distillery\"
    rel=\"nofollow\">Distillery</a> - for releases </li>\n<li><a href=\"https://github.com/thoughtbot/bamboo\"
    rel=\"nofollow\">Bamboo</a> - for sending emails </li>\n<li><a href=\"https://github.com/c-rack/quantum-elixir\"
    rel=\"nofollow\">Quantum</a> - for task scheduling </li>\n<li><a href=\"https://github.com/bitwalker/timex\"
    rel=\"nofollow\">Timex</a> - for dates and times, and timezones </li>\n<li><a
    href=\"https://github.com/whitfin/cachex\" rel=\"nofollow\">Cachex</a> - for caching
    </li>\n</ul>\n\n<p>18:20- What third party integrations have we attempted</p>\n\n<ul>\n<li>Stripe
    </li>\n<li>Square </li>\n<li>Twilio </li>\n<li>Mindbody </li>\n</ul>\n\n<p>Always
    building our own clients.  Using <a href=\"https://github.com/edgurgel/httpoison\"
    rel=\"nofollow\">HTTPoison</a></p>\n\n<p>19:58Has Elixir ever saved the day in
    production?</p>\n\n<p>It’s saved many days by PREVENTING ISSUES. Systems are architected
    for reliability and fault-tolerance.</p>\n\n<p>21:48 - Where do supervision trees
    come from? What is OTP?</p>\n\n<ul>\n<li>OTP is an Erlang standard lib </li>\n<li>Includes
    supervision trees, genservers, ETS, and a lot of stuff we don’t even know about!
    </li>\n<li><a href=\"http://erlang.org/doc/man/gen_tcp.html\" rel=\"nofollow\">gen_tcp</a>
    </li>\n<li>Mnesia </li>\n<li><a href=\"http://erlang.org/doc/man/dets.html\" rel=\"nofollow\">dets</a>
    </li>\n</ul>\n\n<p>23:43- Tips for devs considering running elixir in production.</p>\n\n<ul>\n<li>Jump
    in and read the docs </li>\n<li>Understand how systems boot, distillery releases,
    config providers, etc. </li>\n<li>“Good server monitoring hygiene” </li>\n<li>“DIVE
    IN!” \n19:54 Outro</li>\n</ul>\n\n<p>Learn more about how SmartLogic uses <a href=\"https://smr.tl/2Hyslu8\"
    rel=\"nofollow\">Phoenix and Elixir.</a></p><p>Special Guest: Dan Ivovich.</p><p>Links:</p><ul><li><a
    href=\"https://www.youtube.com/watch?v=lCUKQnkjajo\" title=\"Going Multi-Node\"
    rel=\"nofollow\">Going Multi-Node</a></li><li><a href=\"http://erlang.org/doc/man/pg2.html\"
    title=\"PG2\" rel=\"nofollow\">PG2</a></li><li><a href=\"http://erlang.org/doc/man/mnesia.html\"
    title=\"mnesia\" rel=\"nofollow\">mnesia</a></li><li><a href=\"https://github.com/bitwalker/swarm\"
    title=\"Swarm\" rel=\"nofollow\">Swarm</a></li><li><a href=\"https://github.com/derekkraan/horde\"
    title=\"Horde\" rel=\"nofollow\">Horde</a></li><li><a href=\"https://github.com/edgurgel/verk\"
    title=\"Verk\" rel=\"nofollow\">Verk</a></li><li><a href=\"https://github.com/thoughtbot/bamboo\"
    title=\"Bamboo\" rel=\"nofollow\">Bamboo</a></li><li><a href=\"https://github.com/quantum-elixir/quantum-core\"
    title=\"Quantum\" rel=\"nofollow\">Quantum</a></li><li><a href=\"https://github.com/whitfin/cachex\"
    title=\"Cachex\" rel=\"nofollow\">Cachex</a></li></ul>\n      "
